
MS4525DO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006504  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08006618  08006618  00007618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f0  080069f0  000081e8  2**0
                  CONTENTS
  4 .ARM          00000008  080069f0  080069f0  000079f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069f8  080069f8  000081e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f8  080069f8  000079f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069fc  080069fc  000079fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08006a00  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001e8  08006be8  000081e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08006be8  0000841c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba2d  00000000  00000000  00008211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c89  00000000  00000000  00013c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  000158c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000890  00000000  00000000  000163d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187c8  00000000  00000000  00016c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de72  00000000  00000000  0002f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008980f  00000000  00000000  0003d29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6aa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e7c  00000000  00000000  000c6aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ca968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080065fc 	.word	0x080065fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080065fc 	.word	0x080065fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <_write>:
#include "MS4525DO.h"

#ifdef PRINTF_OVERLOAD
// Use the handle for the UART you configured (e.g., huart1)
extern UART_HandleTypeDef huart1;
int _write(int file, char *data, int len) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
    // Transmit data via UART
    HAL_UART_Transmit(&huart1, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <_write+0x28>)
 8000ae0:	f002 fe1e 	bl	8003720 <HAL_UART_Transmit>
    return len;
 8000ae4:	687b      	ldr	r3, [r7, #4]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000280 	.word	0x20000280

08000af4 <MS4525DO_Initialize>:
#endif
/**
 * Configures which i2c port MS4525DO is on
 */
void MS4525DO_Initialize(struct MS4525DO_t *pSensor, I2C_HandleTypeDef *hi2c) {
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
	/*Set i2c handle*/
	pSensor->i2c_handle = hi2c;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	683a      	ldr	r2, [r7, #0]
 8000b02:	601a      	str	r2, [r3, #0]
	/*Initialize everything to defaults*/
	SensorStatus initStatus = normal;
 8000b04:	2300      	movs	r3, #0
 8000b06:	73fb      	strb	r3, [r7, #15]
	pSensor->sensor_status = initStatus;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7bfa      	ldrb	r2, [r7, #15]
 8000b0c:	711a      	strb	r2, [r3, #4]
	pSensor->raw_data.pressure = 0;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	80da      	strh	r2, [r3, #6]
	pSensor->raw_data.temperature = 0;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	811a      	strh	r2, [r3, #8]
	pSensor->processed_data.pressure_psi = 0;
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	f04f 0200 	mov.w	r2, #0
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pSensor->processed_data.temperature_C = 0;
 8000b28:	6879      	ldr	r1, [r7, #4]
 8000b2a:	f04f 0200 	mov.w	r2, #0
 8000b2e:	f04f 0300 	mov.w	r3, #0
 8000b32:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pSensor->processed_data.airspeed_mps = 0;
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pSensor->processed_data.airspeed_calibrated_mps = 0;
 8000b44:	6879      	ldr	r1, [r7, #4]
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	f04f 0300 	mov.w	r3, #0
 8000b4e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	pSensor->CAN_package.airspeed = 0;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	861a      	strh	r2, [r3, #48]	@ 0x30
	pSensor->CAN_package.temperature = 0;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	865a      	strh	r2, [r3, #50]	@ 0x32
	pSensor->CAN_package.is_stale = 0;
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8000b64:	f36f 0300 	bfc	r3, #0, #1
 8000b68:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
	pSensor->CAN_package.i2c_comms_error = 0;
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8000b72:	f36f 0341 	bfc	r3, #1, #1
 8000b76:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	0000      	movs	r0, r0
	...

08000b88 <read_MS4525DO>:
void read_MS4525DO(struct MS4525DO_t *pSensor) {
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	6078      	str	r0, [r7, #4]
	uint8_t data_buffer[4]; //data buffer to store raw I2C data
	HAL_StatusTypeDef i2c_status = HAL_I2C_Master_Receive(pSensor->i2c_handle, ADDRESS_I2C_MS4525DO << 1, data_buffer, sizeof(data_buffer), HAL_MAX_DELAY);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	f107 020c 	add.w	r2, r7, #12
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	218c      	movs	r1, #140	@ 0x8c
 8000ba2:	f001 fcab 	bl	80024fc <HAL_I2C_Master_Receive>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	75bb      	strb	r3, [r7, #22]
    printf("%u, ",data_buffer[1]);
    printf("%u, ",data_buffer[2]);
    printf("%u \r\n",data_buffer[3]);
#endif
    /*Status - 2 Bits*/
    uint8_t read_status = (uint8_t)(data_buffer[0] >> 6);
 8000baa:	7b3b      	ldrb	r3, [r7, #12]
 8000bac:	099b      	lsrs	r3, r3, #6
 8000bae:	757b      	strb	r3, [r7, #21]
    SensorStatus stat;
    switch (read_status){
 8000bb0:	7d7b      	ldrb	r3, [r7, #21]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d816      	bhi.n	8000be4 <read_MS4525DO+0x5c>
 8000bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bbc <read_MS4525DO+0x34>)
 8000bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbc:	08000bcd 	.word	0x08000bcd
 8000bc0:	08000bd3 	.word	0x08000bd3
 8000bc4:	08000bd9 	.word	0x08000bd9
 8000bc8:	08000bdf 	.word	0x08000bdf
    case 0:
    	stat = normal;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	75fb      	strb	r3, [r7, #23]
    	break;
 8000bd0:	e00b      	b.n	8000bea <read_MS4525DO+0x62>
    case 1:
    	stat = reserved;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	75fb      	strb	r3, [r7, #23]
    	break;
 8000bd6:	e008      	b.n	8000bea <read_MS4525DO+0x62>
    case 2:
    	stat = stale;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	75fb      	strb	r3, [r7, #23]
    	break;
 8000bdc:	e005      	b.n	8000bea <read_MS4525DO+0x62>
    case 3:
    	stat = fault;
 8000bde:	2303      	movs	r3, #3
 8000be0:	75fb      	strb	r3, [r7, #23]
    	break;
 8000be2:	e002      	b.n	8000bea <read_MS4525DO+0x62>
    default:
    	stat = unknown;
 8000be4:	2304      	movs	r3, #4
 8000be6:	75fb      	strb	r3, [r7, #23]
    	break;
 8000be8:	bf00      	nop
    }
    pSensor->sensor_status = stat;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7dfa      	ldrb	r2, [r7, #23]
 8000bee:	711a      	strb	r2, [r3, #4]
    /*Pressure - 14 Bits*/
    pSensor->raw_data.pressure = (((uint16_t)data_buffer[0] << 8) & 0x3F00) + ((uint16_t)data_buffer[1] << 0); 	//Combines High and Low Pressure. Clears status bits
 8000bf0:	7b3b      	ldrb	r3, [r7, #12]
 8000bf2:	021b      	lsls	r3, r3, #8
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	7b7a      	ldrb	r2, [r7, #13]
 8000bfe:	4413      	add	r3, r2
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	80da      	strh	r2, [r3, #6]
    /*Temperature - 11 Bits*/
    pSensor->raw_data.temperature = ((uint16_t)data_buffer[2] << 3) + ((uint16_t)data_buffer[3] >> 5);			//Combines High and Low Temperature. Clears last 5 bits.
 8000c06:	7bbb      	ldrb	r3, [r7, #14]
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	0952      	lsrs	r2, r2, #5
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	4413      	add	r3, r2
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	811a      	strh	r2, [r3, #8]
    if(TYPE_MS4525DO) {
    	 /*Type A*/
    	 pSensor->processed_data.pressure_psi = ((((double)pSensor->raw_data.pressure-1638.3)*(PMAX_PSI_MS4525DO - PMIN_PSI_MS4525DO ))/13106.4)+PMIN_PSI_MS4525DO;
    } else {
    	/*Type B*/
    	pSensor->processed_data.pressure_psi = ((((double)pSensor->raw_data.pressure-819.15)*(PMAX_PSI_MS4525DO-PMIN_PSI_MS4525DO))/14744.7)+PMIN_PSI_MS4525DO;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	88db      	ldrh	r3, [r3, #6]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fbe0 	bl	80003e4 <__aeabi_ui2d>
 8000c24:	a390      	add	r3, pc, #576	@ (adr r3, 8000e68 <read_MS4525DO+0x2e0>)
 8000c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2a:	f7ff fa9d 	bl	8000168 <__aeabi_dsub>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	460b      	mov	r3, r1
 8000c32:	4610      	mov	r0, r2
 8000c34:	4619      	mov	r1, r3
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	f7ff fa97 	bl	800016c <__adddf3>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	4610      	mov	r0, r2
 8000c44:	4619      	mov	r1, r3
 8000c46:	a38a      	add	r3, pc, #552	@ (adr r3, 8000e70 <read_MS4525DO+0x2e8>)
 8000c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4c:	f7ff fd6e 	bl	800072c <__aeabi_ddiv>
 8000c50:	4602      	mov	r2, r0
 8000c52:	460b      	mov	r3, r1
 8000c54:	4610      	mov	r0, r2
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	4b8c      	ldr	r3, [pc, #560]	@ (8000e90 <read_MS4525DO+0x308>)
 8000c5e:	f7ff fa83 	bl	8000168 <__aeabi_dsub>
 8000c62:	4602      	mov	r2, r0
 8000c64:	460b      	mov	r3, r1
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }
    pSensor->processed_data.temperature_C = (((double)pSensor->raw_data.temperature*200.0)/2047.0)-50.0;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	891b      	ldrh	r3, [r3, #8]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fbb7 	bl	80003e4 <__aeabi_ui2d>
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	4b86      	ldr	r3, [pc, #536]	@ (8000e94 <read_MS4525DO+0x30c>)
 8000c7c:	f7ff fc2c 	bl	80004d8 <__aeabi_dmul>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	4610      	mov	r0, r2
 8000c86:	4619      	mov	r1, r3
 8000c88:	a37b      	add	r3, pc, #492	@ (adr r3, 8000e78 <read_MS4525DO+0x2f0>)
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	f7ff fd4d 	bl	800072c <__aeabi_ddiv>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	4610      	mov	r0, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f04f 0200 	mov.w	r2, #0
 8000c9e:	4b7e      	ldr	r3, [pc, #504]	@ (8000e98 <read_MS4525DO+0x310>)
 8000ca0:	f7ff fa62 	bl	8000168 <__aeabi_dsub>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /*Output swings positive when Port 1> Port 2, negative vice versa. Output is 50% (8192D) when Port 1 = Port 2*/
    if(pSensor->processed_data.pressure_psi >= 0) {
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000cb4:	f04f 0200 	mov.w	r2, #0
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	f7ff fe92 	bl	80009e4 <__aeabi_dcmpge>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d01c      	beq.n	8000d00 <read_MS4525DO+0x178>
    	//Positive to denote Port 1 > Port 2
    	pSensor->processed_data.airspeed_mps = sqrt((2*6894.7*pSensor->processed_data.pressure_psi)/AIR_DENSITY);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000ccc:	a36c      	add	r3, pc, #432	@ (adr r3, 8000e80 <read_MS4525DO+0x2f8>)
 8000cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd2:	f7ff fc01 	bl	80004d8 <__aeabi_dmul>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	a36a      	add	r3, pc, #424	@ (adr r3, 8000e88 <read_MS4525DO+0x300>)
 8000ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce4:	f7ff fd22 	bl	800072c <__aeabi_ddiv>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4610      	mov	r0, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f005 fb8a 	bl	8006408 <sqrt>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8000cfe:	e029      	b.n	8000d54 <read_MS4525DO+0x1cc>
    } else {
        //Negative to denote Port 1 < Port 2
    	pSensor->processed_data.airspeed_mps = -sqrt((2*6894.7*abs(pSensor->processed_data.pressure_psi))/AIR_DENSITY);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000d06:	4610      	mov	r0, r2
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f7ff fe95 	bl	8000a38 <__aeabi_d2iz>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bfb8      	it	lt
 8000d14:	425b      	neglt	r3, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fb74 	bl	8000404 <__aeabi_i2d>
 8000d1c:	a358      	add	r3, pc, #352	@ (adr r3, 8000e80 <read_MS4525DO+0x2f8>)
 8000d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d22:	f7ff fbd9 	bl	80004d8 <__aeabi_dmul>
 8000d26:	4602      	mov	r2, r0
 8000d28:	460b      	mov	r3, r1
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	a356      	add	r3, pc, #344	@ (adr r3, 8000e88 <read_MS4525DO+0x300>)
 8000d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d34:	f7ff fcfa 	bl	800072c <__aeabi_ddiv>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f005 fb62 	bl	8006408 <sqrt>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
 8000d48:	4614      	mov	r4, r2
 8000d4a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	e9c3 4508 	strd	r4, r5, [r3, #32]
    }

    pSensor->processed_data.airspeed_calibrated_mps = calibrate_airspeed(pSensor->raw_data.pressure, pSensor->processed_data.airspeed_mps);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	88d9      	ldrh	r1, [r3, #6]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	f000 f8a6 	bl	8000eb0 <calibrate_airspeed>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    printf(", %f", pSensor->processed_data.airspeed_mps);
    printf(", %f \r\n", pSensor->processed_data.airspeed_calibrated_mps);
#endif

    /*Populate CAN package*/
    uint16_t airspeed_tx = (uint8_t)(pSensor->processed_data.airspeed_calibrated_mps*10); //multiply by 10 to preserve 1 decimal place
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	4b48      	ldr	r3, [pc, #288]	@ (8000e9c <read_MS4525DO+0x314>)
 8000d7a:	f7ff fbad 	bl	80004d8 <__aeabi_dmul>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	f7ff fe7f 	bl	8000a88 <__aeabi_d2uiz>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	827b      	strh	r3, [r7, #18]
    uint16_t temperature_tx = (uint8_t)(pSensor->processed_data.temperature_C*10);		 //multiply by 10 to preserve 1 decimal place
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000d96:	f04f 0200 	mov.w	r2, #0
 8000d9a:	4b40      	ldr	r3, [pc, #256]	@ (8000e9c <read_MS4525DO+0x314>)
 8000d9c:	f7ff fb9c 	bl	80004d8 <__aeabi_dmul>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4610      	mov	r0, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	f7ff fe6e 	bl	8000a88 <__aeabi_d2uiz>
 8000dac:	4603      	mov	r3, r0
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	823b      	strh	r3, [r7, #16]
    pSensor->CAN_package.airspeed = airspeed_tx;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	8a7a      	ldrh	r2, [r7, #18]
 8000db6:	861a      	strh	r2, [r3, #48]	@ 0x30
    pSensor->CAN_package.temperature = temperature_tx;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	8a3a      	ldrh	r2, [r7, #16]
 8000dbc:	865a      	strh	r2, [r3, #50]	@ 0x32
    if(pSensor->sensor_status == stale) {
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	791b      	ldrb	r3, [r3, #4]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d107      	bne.n	8000dd6 <read_MS4525DO+0x24e>
    	pSensor->CAN_package.is_stale = 1;
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
 8000dd4:	e006      	b.n	8000de4 <read_MS4525DO+0x25c>
    } else {
    	pSensor->CAN_package.is_stale = 0;
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8000ddc:	f36f 0300 	bfc	r3, #0, #1
 8000de0:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
    }
    if((pSensor->sensor_status == reserved) || (pSensor->sensor_status == fault) || (pSensor->sensor_status == unknown)) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	791b      	ldrb	r3, [r3, #4]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d007      	beq.n	8000dfc <read_MS4525DO+0x274>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	791b      	ldrb	r3, [r3, #4]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d003      	beq.n	8000dfc <read_MS4525DO+0x274>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	2b04      	cmp	r3, #4
 8000dfa:	d107      	bne.n	8000e0c <read_MS4525DO+0x284>
    	pSensor->CAN_package.i2c_comms_error = 1;
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8000e02:	f043 0302 	orr.w	r3, r3, #2
 8000e06:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
 8000e0a:	e006      	b.n	8000e1a <read_MS4525DO+0x292>
    } else {
    	pSensor->CAN_package.i2c_comms_error = 0;
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	f892 3034 	ldrb.w	r3, [r2, #52]	@ 0x34
 8000e12:	f36f 0341 	bfc	r3, #1, #1
 8000e16:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
    }
    printf("Airspeed: %u \r\n", pSensor->CAN_package.airspeed);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481f      	ldr	r0, [pc, #124]	@ (8000ea0 <read_MS4525DO+0x318>)
 8000e22:	f003 fb6f 	bl	8004504 <iprintf>
    printf("Temp: %u \r\n", pSensor->CAN_package.temperature);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	481d      	ldr	r0, [pc, #116]	@ (8000ea4 <read_MS4525DO+0x31c>)
 8000e2e:	f003 fb69 	bl	8004504 <iprintf>
    printf("Is Stale: %u \r\n", pSensor->CAN_package.is_stale);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000e38:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4819      	ldr	r0, [pc, #100]	@ (8000ea8 <read_MS4525DO+0x320>)
 8000e42:	f003 fb5f 	bl	8004504 <iprintf>
    printf("Comms Err: %u \r\n", pSensor->CAN_package.i2c_comms_error);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000e4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	4815      	ldr	r0, [pc, #84]	@ (8000eac <read_MS4525DO+0x324>)
 8000e56:	f003 fb55 	bl	8004504 <iprintf>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bdb0      	pop	{r4, r5, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	f3af 8000 	nop.w
 8000e68:	33333333 	.word	0x33333333
 8000e6c:	40899933 	.word	0x40899933
 8000e70:	9999999a 	.word	0x9999999a
 8000e74:	40cccc59 	.word	0x40cccc59
 8000e78:	00000000 	.word	0x00000000
 8000e7c:	409ffc00 	.word	0x409ffc00
 8000e80:	33333333 	.word	0x33333333
 8000e84:	40caeeb3 	.word	0x40caeeb3
 8000e88:	9999999a 	.word	0x9999999a
 8000e8c:	3ff39999 	.word	0x3ff39999
 8000e90:	3ff00000 	.word	0x3ff00000
 8000e94:	40690000 	.word	0x40690000
 8000e98:	40490000 	.word	0x40490000
 8000e9c:	40240000 	.word	0x40240000
 8000ea0:	08006618 	.word	0x08006618
 8000ea4:	08006628 	.word	0x08006628
 8000ea8:	08006634 	.word	0x08006634
 8000eac:	08006644 	.word	0x08006644

08000eb0 <calibrate_airspeed>:

double calibrate_airspeed(uint16_t raw_pressure, double uncalibrated_airspeed) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	81fb      	strh	r3, [r7, #14]
	double calibrated_airspeed = 0;
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(raw_pressure > RAW_PRESSURE_DEC_550RPM) {
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	f242 120f 	movw	r2, #8463	@ 0x210f
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d904      	bls.n	8000ee0 <calibrate_airspeed+0x30>
		calibrated_airspeed = uncalibrated_airspeed; //calibration not needed for higher airspeeds
 8000ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eda:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ede:	e141      	b.n	8001164 <calibrate_airspeed+0x2b4>
	} else {
		/*calibration needed at lower airspeeds (below 550 RPM in wind tunnel)*/
		/*between calibration points*/
		if((raw_pressure > RAW_PRESSURE_DEC_200RPM) && (raw_pressure < RAW_PRESSURE_DEC_250RPM)) {
 8000ee0:	89fb      	ldrh	r3, [r7, #14]
 8000ee2:	f242 021f 	movw	r2, #8223	@ 0x201f
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d928      	bls.n	8000f3c <calibrate_airspeed+0x8c>
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	f242 0226 	movw	r2, #8230	@ 0x2026
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d823      	bhi.n	8000f3c <calibrate_airspeed+0x8c>
			calibrated_airspeed = LINEAR_INTERPOLATE(raw_pressure, RAW_PRESSURE_DEC_200RPM, RAW_PRESSURE_DEC_250RPM, WINDTUNNEL_BETZ_200RPM, WINDTUNNEL_BETZ_250RPM);
 8000ef4:	89fb      	ldrh	r3, [r7, #14]
 8000ef6:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8000efa:	3b1f      	subs	r3, #31
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fa81 	bl	8000404 <__aeabi_i2d>
 8000f02:	a39d      	add	r3, pc, #628	@ (adr r3, 8001178 <calibrate_airspeed+0x2c8>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f7ff fae6 	bl	80004d8 <__aeabi_dmul>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	4ba7      	ldr	r3, [pc, #668]	@ (80011b8 <calibrate_airspeed+0x308>)
 8000f1a:	f7ff fc07 	bl	800072c <__aeabi_ddiv>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	f7ff f91d 	bl	800016c <__adddf3>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000f3a:	e113      	b.n	8001164 <calibrate_airspeed+0x2b4>
		} else if((raw_pressure > RAW_PRESSURE_DEC_250RPM) && (raw_pressure < RAW_PRESSURE_DEC_300RPM)){
 8000f3c:	89fb      	ldrh	r3, [r7, #14]
 8000f3e:	f242 0227 	movw	r2, #8231	@ 0x2027
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d927      	bls.n	8000f96 <calibrate_airspeed+0xe6>
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	f242 0245 	movw	r2, #8261	@ 0x2045
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d822      	bhi.n	8000f96 <calibrate_airspeed+0xe6>
			calibrated_airspeed = LINEAR_INTERPOLATE(raw_pressure, RAW_PRESSURE_DEC_250RPM, RAW_PRESSURE_DEC_300RPM, WINDTUNNEL_BETZ_250RPM, WINDTUNNEL_BETZ_300RPM);
 8000f50:	89fb      	ldrh	r3, [r7, #14]
 8000f52:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8000f56:	3b27      	subs	r3, #39	@ 0x27
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fa53 	bl	8000404 <__aeabi_i2d>
 8000f5e:	a388      	add	r3, pc, #544	@ (adr r3, 8001180 <calibrate_airspeed+0x2d0>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	f7ff fab8 	bl	80004d8 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	4b91      	ldr	r3, [pc, #580]	@ (80011bc <calibrate_airspeed+0x30c>)
 8000f76:	f7ff fbd9 	bl	800072c <__aeabi_ddiv>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4610      	mov	r0, r2
 8000f80:	4619      	mov	r1, r3
 8000f82:	a37d      	add	r3, pc, #500	@ (adr r3, 8001178 <calibrate_airspeed+0x2c8>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	f7ff f8f0 	bl	800016c <__adddf3>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000f94:	e0e6      	b.n	8001164 <calibrate_airspeed+0x2b4>
		} else if ((raw_pressure > RAW_PRESSURE_DEC_300RPM) && (raw_pressure < RAW_PRESSURE_DEC_350RPM)) {
 8000f96:	89fb      	ldrh	r3, [r7, #14]
 8000f98:	f242 0246 	movw	r2, #8262	@ 0x2046
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d927      	bls.n	8000ff0 <calibrate_airspeed+0x140>
 8000fa0:	89fb      	ldrh	r3, [r7, #14]
 8000fa2:	f242 0265 	movw	r2, #8293	@ 0x2065
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d822      	bhi.n	8000ff0 <calibrate_airspeed+0x140>
			calibrated_airspeed = LINEAR_INTERPOLATE(raw_pressure, RAW_PRESSURE_DEC_300RPM, RAW_PRESSURE_DEC_350RPM, WINDTUNNEL_BETZ_300RPM, WINDTUNNEL_BETZ_350RPM);
 8000faa:	89fb      	ldrh	r3, [r7, #14]
 8000fac:	f5a3 5301 	sub.w	r3, r3, #8256	@ 0x2040
 8000fb0:	3b06      	subs	r3, #6
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fa26 	bl	8000404 <__aeabi_i2d>
 8000fb8:	a373      	add	r3, pc, #460	@ (adr r3, 8001188 <calibrate_airspeed+0x2d8>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fa8b 	bl	80004d8 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	4b7c      	ldr	r3, [pc, #496]	@ (80011c0 <calibrate_airspeed+0x310>)
 8000fd0:	f7ff fbac 	bl	800072c <__aeabi_ddiv>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	a36c      	add	r3, pc, #432	@ (adr r3, 8001190 <calibrate_airspeed+0x2e0>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff f8c3 	bl	800016c <__adddf3>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000fee:	e0b9      	b.n	8001164 <calibrate_airspeed+0x2b4>
		} else if((raw_pressure > RAW_PRESSURE_DEC_350RPM) && (raw_pressure < RAW_PRESSURE_DEC_400RPM)) {
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	f242 0266 	movw	r2, #8294	@ 0x2066
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d927      	bls.n	800104a <calibrate_airspeed+0x19a>
 8000ffa:	89fb      	ldrh	r3, [r7, #14]
 8000ffc:	f242 028c 	movw	r2, #8332	@ 0x208c
 8001000:	4293      	cmp	r3, r2
 8001002:	d822      	bhi.n	800104a <calibrate_airspeed+0x19a>
			calibrated_airspeed = LINEAR_INTERPOLATE(raw_pressure, RAW_PRESSURE_DEC_350RPM, RAW_PRESSURE_DEC_400RPM, WINDTUNNEL_BETZ_350RPM, WINDTUNNEL_BETZ_400RPM);
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	f5a3 5301 	sub.w	r3, r3, #8256	@ 0x2040
 800100a:	3b26      	subs	r3, #38	@ 0x26
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff f9f9 	bl	8000404 <__aeabi_i2d>
 8001012:	a361      	add	r3, pc, #388	@ (adr r3, 8001198 <calibrate_airspeed+0x2e8>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fa5e 	bl	80004d8 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b66      	ldr	r3, [pc, #408]	@ (80011c4 <calibrate_airspeed+0x314>)
 800102a:	f7ff fb7f 	bl	800072c <__aeabi_ddiv>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	a35a      	add	r3, pc, #360	@ (adr r3, 80011a0 <calibrate_airspeed+0x2f0>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff f896 	bl	800016c <__adddf3>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001048:	e08c      	b.n	8001164 <calibrate_airspeed+0x2b4>
		} else if ((raw_pressure > RAW_PRESSURE_DEC_400RPM) && (raw_pressure < RAW_PRESSURE_DEC_450RPM)) {
 800104a:	89fb      	ldrh	r3, [r7, #14]
 800104c:	f242 028d 	movw	r2, #8333	@ 0x208d
 8001050:	4293      	cmp	r3, r2
 8001052:	d927      	bls.n	80010a4 <calibrate_airspeed+0x1f4>
 8001054:	89fb      	ldrh	r3, [r7, #14]
 8001056:	f242 02d8 	movw	r2, #8408	@ 0x20d8
 800105a:	4293      	cmp	r3, r2
 800105c:	d822      	bhi.n	80010a4 <calibrate_airspeed+0x1f4>
			calibrated_airspeed = LINEAR_INTERPOLATE(raw_pressure, RAW_PRESSURE_DEC_400RPM, RAW_PRESSURE_DEC_450RPM, WINDTUNNEL_BETZ_400RPM, WINDTUNNEL_BETZ_450RPM);
 800105e:	89fb      	ldrh	r3, [r7, #14]
 8001060:	f5a3 5302 	sub.w	r3, r3, #8320	@ 0x2080
 8001064:	3b0d      	subs	r3, #13
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f9cc 	bl	8000404 <__aeabi_i2d>
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b55      	ldr	r3, [pc, #340]	@ (80011c8 <calibrate_airspeed+0x318>)
 8001072:	f7ff fa31 	bl	80004d8 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b52      	ldr	r3, [pc, #328]	@ (80011cc <calibrate_airspeed+0x31c>)
 8001084:	f7ff fb52 	bl	800072c <__aeabi_ddiv>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b4e      	ldr	r3, [pc, #312]	@ (80011d0 <calibrate_airspeed+0x320>)
 8001096:	f7ff f869 	bl	800016c <__adddf3>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80010a2:	e05f      	b.n	8001164 <calibrate_airspeed+0x2b4>
		} else if((raw_pressure > RAW_PRESSURE_DEC_450RPM) && (raw_pressure < RAW_PRESSURE_DEC_500RPM)) {
 80010a4:	89fb      	ldrh	r3, [r7, #14]
 80010a6:	f242 02d9 	movw	r2, #8409	@ 0x20d9
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d927      	bls.n	80010fe <calibrate_airspeed+0x24e>
 80010ae:	89fb      	ldrh	r3, [r7, #14]
 80010b0:	f242 02e2 	movw	r2, #8418	@ 0x20e2
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d822      	bhi.n	80010fe <calibrate_airspeed+0x24e>
			calibrated_airspeed = LINEAR_INTERPOLATE(raw_pressure, RAW_PRESSURE_DEC_450RPM, RAW_PRESSURE_DEC_500RPM, WINDTUNNEL_BETZ_450RPM, WINDTUNNEL_BETZ_500RPM);
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	f5a3 5303 	sub.w	r3, r3, #8384	@ 0x20c0
 80010be:	3b19      	subs	r3, #25
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f99f 	bl	8000404 <__aeabi_i2d>
 80010c6:	a338      	add	r3, pc, #224	@ (adr r3, 80011a8 <calibrate_airspeed+0x2f8>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff fa04 	bl	80004d8 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	4b3d      	ldr	r3, [pc, #244]	@ (80011d4 <calibrate_airspeed+0x324>)
 80010de:	f7ff fb25 	bl	800072c <__aeabi_ddiv>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	4b3a      	ldr	r3, [pc, #232]	@ (80011d8 <calibrate_airspeed+0x328>)
 80010f0:	f7ff f83c 	bl	800016c <__adddf3>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80010fc:	e032      	b.n	8001164 <calibrate_airspeed+0x2b4>
		} else if ((raw_pressure > RAW_PRESSURE_DEC_500RPM) && (raw_pressure < RAW_PRESSURE_DEC_550RPM)) {
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	f242 02e3 	movw	r2, #8419	@ 0x20e3
 8001104:	4293      	cmp	r3, r2
 8001106:	d927      	bls.n	8001158 <calibrate_airspeed+0x2a8>
 8001108:	89fb      	ldrh	r3, [r7, #14]
 800110a:	f242 120e 	movw	r2, #8462	@ 0x210e
 800110e:	4293      	cmp	r3, r2
 8001110:	d822      	bhi.n	8001158 <calibrate_airspeed+0x2a8>
			calibrated_airspeed = LINEAR_INTERPOLATE(raw_pressure, RAW_PRESSURE_DEC_500RPM, RAW_PRESSURE_DEC_550RPM, WINDTUNNEL_BETZ_500RPM, WINDTUNNEL_BETZ_550RPM);
 8001112:	89fb      	ldrh	r3, [r7, #14]
 8001114:	f5a3 5303 	sub.w	r3, r3, #8384	@ 0x20c0
 8001118:	3b23      	subs	r3, #35	@ 0x23
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f972 	bl	8000404 <__aeabi_i2d>
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <calibrate_airspeed+0x32c>)
 8001126:	f7ff f9d7 	bl	80004d8 <__aeabi_dmul>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <calibrate_airspeed+0x330>)
 8001138:	f7ff faf8 	bl	800072c <__aeabi_ddiv>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	a31a      	add	r3, pc, #104	@ (adr r3, 80011b0 <calibrate_airspeed+0x300>)
 8001146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114a:	f7ff f80f 	bl	800016c <__adddf3>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001156:	e005      	b.n	8001164 <calibrate_airspeed+0x2b4>
		} else {
			/*look up table if raw pressure falls exactly on calibration point*/
			calibrated_airspeed = calibrate_airspeed_LUT(raw_pressure);
 8001158:	89fb      	ldrh	r3, [r7, #14]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f844 	bl	80011e8 <calibrate_airspeed_LUT>
 8001160:	e9c7 0104 	strd	r0, r1, [r7, #16]
		}
	}
	return calibrated_airspeed;
 8001164:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	66666666 	.word	0x66666666
 800117c:	3ff26666 	.word	0x3ff26666
 8001180:	66666667 	.word	0x66666667
 8001184:	400c6666 	.word	0x400c6666
 8001188:	ccccccce 	.word	0xccccccce
 800118c:	400ecccc 	.word	0x400ecccc
 8001190:	cccccccd 	.word	0xcccccccd
 8001194:	4012cccc 	.word	0x4012cccc
 8001198:	99999998 	.word	0x99999998
 800119c:	400b9999 	.word	0x400b9999
 80011a0:	9999999a 	.word	0x9999999a
 80011a4:	40211999 	.word	0x40211999
 80011a8:	33333334 	.word	0x33333334
 80011ac:	40103333 	.word	0x40103333
 80011b0:	cccccccd 	.word	0xcccccccd
 80011b4:	40344ccc 	.word	0x40344ccc
 80011b8:	40200000 	.word	0x40200000
 80011bc:	403f0000 	.word	0x403f0000
 80011c0:	40400000 	.word	0x40400000
 80011c4:	40438000 	.word	0x40438000
 80011c8:	40110000 	.word	0x40110000
 80011cc:	40530000 	.word	0x40530000
 80011d0:	40280000 	.word	0x40280000
 80011d4:	40240000 	.word	0x40240000
 80011d8:	40304000 	.word	0x40304000
 80011dc:	40120000 	.word	0x40120000
 80011e0:	40460000 	.word	0x40460000
 80011e4:	00000000 	.word	0x00000000

080011e8 <calibrate_airspeed_LUT>:
double calibrate_airspeed_LUT(uint16_t raw_pressure) {
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
	double mapped_airspeed = 0;
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	switch (raw_pressure) {
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	f242 120f 	movw	r2, #8463	@ 0x210f
 8001204:	4293      	cmp	r3, r2
 8001206:	d05f      	beq.n	80012c8 <calibrate_airspeed_LUT+0xe0>
 8001208:	f242 120f 	movw	r2, #8463	@ 0x210f
 800120c:	4293      	cmp	r3, r2
 800120e:	dc61      	bgt.n	80012d4 <calibrate_airspeed_LUT+0xec>
 8001210:	f242 02e3 	movw	r2, #8419	@ 0x20e3
 8001214:	4293      	cmp	r3, r2
 8001216:	d051      	beq.n	80012bc <calibrate_airspeed_LUT+0xd4>
 8001218:	f242 02e3 	movw	r2, #8419	@ 0x20e3
 800121c:	4293      	cmp	r3, r2
 800121e:	dc59      	bgt.n	80012d4 <calibrate_airspeed_LUT+0xec>
 8001220:	f242 02d9 	movw	r2, #8409	@ 0x20d9
 8001224:	4293      	cmp	r3, r2
 8001226:	d043      	beq.n	80012b0 <calibrate_airspeed_LUT+0xc8>
 8001228:	f242 02d9 	movw	r2, #8409	@ 0x20d9
 800122c:	4293      	cmp	r3, r2
 800122e:	dc51      	bgt.n	80012d4 <calibrate_airspeed_LUT+0xec>
 8001230:	f242 028d 	movw	r2, #8333	@ 0x208d
 8001234:	4293      	cmp	r3, r2
 8001236:	d035      	beq.n	80012a4 <calibrate_airspeed_LUT+0xbc>
 8001238:	f242 028d 	movw	r2, #8333	@ 0x208d
 800123c:	4293      	cmp	r3, r2
 800123e:	dc49      	bgt.n	80012d4 <calibrate_airspeed_LUT+0xec>
 8001240:	f242 0266 	movw	r2, #8294	@ 0x2066
 8001244:	4293      	cmp	r3, r2
 8001246:	d027      	beq.n	8001298 <calibrate_airspeed_LUT+0xb0>
 8001248:	f242 0266 	movw	r2, #8294	@ 0x2066
 800124c:	4293      	cmp	r3, r2
 800124e:	dc41      	bgt.n	80012d4 <calibrate_airspeed_LUT+0xec>
 8001250:	f242 0246 	movw	r2, #8262	@ 0x2046
 8001254:	4293      	cmp	r3, r2
 8001256:	d019      	beq.n	800128c <calibrate_airspeed_LUT+0xa4>
 8001258:	f242 0246 	movw	r2, #8262	@ 0x2046
 800125c:	4293      	cmp	r3, r2
 800125e:	dc39      	bgt.n	80012d4 <calibrate_airspeed_LUT+0xec>
 8001260:	f242 021f 	movw	r2, #8223	@ 0x201f
 8001264:	4293      	cmp	r3, r2
 8001266:	d004      	beq.n	8001272 <calibrate_airspeed_LUT+0x8a>
 8001268:	f242 0227 	movw	r2, #8231	@ 0x2027
 800126c:	4293      	cmp	r3, r2
 800126e:	d007      	beq.n	8001280 <calibrate_airspeed_LUT+0x98>
		break;
	case RAW_PRESSURE_DEC_550RPM:
		mapped_airspeed = WINDTUNNEL_BETZ_550RPM;
		break;
	default:
		break;
 8001270:	e030      	b.n	80012d4 <calibrate_airspeed_LUT+0xec>
		mapped_airspeed = WINDTUNNEL_BETZ_200RPM;
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		break;
 800127e:	e02a      	b.n	80012d6 <calibrate_airspeed_LUT+0xee>
		mapped_airspeed = WINDTUNNEL_BETZ_250RPM;
 8001280:	a319      	add	r3, pc, #100	@ (adr r3, 80012e8 <calibrate_airspeed_LUT+0x100>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	e9c7 2302 	strd	r2, r3, [r7, #8]
		break;
 800128a:	e024      	b.n	80012d6 <calibrate_airspeed_LUT+0xee>
		mapped_airspeed = WINDTUNNEL_BETZ_300RPM;
 800128c:	a318      	add	r3, pc, #96	@ (adr r3, 80012f0 <calibrate_airspeed_LUT+0x108>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	e9c7 2302 	strd	r2, r3, [r7, #8]
		break;
 8001296:	e01e      	b.n	80012d6 <calibrate_airspeed_LUT+0xee>
		mapped_airspeed = WINDTUNNEL_BETZ_350RPM;
 8001298:	a317      	add	r3, pc, #92	@ (adr r3, 80012f8 <calibrate_airspeed_LUT+0x110>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		break;
 80012a2:	e018      	b.n	80012d6 <calibrate_airspeed_LUT+0xee>
		mapped_airspeed = WINDTUNNEL_BETZ_400RPM;
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <calibrate_airspeed_LUT+0x128>)
 80012aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
		break;
 80012ae:	e012      	b.n	80012d6 <calibrate_airspeed_LUT+0xee>
		mapped_airspeed = WINDTUNNEL_BETZ_450RPM;
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <calibrate_airspeed_LUT+0x12c>)
 80012b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		break;
 80012ba:	e00c      	b.n	80012d6 <calibrate_airspeed_LUT+0xee>
		mapped_airspeed = WINDTUNNEL_BETZ_500RPM;
 80012bc:	a310      	add	r3, pc, #64	@ (adr r3, 8001300 <calibrate_airspeed_LUT+0x118>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		break;
 80012c6:	e006      	b.n	80012d6 <calibrate_airspeed_LUT+0xee>
		mapped_airspeed = WINDTUNNEL_BETZ_550RPM;
 80012c8:	a30f      	add	r3, pc, #60	@ (adr r3, 8001308 <calibrate_airspeed_LUT+0x120>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
		break;
 80012d2:	e000      	b.n	80012d6 <calibrate_airspeed_LUT+0xee>
		break;
 80012d4:	bf00      	nop
	}
	return mapped_airspeed;
 80012d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	66666666 	.word	0x66666666
 80012ec:	3ff26666 	.word	0x3ff26666
 80012f0:	cccccccd 	.word	0xcccccccd
 80012f4:	4012cccc 	.word	0x4012cccc
 80012f8:	9999999a 	.word	0x9999999a
 80012fc:	40211999 	.word	0x40211999
 8001300:	cccccccd 	.word	0xcccccccd
 8001304:	40344ccc 	.word	0x40344ccc
 8001308:	cccccccd 	.word	0xcccccccd
 800130c:	4038cccc 	.word	0x4038cccc
 8001310:	40280000 	.word	0x40280000
 8001314:	40304000 	.word	0x40304000

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08e      	sub	sp, #56	@ 0x38
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131e:	f000 fba7 	bl	8001a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001322:	f000 f815 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001326:	f000 f8db 	bl	80014e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800132a:	f000 f881 	bl	8001430 <MX_I2C1_Init>
  MX_CAN_Init();
 800132e:	f000 f84b 	bl	80013c8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001332:	f000 f8ab 	bl	800148c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  struct MS4525DO_t MS4525DO;
  MS4525DO_Initialize(&MS4525DO, &hi2c1);
 8001336:	463b      	mov	r3, r7
 8001338:	4904      	ldr	r1, [pc, #16]	@ (800134c <main+0x34>)
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fbda 	bl	8000af4 <MS4525DO_Initialize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_MS4525DO(&MS4525DO);
 8001340:	463b      	mov	r3, r7
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fc20 	bl	8000b88 <read_MS4525DO>
 8001348:	e7fa      	b.n	8001340 <main+0x28>
 800134a:	bf00      	nop
 800134c:	2000022c 	.word	0x2000022c

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b090      	sub	sp, #64	@ 0x40
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	2228      	movs	r2, #40	@ 0x28
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f003 f925 	bl	80045ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001372:	2302      	movs	r3, #2
 8001374:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001376:	2301      	movs	r3, #1
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800137a:	2310      	movs	r3, #16
 800137c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800137e:	2300      	movs	r3, #0
 8001380:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fd6a 	bl	8002e60 <HAL_RCC_OscConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001392:	f000 f94b 	bl	800162c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001396:	230f      	movs	r3, #15
 8001398:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 ffd8 	bl	8003364 <HAL_RCC_ClockConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013ba:	f000 f937 	bl	800162c <Error_Handler>
  }
}
 80013be:	bf00      	nop
 80013c0:	3740      	adds	r7, #64	@ 0x40
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80013cc:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <MX_CAN_Init+0x60>)
 80013ce:	4a17      	ldr	r2, [pc, #92]	@ (800142c <MX_CAN_Init+0x64>)
 80013d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <MX_CAN_Init+0x60>)
 80013d4:	2210      	movs	r2, #16
 80013d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <MX_CAN_Init+0x60>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013de:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <MX_CAN_Init+0x60>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80013e4:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <MX_CAN_Init+0x60>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001428 <MX_CAN_Init+0x60>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <MX_CAN_Init+0x60>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_CAN_Init+0x60>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <MX_CAN_Init+0x60>)
 80013fe:	2200      	movs	r2, #0
 8001400:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_CAN_Init+0x60>)
 8001404:	2200      	movs	r2, #0
 8001406:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <MX_CAN_Init+0x60>)
 800140a:	2200      	movs	r2, #0
 800140c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_CAN_Init+0x60>)
 8001410:	2200      	movs	r2, #0
 8001412:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_CAN_Init+0x60>)
 8001416:	f000 fbb1 	bl	8001b7c <HAL_CAN_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001420:	f000 f904 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000204 	.word	0x20000204
 800142c:	40006400 	.word	0x40006400

08001430 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001434:	4b12      	ldr	r3, [pc, #72]	@ (8001480 <MX_I2C1_Init+0x50>)
 8001436:	4a13      	ldr	r2, [pc, #76]	@ (8001484 <MX_I2C1_Init+0x54>)
 8001438:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800143a:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <MX_I2C1_Init+0x50>)
 800143c:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <MX_I2C1_Init+0x58>)
 800143e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <MX_I2C1_Init+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <MX_I2C1_Init+0x50>)
 8001448:	2200      	movs	r2, #0
 800144a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <MX_I2C1_Init+0x50>)
 800144e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001452:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001454:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <MX_I2C1_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <MX_I2C1_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <MX_I2C1_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <MX_I2C1_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	@ (8001480 <MX_I2C1_Init+0x50>)
 800146e:	f000 ff01 	bl	8002274 <HAL_I2C_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001478:	f000 f8d8 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000022c 	.word	0x2000022c
 8001484:	40005400 	.word	0x40005400
 8001488:	000186a0 	.word	0x000186a0

0800148c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001490:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <MX_USART1_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 8001498:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800149c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014c4:	f002 f8dc 	bl	8003680 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ce:	f000 f8ad 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000280 	.word	0x20000280
 80014dc:	40013800 	.word	0x40013800

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f4:	4b49      	ldr	r3, [pc, #292]	@ (800161c <MX_GPIO_Init+0x13c>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a48      	ldr	r2, [pc, #288]	@ (800161c <MX_GPIO_Init+0x13c>)
 80014fa:	f043 0310 	orr.w	r3, r3, #16
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b46      	ldr	r3, [pc, #280]	@ (800161c <MX_GPIO_Init+0x13c>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800150c:	4b43      	ldr	r3, [pc, #268]	@ (800161c <MX_GPIO_Init+0x13c>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a42      	ldr	r2, [pc, #264]	@ (800161c <MX_GPIO_Init+0x13c>)
 8001512:	f043 0320 	orr.w	r3, r3, #32
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b40      	ldr	r3, [pc, #256]	@ (800161c <MX_GPIO_Init+0x13c>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0320 	and.w	r3, r3, #32
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b3d      	ldr	r3, [pc, #244]	@ (800161c <MX_GPIO_Init+0x13c>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a3c      	ldr	r2, [pc, #240]	@ (800161c <MX_GPIO_Init+0x13c>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b3a      	ldr	r3, [pc, #232]	@ (800161c <MX_GPIO_Init+0x13c>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	4b37      	ldr	r3, [pc, #220]	@ (800161c <MX_GPIO_Init+0x13c>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a36      	ldr	r2, [pc, #216]	@ (800161c <MX_GPIO_Init+0x13c>)
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b34      	ldr	r3, [pc, #208]	@ (800161c <MX_GPIO_Init+0x13c>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800155a:	4831      	ldr	r0, [pc, #196]	@ (8001620 <MX_GPIO_Init+0x140>)
 800155c:	f000 fe72 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001566:	482f      	ldr	r0, [pc, #188]	@ (8001624 <MX_GPIO_Init+0x144>)
 8001568:	f000 fe6c 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2120      	movs	r1, #32
 8001570:	482d      	ldr	r0, [pc, #180]	@ (8001628 <MX_GPIO_Init+0x148>)
 8001572:	f000 fe67 	bl	8002244 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001576:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800157a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2302      	movs	r3, #2
 8001586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4619      	mov	r1, r3
 800158e:	4824      	ldr	r0, [pc, #144]	@ (8001620 <MX_GPIO_Init+0x140>)
 8001590:	f000 fcd4 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001594:	2302      	movs	r3, #2
 8001596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001598:	2303      	movs	r3, #3
 800159a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4619      	mov	r1, r3
 80015a2:	4820      	ldr	r0, [pc, #128]	@ (8001624 <MX_GPIO_Init+0x144>)
 80015a4:	f000 fcca 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015a8:	2304      	movs	r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	481a      	ldr	r0, [pc, #104]	@ (8001624 <MX_GPIO_Init+0x144>)
 80015bc:	f000 fcbe 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80015c0:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80015c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4619      	mov	r1, r3
 80015d8:	4812      	ldr	r0, [pc, #72]	@ (8001624 <MX_GPIO_Init+0x144>)
 80015da:	f000 fcaf 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB15 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3;
 80015de:	f24c 0309 	movw	r3, #49161	@ 0xc009
 80015e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	4619      	mov	r1, r3
 80015f2:	480d      	ldr	r0, [pc, #52]	@ (8001628 <MX_GPIO_Init+0x148>)
 80015f4:	f000 fca2 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015f8:	2320      	movs	r3, #32
 80015fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2302      	movs	r3, #2
 8001606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	@ (8001628 <MX_GPIO_Init+0x148>)
 8001610:	f000 fc94 	bl	8001f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001614:	bf00      	nop
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000
 8001620:	40011000 	.word	0x40011000
 8001624:	40010800 	.word	0x40010800
 8001628:	40010c00 	.word	0x40010c00

0800162c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001634:	2201      	movs	r2, #1
 8001636:	2140      	movs	r1, #64	@ 0x40
 8001638:	4809      	ldr	r0, [pc, #36]	@ (8001660 <Error_Handler+0x34>)
 800163a:	f000 fe03 	bl	8002244 <HAL_GPIO_WritePin>
	      HAL_Delay(500);
 800163e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001642:	f000 fa77 	bl	8001b34 <HAL_Delay>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2140      	movs	r1, #64	@ 0x40
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <Error_Handler+0x34>)
 800164c:	f000 fdfa 	bl	8002244 <HAL_GPIO_WritePin>
	      HAL_Delay(500);
 8001650:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001654:	f000 fa6e 	bl	8001b34 <HAL_Delay>
	 break;
 8001658:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40010800 	.word	0x40010800

08001664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_MspInit+0x5c>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6193      	str	r3, [r2, #24]
 8001676:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	4a0e      	ldr	r2, [pc, #56]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800168c:	61d3      	str	r3, [r2, #28]
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <HAL_MspInit+0x5c>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_MspInit+0x60>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <HAL_MspInit+0x60>)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010000 	.word	0x40010000

080016c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0310 	add.w	r3, r7, #16
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001754 <HAL_CAN_MspInit+0x8c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d131      	bne.n	800174c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <HAL_CAN_MspInit+0x90>)
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001758 <HAL_CAN_MspInit+0x90>)
 80016ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016f2:	61d3      	str	r3, [r2, #28]
 80016f4:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <HAL_CAN_MspInit+0x90>)
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001700:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_CAN_MspInit+0x90>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a14      	ldr	r2, [pc, #80]	@ (8001758 <HAL_CAN_MspInit+0x90>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_CAN_MspInit+0x90>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001718:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800171c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	4619      	mov	r1, r3
 800172c:	480b      	ldr	r0, [pc, #44]	@ (800175c <HAL_CAN_MspInit+0x94>)
 800172e:	f000 fc05 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4619      	mov	r1, r3
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <HAL_CAN_MspInit+0x94>)
 8001748:	f000 fbf8 	bl	8001f3c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40006400 	.word	0x40006400
 8001758:	40021000 	.word	0x40021000
 800175c:	40010800 	.word	0x40010800

08001760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a15      	ldr	r2, [pc, #84]	@ (80017d0 <HAL_I2C_MspInit+0x70>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d123      	bne.n	80017c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_I2C_MspInit+0x74>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a13      	ldr	r2, [pc, #76]	@ (80017d4 <HAL_I2C_MspInit+0x74>)
 8001786:	f043 0308 	orr.w	r3, r3, #8
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <HAL_I2C_MspInit+0x74>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001798:	23c0      	movs	r3, #192	@ 0xc0
 800179a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179c:	2312      	movs	r3, #18
 800179e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <HAL_I2C_MspInit+0x78>)
 80017ac:	f000 fbc6 	bl	8001f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <HAL_I2C_MspInit+0x74>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	4a07      	ldr	r2, [pc, #28]	@ (80017d4 <HAL_I2C_MspInit+0x74>)
 80017b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017ba:	61d3      	str	r3, [r2, #28]
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <HAL_I2C_MspInit+0x74>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40005400 	.word	0x40005400
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010c00 	.word	0x40010c00

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001868 <HAL_UART_MspInit+0x8c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d131      	bne.n	8001860 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017fc:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <HAL_UART_MspInit+0x90>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a1a      	ldr	r2, [pc, #104]	@ (800186c <HAL_UART_MspInit+0x90>)
 8001802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b18      	ldr	r3, [pc, #96]	@ (800186c <HAL_UART_MspInit+0x90>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	4b15      	ldr	r3, [pc, #84]	@ (800186c <HAL_UART_MspInit+0x90>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a14      	ldr	r2, [pc, #80]	@ (800186c <HAL_UART_MspInit+0x90>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_UART_MspInit+0x90>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800182c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0310 	add.w	r3, r7, #16
 800183e:	4619      	mov	r1, r3
 8001840:	480b      	ldr	r0, [pc, #44]	@ (8001870 <HAL_UART_MspInit+0x94>)
 8001842:	f000 fb7b 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001846:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800184a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <HAL_UART_MspInit+0x94>)
 800185c:	f000 fb6e 	bl	8001f3c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40013800 	.word	0x40013800
 800186c:	40021000 	.word	0x40021000
 8001870:	40010800 	.word	0x40010800

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <NMI_Handler+0x4>

0800187c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <MemManage_Handler+0x4>

0800188c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <UsageFault_Handler+0x4>

0800189c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c4:	f000 f91a 	bl	8001afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return 1;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <_kill>:

int _kill(int pid, int sig)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018e4:	f002 feb6 	bl	8004654 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2216      	movs	r2, #22
 80018ec:	601a      	str	r2, [r3, #0]
  return -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_exit>:

void _exit (int status)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001902:	f04f 31ff 	mov.w	r1, #4294967295
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffe7 	bl	80018da <_kill>
  while (1) {}    /* Make sure we hang here */
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <_exit+0x12>

08001910 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e00a      	b.n	8001938 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001922:	f3af 8000 	nop.w
 8001926:	4601      	mov	r1, r0
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	60ba      	str	r2, [r7, #8]
 800192e:	b2ca      	uxtb	r2, r1
 8001930:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	dbf0      	blt.n	8001922 <_read+0x12>
  }

  return len;
 8001940:	687b      	ldr	r3, [r7, #4]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_close>:
  }
  return len;
}

int _close(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001970:	605a      	str	r2, [r3, #4]
  return 0;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <_isatty>:

int _isatty(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001992:	b480      	push	{r7}
 8001994:	b085      	sub	sp, #20
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
	...

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	@ (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f002 fe3a 	bl	8004654 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20005000 	.word	0x20005000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	200002c8 	.word	0x200002c8
 8001a14:	20000420 	.word	0x20000420

08001a18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a24:	f7ff fff8 	bl	8001a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a28:	480b      	ldr	r0, [pc, #44]	@ (8001a58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a2a:	490c      	ldr	r1, [pc, #48]	@ (8001a5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a09      	ldr	r2, [pc, #36]	@ (8001a64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a40:	4c09      	ldr	r4, [pc, #36]	@ (8001a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f002 fe07 	bl	8004660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a52:	f7ff fc61 	bl	8001318 <main>
  bx lr
 8001a56:	4770      	bx	lr
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a5c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001a60:	08006a00 	.word	0x08006a00
  ldr r2, =_sbss
 8001a64:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001a68:	2000041c 	.word	0x2000041c

08001a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <ADC1_2_IRQHandler>
	...

08001a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a74:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <HAL_Init+0x28>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a07      	ldr	r2, [pc, #28]	@ (8001a98 <HAL_Init+0x28>)
 8001a7a:	f043 0310 	orr.w	r3, r3, #16
 8001a7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a80:	2003      	movs	r0, #3
 8001a82:	f000 fa27 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a86:	200f      	movs	r0, #15
 8001a88:	f000 f808 	bl	8001a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a8c:	f7ff fdea 	bl	8001664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40022000 	.word	0x40022000

08001a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa4:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <HAL_InitTick+0x54>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <HAL_InitTick+0x58>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fa31 	bl	8001f22 <HAL_SYSTICK_Config>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00e      	b.n	8001ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d80a      	bhi.n	8001ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f000 fa07 	bl	8001eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001adc:	4a06      	ldr	r2, [pc, #24]	@ (8001af8 <HAL_InitTick+0x5c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000008 	.word	0x20000008
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_IncTick+0x1c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_IncTick+0x20>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a03      	ldr	r2, [pc, #12]	@ (8001b1c <HAL_IncTick+0x20>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	200002cc 	.word	0x200002cc

08001b20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b02      	ldr	r3, [pc, #8]	@ (8001b30 <HAL_GetTick+0x10>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	200002cc 	.word	0x200002cc

08001b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff fff0 	bl	8001b20 <HAL_GetTick>
 8001b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4c:	d005      	beq.n	8001b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <HAL_Delay+0x44>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5a:	bf00      	nop
 8001b5c:	f7ff ffe0 	bl	8001b20 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d8f7      	bhi.n	8001b5c <HAL_Delay+0x28>
  {
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000008 	.word	0x20000008

08001b7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0ed      	b.n	8001d6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d102      	bne.n	8001ba0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff fd94 	bl	80016c8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb0:	f7ff ffb6 	bl	8001b20 <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bb6:	e012      	b.n	8001bde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bb8:	f7ff ffb2 	bl	8001b20 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b0a      	cmp	r3, #10
 8001bc4:	d90b      	bls.n	8001bde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2205      	movs	r2, #5
 8001bd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0c5      	b.n	8001d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0e5      	beq.n	8001bb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0202 	bic.w	r2, r2, #2
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bfc:	f7ff ff90 	bl	8001b20 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c02:	e012      	b.n	8001c2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c04:	f7ff ff8c 	bl	8001b20 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b0a      	cmp	r3, #10
 8001c10:	d90b      	bls.n	8001c2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2205      	movs	r2, #5
 8001c22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e09f      	b.n	8001d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1e5      	bne.n	8001c04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7e1b      	ldrb	r3, [r3, #24]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d108      	bne.n	8001c52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	e007      	b.n	8001c62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7e5b      	ldrb	r3, [r3, #25]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d108      	bne.n	8001c7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e007      	b.n	8001c8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7e9b      	ldrb	r3, [r3, #26]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d108      	bne.n	8001ca6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0220 	orr.w	r2, r2, #32
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e007      	b.n	8001cb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0220 	bic.w	r2, r2, #32
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7edb      	ldrb	r3, [r3, #27]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d108      	bne.n	8001cd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0210 	bic.w	r2, r2, #16
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	e007      	b.n	8001ce0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0210 	orr.w	r2, r2, #16
 8001cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7f1b      	ldrb	r3, [r3, #28]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d108      	bne.n	8001cfa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0208 	orr.w	r2, r2, #8
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e007      	b.n	8001d0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0208 	bic.w	r2, r2, #8
 8001d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	7f5b      	ldrb	r3, [r3, #29]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d108      	bne.n	8001d24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0204 	orr.w	r2, r2, #4
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e007      	b.n	8001d34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0204 	bic.w	r2, r2, #4
 8001d32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	ea42 0103 	orr.w	r1, r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	1e5a      	subs	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d90:	4013      	ands	r3, r2
 8001d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da6:	4a04      	ldr	r2, [pc, #16]	@ (8001db8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	60d3      	str	r3, [r2, #12]
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc0:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	f003 0307 	and.w	r3, r3, #7
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db0a      	blt.n	8001e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	490c      	ldr	r1, [pc, #48]	@ (8001e24 <__NVIC_SetPriority+0x4c>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e00:	e00a      	b.n	8001e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4908      	ldr	r1, [pc, #32]	@ (8001e28 <__NVIC_SetPriority+0x50>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	440b      	add	r3, r1
 8001e16:	761a      	strb	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	@ 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f1c3 0307 	rsb	r3, r3, #7
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf28      	it	cs
 8001e4a:	2304      	movcs	r3, #4
 8001e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d902      	bls.n	8001e5c <NVIC_EncodePriority+0x30>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3b03      	subs	r3, #3
 8001e5a:	e000      	b.n	8001e5e <NVIC_EncodePriority+0x32>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	401a      	ands	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	4313      	orrs	r3, r2
         );
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	@ 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ea0:	d301      	bcc.n	8001ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00f      	b.n	8001ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <SysTick_Config+0x40>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eae:	210f      	movs	r1, #15
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f7ff ff90 	bl	8001dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb8:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <SysTick_Config+0x40>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ebe:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <SysTick_Config+0x40>)
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	e000e010 	.word	0xe000e010

08001ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff49 	bl	8001d74 <__NVIC_SetPriorityGrouping>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efc:	f7ff ff5e 	bl	8001dbc <__NVIC_GetPriorityGrouping>
 8001f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7ff ff90 	bl	8001e2c <NVIC_EncodePriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff5f 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ffb0 	bl	8001e90 <SysTick_Config>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b08b      	sub	sp, #44	@ 0x2c
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f4e:	e169      	b.n	8002224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f50:	2201      	movs	r2, #1
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	f040 8158 	bne.w	800221e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4a9a      	ldr	r2, [pc, #616]	@ (80021dc <HAL_GPIO_Init+0x2a0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d05e      	beq.n	8002036 <HAL_GPIO_Init+0xfa>
 8001f78:	4a98      	ldr	r2, [pc, #608]	@ (80021dc <HAL_GPIO_Init+0x2a0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d875      	bhi.n	800206a <HAL_GPIO_Init+0x12e>
 8001f7e:	4a98      	ldr	r2, [pc, #608]	@ (80021e0 <HAL_GPIO_Init+0x2a4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d058      	beq.n	8002036 <HAL_GPIO_Init+0xfa>
 8001f84:	4a96      	ldr	r2, [pc, #600]	@ (80021e0 <HAL_GPIO_Init+0x2a4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d86f      	bhi.n	800206a <HAL_GPIO_Init+0x12e>
 8001f8a:	4a96      	ldr	r2, [pc, #600]	@ (80021e4 <HAL_GPIO_Init+0x2a8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d052      	beq.n	8002036 <HAL_GPIO_Init+0xfa>
 8001f90:	4a94      	ldr	r2, [pc, #592]	@ (80021e4 <HAL_GPIO_Init+0x2a8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d869      	bhi.n	800206a <HAL_GPIO_Init+0x12e>
 8001f96:	4a94      	ldr	r2, [pc, #592]	@ (80021e8 <HAL_GPIO_Init+0x2ac>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d04c      	beq.n	8002036 <HAL_GPIO_Init+0xfa>
 8001f9c:	4a92      	ldr	r2, [pc, #584]	@ (80021e8 <HAL_GPIO_Init+0x2ac>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d863      	bhi.n	800206a <HAL_GPIO_Init+0x12e>
 8001fa2:	4a92      	ldr	r2, [pc, #584]	@ (80021ec <HAL_GPIO_Init+0x2b0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d046      	beq.n	8002036 <HAL_GPIO_Init+0xfa>
 8001fa8:	4a90      	ldr	r2, [pc, #576]	@ (80021ec <HAL_GPIO_Init+0x2b0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d85d      	bhi.n	800206a <HAL_GPIO_Init+0x12e>
 8001fae:	2b12      	cmp	r3, #18
 8001fb0:	d82a      	bhi.n	8002008 <HAL_GPIO_Init+0xcc>
 8001fb2:	2b12      	cmp	r3, #18
 8001fb4:	d859      	bhi.n	800206a <HAL_GPIO_Init+0x12e>
 8001fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fbc <HAL_GPIO_Init+0x80>)
 8001fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbc:	08002037 	.word	0x08002037
 8001fc0:	08002011 	.word	0x08002011
 8001fc4:	08002023 	.word	0x08002023
 8001fc8:	08002065 	.word	0x08002065
 8001fcc:	0800206b 	.word	0x0800206b
 8001fd0:	0800206b 	.word	0x0800206b
 8001fd4:	0800206b 	.word	0x0800206b
 8001fd8:	0800206b 	.word	0x0800206b
 8001fdc:	0800206b 	.word	0x0800206b
 8001fe0:	0800206b 	.word	0x0800206b
 8001fe4:	0800206b 	.word	0x0800206b
 8001fe8:	0800206b 	.word	0x0800206b
 8001fec:	0800206b 	.word	0x0800206b
 8001ff0:	0800206b 	.word	0x0800206b
 8001ff4:	0800206b 	.word	0x0800206b
 8001ff8:	0800206b 	.word	0x0800206b
 8001ffc:	0800206b 	.word	0x0800206b
 8002000:	08002019 	.word	0x08002019
 8002004:	0800202d 	.word	0x0800202d
 8002008:	4a79      	ldr	r2, [pc, #484]	@ (80021f0 <HAL_GPIO_Init+0x2b4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800200e:	e02c      	b.n	800206a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	623b      	str	r3, [r7, #32]
          break;
 8002016:	e029      	b.n	800206c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	3304      	adds	r3, #4
 800201e:	623b      	str	r3, [r7, #32]
          break;
 8002020:	e024      	b.n	800206c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	3308      	adds	r3, #8
 8002028:	623b      	str	r3, [r7, #32]
          break;
 800202a:	e01f      	b.n	800206c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	330c      	adds	r3, #12
 8002032:	623b      	str	r3, [r7, #32]
          break;
 8002034:	e01a      	b.n	800206c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800203e:	2304      	movs	r3, #4
 8002040:	623b      	str	r3, [r7, #32]
          break;
 8002042:	e013      	b.n	800206c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d105      	bne.n	8002058 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800204c:	2308      	movs	r3, #8
 800204e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	611a      	str	r2, [r3, #16]
          break;
 8002056:	e009      	b.n	800206c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002058:	2308      	movs	r3, #8
 800205a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	615a      	str	r2, [r3, #20]
          break;
 8002062:	e003      	b.n	800206c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
          break;
 8002068:	e000      	b.n	800206c <HAL_GPIO_Init+0x130>
          break;
 800206a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	2bff      	cmp	r3, #255	@ 0xff
 8002070:	d801      	bhi.n	8002076 <HAL_GPIO_Init+0x13a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	e001      	b.n	800207a <HAL_GPIO_Init+0x13e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3304      	adds	r3, #4
 800207a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2bff      	cmp	r3, #255	@ 0xff
 8002080:	d802      	bhi.n	8002088 <HAL_GPIO_Init+0x14c>
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	e002      	b.n	800208e <HAL_GPIO_Init+0x152>
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	3b08      	subs	r3, #8
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	210f      	movs	r1, #15
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	401a      	ands	r2, r3
 80020a0:	6a39      	ldr	r1, [r7, #32]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	431a      	orrs	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80b1 	beq.w	800221e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020bc:	4b4d      	ldr	r3, [pc, #308]	@ (80021f4 <HAL_GPIO_Init+0x2b8>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a4c      	ldr	r2, [pc, #304]	@ (80021f4 <HAL_GPIO_Init+0x2b8>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b4a      	ldr	r3, [pc, #296]	@ (80021f4 <HAL_GPIO_Init+0x2b8>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020d4:	4a48      	ldr	r2, [pc, #288]	@ (80021f8 <HAL_GPIO_Init+0x2bc>)
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a40      	ldr	r2, [pc, #256]	@ (80021fc <HAL_GPIO_Init+0x2c0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d013      	beq.n	8002128 <HAL_GPIO_Init+0x1ec>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a3f      	ldr	r2, [pc, #252]	@ (8002200 <HAL_GPIO_Init+0x2c4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00d      	beq.n	8002124 <HAL_GPIO_Init+0x1e8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3e      	ldr	r2, [pc, #248]	@ (8002204 <HAL_GPIO_Init+0x2c8>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d007      	beq.n	8002120 <HAL_GPIO_Init+0x1e4>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a3d      	ldr	r2, [pc, #244]	@ (8002208 <HAL_GPIO_Init+0x2cc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d101      	bne.n	800211c <HAL_GPIO_Init+0x1e0>
 8002118:	2303      	movs	r3, #3
 800211a:	e006      	b.n	800212a <HAL_GPIO_Init+0x1ee>
 800211c:	2304      	movs	r3, #4
 800211e:	e004      	b.n	800212a <HAL_GPIO_Init+0x1ee>
 8002120:	2302      	movs	r3, #2
 8002122:	e002      	b.n	800212a <HAL_GPIO_Init+0x1ee>
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <HAL_GPIO_Init+0x1ee>
 8002128:	2300      	movs	r3, #0
 800212a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212c:	f002 0203 	and.w	r2, r2, #3
 8002130:	0092      	lsls	r2, r2, #2
 8002132:	4093      	lsls	r3, r2
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800213a:	492f      	ldr	r1, [pc, #188]	@ (80021f8 <HAL_GPIO_Init+0x2bc>)
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	3302      	adds	r3, #2
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d006      	beq.n	8002162 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002154:	4b2d      	ldr	r3, [pc, #180]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	492c      	ldr	r1, [pc, #176]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	608b      	str	r3, [r1, #8]
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002162:	4b2a      	ldr	r3, [pc, #168]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	43db      	mvns	r3, r3
 800216a:	4928      	ldr	r1, [pc, #160]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 800216c:	4013      	ands	r3, r2
 800216e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800217c:	4b23      	ldr	r3, [pc, #140]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	4922      	ldr	r1, [pc, #136]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	60cb      	str	r3, [r1, #12]
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800218a:	4b20      	ldr	r3, [pc, #128]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	43db      	mvns	r3, r3
 8002192:	491e      	ldr	r1, [pc, #120]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 8002194:	4013      	ands	r3, r2
 8002196:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d006      	beq.n	80021b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021a4:	4b19      	ldr	r3, [pc, #100]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4918      	ldr	r1, [pc, #96]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021b2:	4b16      	ldr	r3, [pc, #88]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	4914      	ldr	r1, [pc, #80]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 80021bc:	4013      	ands	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d021      	beq.n	8002210 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021cc:	4b0f      	ldr	r3, [pc, #60]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	490e      	ldr	r1, [pc, #56]	@ (800220c <HAL_GPIO_Init+0x2d0>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
 80021d8:	e021      	b.n	800221e <HAL_GPIO_Init+0x2e2>
 80021da:	bf00      	nop
 80021dc:	10320000 	.word	0x10320000
 80021e0:	10310000 	.word	0x10310000
 80021e4:	10220000 	.word	0x10220000
 80021e8:	10210000 	.word	0x10210000
 80021ec:	10120000 	.word	0x10120000
 80021f0:	10110000 	.word	0x10110000
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40010000 	.word	0x40010000
 80021fc:	40010800 	.word	0x40010800
 8002200:	40010c00 	.word	0x40010c00
 8002204:	40011000 	.word	0x40011000
 8002208:	40011400 	.word	0x40011400
 800220c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002210:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <HAL_GPIO_Init+0x304>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	43db      	mvns	r3, r3
 8002218:	4909      	ldr	r1, [pc, #36]	@ (8002240 <HAL_GPIO_Init+0x304>)
 800221a:	4013      	ands	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	3301      	adds	r3, #1
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222a:	fa22 f303 	lsr.w	r3, r2, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	f47f ae8e 	bne.w	8001f50 <HAL_GPIO_Init+0x14>
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	372c      	adds	r7, #44	@ 0x2c
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	40010400 	.word	0x40010400

08002244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	807b      	strh	r3, [r7, #2]
 8002250:	4613      	mov	r3, r2
 8002252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002254:	787b      	ldrb	r3, [r7, #1]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002260:	e003      	b.n	800226a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	041a      	lsls	r2, r3, #16
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	611a      	str	r2, [r3, #16]
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e12b      	b.n	80024de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff fa60 	bl	8001760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2224      	movs	r2, #36	@ 0x24
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d8:	f001 f98c 	bl	80035f4 <HAL_RCC_GetPCLK1Freq>
 80022dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a81      	ldr	r2, [pc, #516]	@ (80024e8 <HAL_I2C_Init+0x274>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d807      	bhi.n	80022f8 <HAL_I2C_Init+0x84>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a80      	ldr	r2, [pc, #512]	@ (80024ec <HAL_I2C_Init+0x278>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	bf94      	ite	ls
 80022f0:	2301      	movls	r3, #1
 80022f2:	2300      	movhi	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e006      	b.n	8002306 <HAL_I2C_Init+0x92>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a7d      	ldr	r2, [pc, #500]	@ (80024f0 <HAL_I2C_Init+0x27c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	bf94      	ite	ls
 8002300:	2301      	movls	r3, #1
 8002302:	2300      	movhi	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e0e7      	b.n	80024de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4a78      	ldr	r2, [pc, #480]	@ (80024f4 <HAL_I2C_Init+0x280>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0c9b      	lsrs	r3, r3, #18
 8002318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a6a      	ldr	r2, [pc, #424]	@ (80024e8 <HAL_I2C_Init+0x274>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d802      	bhi.n	8002348 <HAL_I2C_Init+0xd4>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3301      	adds	r3, #1
 8002346:	e009      	b.n	800235c <HAL_I2C_Init+0xe8>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	4a69      	ldr	r2, [pc, #420]	@ (80024f8 <HAL_I2C_Init+0x284>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	099b      	lsrs	r3, r3, #6
 800235a:	3301      	adds	r3, #1
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	430b      	orrs	r3, r1
 8002362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800236e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	495c      	ldr	r1, [pc, #368]	@ (80024e8 <HAL_I2C_Init+0x274>)
 8002378:	428b      	cmp	r3, r1
 800237a:	d819      	bhi.n	80023b0 <HAL_I2C_Init+0x13c>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	1e59      	subs	r1, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fbb1 f3f3 	udiv	r3, r1, r3
 800238a:	1c59      	adds	r1, r3, #1
 800238c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002390:	400b      	ands	r3, r1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_I2C_Init+0x138>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1e59      	subs	r1, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023aa:	e051      	b.n	8002450 <HAL_I2C_Init+0x1dc>
 80023ac:	2304      	movs	r3, #4
 80023ae:	e04f      	b.n	8002450 <HAL_I2C_Init+0x1dc>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d111      	bne.n	80023dc <HAL_I2C_Init+0x168>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e58      	subs	r0, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	440b      	add	r3, r1
 80023c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	bf0c      	ite	eq
 80023d4:	2301      	moveq	r3, #1
 80023d6:	2300      	movne	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	e012      	b.n	8002402 <HAL_I2C_Init+0x18e>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1e58      	subs	r0, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	0099      	lsls	r1, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Init+0x196>
 8002406:	2301      	movs	r3, #1
 8002408:	e022      	b.n	8002450 <HAL_I2C_Init+0x1dc>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10e      	bne.n	8002430 <HAL_I2C_Init+0x1bc>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1e58      	subs	r0, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6859      	ldr	r1, [r3, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	440b      	add	r3, r1
 8002420:	fbb0 f3f3 	udiv	r3, r0, r3
 8002424:	3301      	adds	r3, #1
 8002426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800242e:	e00f      	b.n	8002450 <HAL_I2C_Init+0x1dc>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e58      	subs	r0, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	0099      	lsls	r1, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	fbb0 f3f3 	udiv	r3, r0, r3
 8002446:	3301      	adds	r3, #1
 8002448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	6809      	ldr	r1, [r1, #0]
 8002454:	4313      	orrs	r3, r2
 8002456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800247e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6911      	ldr	r1, [r2, #16]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68d2      	ldr	r2, [r2, #12]
 800248a:	4311      	orrs	r1, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	430b      	orrs	r3, r1
 8002492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2220      	movs	r2, #32
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	000186a0 	.word	0x000186a0
 80024ec:	001e847f 	.word	0x001e847f
 80024f0:	003d08ff 	.word	0x003d08ff
 80024f4:	431bde83 	.word	0x431bde83
 80024f8:	10624dd3 	.word	0x10624dd3

080024fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	@ 0x30
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	461a      	mov	r2, r3
 8002508:	460b      	mov	r3, r1
 800250a:	817b      	strh	r3, [r7, #10]
 800250c:	4613      	mov	r3, r2
 800250e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff fb04 	bl	8001b20 <HAL_GetTick>
 8002518:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b20      	cmp	r3, #32
 8002524:	f040 824b 	bne.w	80029be <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2319      	movs	r3, #25
 800252e:	2201      	movs	r2, #1
 8002530:	497f      	ldr	r1, [pc, #508]	@ (8002730 <HAL_I2C_Master_Receive+0x234>)
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 fb1c 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
 8002540:	e23e      	b.n	80029c0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_I2C_Master_Receive+0x54>
 800254c:	2302      	movs	r3, #2
 800254e:	e237      	b.n	80029c0 <HAL_I2C_Master_Receive+0x4c4>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d007      	beq.n	8002576 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0201 	orr.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002584:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2222      	movs	r2, #34	@ 0x22
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2210      	movs	r2, #16
 8002592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	893a      	ldrh	r2, [r7, #8]
 80025a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a5f      	ldr	r2, [pc, #380]	@ (8002734 <HAL_I2C_Master_Receive+0x238>)
 80025b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025b8:	8979      	ldrh	r1, [r7, #10]
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 fa08 	bl	80029d4 <I2C_MasterRequestRead>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e1f8      	b.n	80029c0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d113      	bne.n	80025fe <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d6:	2300      	movs	r3, #0
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e1cc      	b.n	8002998 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002602:	2b01      	cmp	r3, #1
 8002604:	d11e      	bne.n	8002644 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002614:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002616:	b672      	cpsid	i
}
 8002618:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800263e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002640:	b662      	cpsie	i
}
 8002642:	e035      	b.n	80026b0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002648:	2b02      	cmp	r3, #2
 800264a:	d11e      	bne.n	800268a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800265a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800265c:	b672      	cpsid	i
}
 800265e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002684:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002686:	b662      	cpsie	i
}
 8002688:	e012      	b.n	80026b0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002698:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80026b0:	e172      	b.n	8002998 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	f200 811f 	bhi.w	80028fa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d123      	bne.n	800270c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fb6b 	bl	8002da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e173      	b.n	80029c0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800270a:	e145      	b.n	8002998 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002710:	2b02      	cmp	r3, #2
 8002712:	d152      	bne.n	80027ba <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271a:	2200      	movs	r2, #0
 800271c:	4906      	ldr	r1, [pc, #24]	@ (8002738 <HAL_I2C_Master_Receive+0x23c>)
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 fa26 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e148      	b.n	80029c0 <HAL_I2C_Master_Receive+0x4c4>
 800272e:	bf00      	nop
 8002730:	00100002 	.word	0x00100002
 8002734:	ffff0000 	.word	0xffff0000
 8002738:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800273c:	b672      	cpsid	i
}
 800273e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800274e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002782:	b662      	cpsie	i
}
 8002784:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027b8:	e0ee      	b.n	8002998 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c0:	2200      	movs	r2, #0
 80027c2:	4981      	ldr	r1, [pc, #516]	@ (80029c8 <HAL_I2C_Master_Receive+0x4cc>)
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f9d3 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0f5      	b.n	80029c0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027e4:	b672      	cpsid	i
}
 80027e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800281a:	4b6c      	ldr	r3, [pc, #432]	@ (80029cc <HAL_I2C_Master_Receive+0x4d0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	08db      	lsrs	r3, r3, #3
 8002820:	4a6b      	ldr	r2, [pc, #428]	@ (80029d0 <HAL_I2C_Master_Receive+0x4d4>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0a1a      	lsrs	r2, r3, #8
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	00da      	lsls	r2, r3, #3
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	3b01      	subs	r3, #1
 8002838:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d118      	bne.n	8002872 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f043 0220 	orr.w	r2, r3, #32
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002862:	b662      	cpsie	i
}
 8002864:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0a6      	b.n	80029c0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	2b04      	cmp	r3, #4
 800287e:	d1d9      	bne.n	8002834 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800288e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028c2:	b662      	cpsie	i
}
 80028c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028f8:	e04e      	b.n	8002998 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fa50 	bl	8002da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e058      	b.n	80029c0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b04      	cmp	r3, #4
 800294c:	d124      	bne.n	8002998 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002952:	2b03      	cmp	r3, #3
 8002954:	d107      	bne.n	8002966 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002964:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f ae88 	bne.w	80026b2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e000      	b.n	80029c0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
  }
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3728      	adds	r7, #40	@ 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	00010004 	.word	0x00010004
 80029cc:	20000000 	.word	0x20000000
 80029d0:	14f8b589 	.word	0x14f8b589

080029d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	460b      	mov	r3, r1
 80029e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d006      	beq.n	8002a0e <I2C_MasterRequestRead+0x3a>
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d003      	beq.n	8002a0e <I2C_MasterRequestRead+0x3a>
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a0c:	d108      	bne.n	8002a20 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e00b      	b.n	8002a38 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	2b11      	cmp	r3, #17
 8002a26:	d107      	bne.n	8002a38 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f893 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a5e:	d103      	bne.n	8002a68 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e079      	b.n	8002b60 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a74:	d108      	bne.n	8002a88 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a76:	897b      	ldrh	r3, [r7, #10]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	611a      	str	r2, [r3, #16]
 8002a86:	e05f      	b.n	8002b48 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a88:	897b      	ldrh	r3, [r7, #10]
 8002a8a:	11db      	asrs	r3, r3, #7
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f003 0306 	and.w	r3, r3, #6
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f063 030f 	orn	r3, r3, #15
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4930      	ldr	r1, [pc, #192]	@ (8002b68 <I2C_MasterRequestRead+0x194>)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f8dc 	bl	8002c64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e054      	b.n	8002b60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ab6:	897b      	ldrh	r3, [r7, #10]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4929      	ldr	r1, [pc, #164]	@ (8002b6c <I2C_MasterRequestRead+0x198>)
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f8cc 	bl	8002c64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e044      	b.n	8002b60 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002afa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 f831 	bl	8002b70 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00d      	beq.n	8002b30 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b22:	d103      	bne.n	8002b2c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e017      	b.n	8002b60 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b30:	897b      	ldrh	r3, [r7, #10]
 8002b32:	11db      	asrs	r3, r3, #7
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f003 0306 	and.w	r3, r3, #6
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f063 030e 	orn	r3, r3, #14
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4907      	ldr	r1, [pc, #28]	@ (8002b6c <I2C_MasterRequestRead+0x198>)
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f888 	bl	8002c64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	00010008 	.word	0x00010008
 8002b6c:	00010002 	.word	0x00010002

08002b70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b80:	e048      	b.n	8002c14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d044      	beq.n	8002c14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8a:	f7fe ffc9 	bl	8001b20 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d302      	bcc.n	8002ba0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d139      	bne.n	8002c14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	0c1b      	lsrs	r3, r3, #16
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d10d      	bne.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	e00c      	b.n	8002be0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d116      	bne.n	8002c14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e023      	b.n	8002c5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	0c1b      	lsrs	r3, r3, #16
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d10d      	bne.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	43da      	mvns	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	e00c      	b.n	8002c54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	43da      	mvns	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4013      	ands	r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d093      	beq.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c72:	e071      	b.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c82:	d123      	bne.n	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	f043 0204 	orr.w	r2, r3, #4
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e067      	b.n	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	d041      	beq.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd4:	f7fe ff24 	bl	8001b20 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d302      	bcc.n	8002cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d136      	bne.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d10c      	bne.n	8002d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf14      	ite	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	2300      	moveq	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	e00b      	b.n	8002d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	43da      	mvns	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d016      	beq.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	f043 0220 	orr.w	r2, r3, #32
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e021      	b.n	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	0c1b      	lsrs	r3, r3, #16
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d10c      	bne.n	8002d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	43da      	mvns	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf14      	ite	ne
 8002d74:	2301      	movne	r3, #1
 8002d76:	2300      	moveq	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e00b      	b.n	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	43da      	mvns	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4013      	ands	r3, r2
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf14      	ite	ne
 8002d8e:	2301      	movne	r3, #1
 8002d90:	2300      	moveq	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f47f af6d 	bne.w	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002db0:	e049      	b.n	8002e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d119      	bne.n	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0210 	mvn.w	r2, #16
 8002dc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e030      	b.n	8002e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df4:	f7fe fe94 	bl	8001b20 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d302      	bcc.n	8002e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d11d      	bne.n	8002e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e14:	2b40      	cmp	r3, #64	@ 0x40
 8002e16:	d016      	beq.n	8002e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	f043 0220 	orr.w	r2, r3, #32
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e007      	b.n	8002e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e50:	2b40      	cmp	r3, #64	@ 0x40
 8002e52:	d1ae      	bne.n	8002db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e272      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8087 	beq.w	8002f8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e80:	4b92      	ldr	r3, [pc, #584]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d00c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e8c:	4b8f      	ldr	r3, [pc, #572]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d112      	bne.n	8002ebe <HAL_RCC_OscConfig+0x5e>
 8002e98:	4b8c      	ldr	r3, [pc, #560]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ea4:	d10b      	bne.n	8002ebe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea6:	4b89      	ldr	r3, [pc, #548]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d06c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x12c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d168      	bne.n	8002f8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e24c      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x76>
 8002ec8:	4b80      	ldr	r3, [pc, #512]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a7f      	ldr	r2, [pc, #508]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	e02e      	b.n	8002f34 <HAL_RCC_OscConfig+0xd4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x98>
 8002ede:	4b7b      	ldr	r3, [pc, #492]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7a      	ldr	r2, [pc, #488]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b78      	ldr	r3, [pc, #480]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a77      	ldr	r2, [pc, #476]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e01d      	b.n	8002f34 <HAL_RCC_OscConfig+0xd4>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0xbc>
 8002f02:	4b72      	ldr	r3, [pc, #456]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a71      	ldr	r2, [pc, #452]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b6f      	ldr	r3, [pc, #444]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a6e      	ldr	r2, [pc, #440]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e00b      	b.n	8002f34 <HAL_RCC_OscConfig+0xd4>
 8002f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a6a      	ldr	r2, [pc, #424]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b68      	ldr	r3, [pc, #416]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a67      	ldr	r2, [pc, #412]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d013      	beq.n	8002f64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fdf0 	bl	8001b20 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe fdec 	bl	8001b20 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	@ 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e200      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b5d      	ldr	r3, [pc, #372]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0xe4>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe fddc 	bl	8001b20 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe fdd8 	bl	8001b20 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	@ 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e1ec      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	4b53      	ldr	r3, [pc, #332]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x10c>
 8002f8a:	e000      	b.n	8002f8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d063      	beq.n	8003062 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f9a:	4b4c      	ldr	r3, [pc, #304]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00b      	beq.n	8002fbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fa6:	4b49      	ldr	r3, [pc, #292]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d11c      	bne.n	8002fec <HAL_RCC_OscConfig+0x18c>
 8002fb2:	4b46      	ldr	r3, [pc, #280]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbe:	4b43      	ldr	r3, [pc, #268]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x176>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d001      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e1c0      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4939      	ldr	r1, [pc, #228]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	e03a      	b.n	8003062 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d020      	beq.n	8003036 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff4:	4b36      	ldr	r3, [pc, #216]	@ (80030d0 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fd91 	bl	8001b20 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003002:	f7fe fd8d 	bl	8001b20 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1a1      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003014:	4b2d      	ldr	r3, [pc, #180]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b2a      	ldr	r3, [pc, #168]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4927      	ldr	r1, [pc, #156]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003030:	4313      	orrs	r3, r2
 8003032:	600b      	str	r3, [r1, #0]
 8003034:	e015      	b.n	8003062 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003036:	4b26      	ldr	r3, [pc, #152]	@ (80030d0 <HAL_RCC_OscConfig+0x270>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fd70 	bl	8001b20 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003044:	f7fe fd6c 	bl	8001b20 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e180      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003056:	4b1d      	ldr	r3, [pc, #116]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d03a      	beq.n	80030e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d019      	beq.n	80030aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003076:	4b17      	ldr	r3, [pc, #92]	@ (80030d4 <HAL_RCC_OscConfig+0x274>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307c:	f7fe fd50 	bl	8001b20 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003084:	f7fe fd4c 	bl	8001b20 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e160      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003096:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <HAL_RCC_OscConfig+0x26c>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f000 face 	bl	8003644 <RCC_Delay>
 80030a8:	e01c      	b.n	80030e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030aa:	4b0a      	ldr	r3, [pc, #40]	@ (80030d4 <HAL_RCC_OscConfig+0x274>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b0:	f7fe fd36 	bl	8001b20 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b6:	e00f      	b.n	80030d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b8:	f7fe fd32 	bl	8001b20 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d908      	bls.n	80030d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e146      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	42420000 	.word	0x42420000
 80030d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	4b92      	ldr	r3, [pc, #584]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e9      	bne.n	80030b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80a6 	beq.w	800323e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f6:	4b8b      	ldr	r3, [pc, #556]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10d      	bne.n	800311e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003102:	4b88      	ldr	r3, [pc, #544]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	4a87      	ldr	r2, [pc, #540]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800310c:	61d3      	str	r3, [r2, #28]
 800310e:	4b85      	ldr	r3, [pc, #532]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b82      	ldr	r3, [pc, #520]	@ (8003328 <HAL_RCC_OscConfig+0x4c8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d118      	bne.n	800315c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312a:	4b7f      	ldr	r3, [pc, #508]	@ (8003328 <HAL_RCC_OscConfig+0x4c8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a7e      	ldr	r2, [pc, #504]	@ (8003328 <HAL_RCC_OscConfig+0x4c8>)
 8003130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003136:	f7fe fcf3 	bl	8001b20 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313e:	f7fe fcef 	bl	8001b20 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b64      	cmp	r3, #100	@ 0x64
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e103      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003150:	4b75      	ldr	r3, [pc, #468]	@ (8003328 <HAL_RCC_OscConfig+0x4c8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d106      	bne.n	8003172 <HAL_RCC_OscConfig+0x312>
 8003164:	4b6f      	ldr	r3, [pc, #444]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4a6e      	ldr	r2, [pc, #440]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	e02d      	b.n	80031ce <HAL_RCC_OscConfig+0x36e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0x334>
 800317a:	4b6a      	ldr	r3, [pc, #424]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4a69      	ldr	r2, [pc, #420]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	6213      	str	r3, [r2, #32]
 8003186:	4b67      	ldr	r3, [pc, #412]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	4a66      	ldr	r2, [pc, #408]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	6213      	str	r3, [r2, #32]
 8003192:	e01c      	b.n	80031ce <HAL_RCC_OscConfig+0x36e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b05      	cmp	r3, #5
 800319a:	d10c      	bne.n	80031b6 <HAL_RCC_OscConfig+0x356>
 800319c:	4b61      	ldr	r3, [pc, #388]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4a60      	ldr	r2, [pc, #384]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031a2:	f043 0304 	orr.w	r3, r3, #4
 80031a6:	6213      	str	r3, [r2, #32]
 80031a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4a5d      	ldr	r2, [pc, #372]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	e00b      	b.n	80031ce <HAL_RCC_OscConfig+0x36e>
 80031b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4a5a      	ldr	r2, [pc, #360]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6213      	str	r3, [r2, #32]
 80031c2:	4b58      	ldr	r3, [pc, #352]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a57      	ldr	r2, [pc, #348]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d015      	beq.n	8003202 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d6:	f7fe fca3 	bl	8001b20 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe fc9f 	bl	8001b20 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0b1      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ee      	beq.n	80031de <HAL_RCC_OscConfig+0x37e>
 8003200:	e014      	b.n	800322c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003202:	f7fe fc8d 	bl	8001b20 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fe fc89 	bl	8001b20 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003218:	4293      	cmp	r3, r2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e09b      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003220:	4b40      	ldr	r3, [pc, #256]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ee      	bne.n	800320a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800322c:	7dfb      	ldrb	r3, [r7, #23]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d105      	bne.n	800323e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4b3c      	ldr	r3, [pc, #240]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	4a3b      	ldr	r2, [pc, #236]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800323c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8087 	beq.w	8003356 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003248:	4b36      	ldr	r3, [pc, #216]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b08      	cmp	r3, #8
 8003252:	d061      	beq.n	8003318 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d146      	bne.n	80032ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325c:	4b33      	ldr	r3, [pc, #204]	@ (800332c <HAL_RCC_OscConfig+0x4cc>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fe fc5d 	bl	8001b20 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe fc59 	bl	8001b20 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e06d      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327c:	4b29      	ldr	r3, [pc, #164]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003290:	d108      	bne.n	80032a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003292:	4b24      	ldr	r3, [pc, #144]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4921      	ldr	r1, [pc, #132]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a19      	ldr	r1, [r3, #32]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	430b      	orrs	r3, r1
 80032b6:	491b      	ldr	r1, [pc, #108]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032bc:	4b1b      	ldr	r3, [pc, #108]	@ (800332c <HAL_RCC_OscConfig+0x4cc>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fe fc2d 	bl	8001b20 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe fc29 	bl	8001b20 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e03d      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032dc:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x46a>
 80032e8:	e035      	b.n	8003356 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b10      	ldr	r3, [pc, #64]	@ (800332c <HAL_RCC_OscConfig+0x4cc>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe fc16 	bl	8001b20 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fe fc12 	bl	8001b20 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e026      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330a:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x498>
 8003316:	e01e      	b.n	8003356 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d107      	bne.n	8003330 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e019      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
 8003324:	40021000 	.word	0x40021000
 8003328:	40007000 	.word	0x40007000
 800332c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003330:	4b0b      	ldr	r3, [pc, #44]	@ (8003360 <HAL_RCC_OscConfig+0x500>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	429a      	cmp	r2, r3
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000

08003364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0d0      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003378:	4b6a      	ldr	r3, [pc, #424]	@ (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d910      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b67      	ldr	r3, [pc, #412]	@ (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 0207 	bic.w	r2, r3, #7
 800338e:	4965      	ldr	r1, [pc, #404]	@ (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b63      	ldr	r3, [pc, #396]	@ (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0b8      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c0:	4b59      	ldr	r3, [pc, #356]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4a58      	ldr	r2, [pc, #352]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d8:	4b53      	ldr	r3, [pc, #332]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a52      	ldr	r2, [pc, #328]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80033e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b50      	ldr	r3, [pc, #320]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	494d      	ldr	r1, [pc, #308]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d040      	beq.n	8003484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d115      	bne.n	8003442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07f      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003422:	4b41      	ldr	r3, [pc, #260]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e073      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003432:	4b3d      	ldr	r3, [pc, #244]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e06b      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003442:	4b39      	ldr	r3, [pc, #228]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f023 0203 	bic.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4936      	ldr	r1, [pc, #216]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003454:	f7fe fb64 	bl	8001b20 <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	e00a      	b.n	8003472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345c:	f7fe fb60 	bl	8001b20 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e053      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	4b2d      	ldr	r3, [pc, #180]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 020c 	and.w	r2, r3, #12
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	429a      	cmp	r2, r3
 8003482:	d1eb      	bne.n	800345c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003484:	4b27      	ldr	r3, [pc, #156]	@ (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d210      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b24      	ldr	r3, [pc, #144]	@ (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 0207 	bic.w	r2, r3, #7
 800349a:	4922      	ldr	r1, [pc, #136]	@ (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e032      	b.n	800351a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c0:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4916      	ldr	r1, [pc, #88]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034de:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	490e      	ldr	r1, [pc, #56]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034f2:	f000 f821 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	490a      	ldr	r1, [pc, #40]	@ (800352c <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	4a09      	ldr	r2, [pc, #36]	@ (8003530 <HAL_RCC_ClockConfig+0x1cc>)
 800350c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800350e:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <HAL_RCC_ClockConfig+0x1d0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fac2 	bl	8001a9c <HAL_InitTick>

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40022000 	.word	0x40022000
 8003528:	40021000 	.word	0x40021000
 800352c:	08006658 	.word	0x08006658
 8003530:	20000000 	.word	0x20000000
 8003534:	20000004 	.word	0x20000004

08003538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003552:	4b1e      	ldr	r3, [pc, #120]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b04      	cmp	r3, #4
 8003560:	d002      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x30>
 8003562:	2b08      	cmp	r3, #8
 8003564:	d003      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x36>
 8003566:	e027      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003568:	4b19      	ldr	r3, [pc, #100]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800356a:	613b      	str	r3, [r7, #16]
      break;
 800356c:	e027      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	0c9b      	lsrs	r3, r3, #18
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	4a17      	ldr	r2, [pc, #92]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003578:	5cd3      	ldrb	r3, [r2, r3]
 800357a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d010      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003586:	4b11      	ldr	r3, [pc, #68]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	0c5b      	lsrs	r3, r3, #17
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	4a11      	ldr	r2, [pc, #68]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003592:	5cd3      	ldrb	r3, [r2, r3]
 8003594:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a0d      	ldr	r2, [pc, #52]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800359a:	fb03 f202 	mul.w	r2, r3, r2
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e004      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a0c      	ldr	r2, [pc, #48]	@ (80035dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80035ac:	fb02 f303 	mul.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	613b      	str	r3, [r7, #16]
      break;
 80035b6:	e002      	b.n	80035be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035b8:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ba:	613b      	str	r3, [r7, #16]
      break;
 80035bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035be:	693b      	ldr	r3, [r7, #16]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	007a1200 	.word	0x007a1200
 80035d4:	08006670 	.word	0x08006670
 80035d8:	08006680 	.word	0x08006680
 80035dc:	003d0900 	.word	0x003d0900

080035e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e4:	4b02      	ldr	r3, [pc, #8]	@ (80035f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	20000000 	.word	0x20000000

080035f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035f8:	f7ff fff2 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	4903      	ldr	r1, [pc, #12]	@ (8003618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	08006668 	.word	0x08006668

0800361c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003620:	f7ff ffde 	bl	80035e0 <HAL_RCC_GetHCLKFreq>
 8003624:	4602      	mov	r2, r0
 8003626:	4b05      	ldr	r3, [pc, #20]	@ (800363c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	0adb      	lsrs	r3, r3, #11
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	4903      	ldr	r1, [pc, #12]	@ (8003640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003632:	5ccb      	ldrb	r3, [r1, r3]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000
 8003640:	08006668 	.word	0x08006668

08003644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800364c:	4b0a      	ldr	r3, [pc, #40]	@ (8003678 <RCC_Delay+0x34>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0a      	ldr	r2, [pc, #40]	@ (800367c <RCC_Delay+0x38>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0a5b      	lsrs	r3, r3, #9
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003660:	bf00      	nop
  }
  while (Delay --);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1e5a      	subs	r2, r3, #1
 8003666:	60fa      	str	r2, [r7, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f9      	bne.n	8003660 <RCC_Delay+0x1c>
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	20000000 	.word	0x20000000
 800367c:	10624dd3 	.word	0x10624dd3

08003680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e042      	b.n	8003718 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fe f898 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2224      	movs	r2, #36	@ 0x24
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f971 	bl	80039ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695a      	ldr	r2, [r3, #20]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	@ 0x28
 8003724:	af02      	add	r7, sp, #8
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b20      	cmp	r3, #32
 800373e:	d175      	bne.n	800382c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <HAL_UART_Transmit+0x2c>
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e06e      	b.n	800382e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2221      	movs	r2, #33	@ 0x21
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800375e:	f7fe f9df 	bl	8001b20 <HAL_GetTick>
 8003762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003778:	d108      	bne.n	800378c <HAL_UART_Transmit+0x6c>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	e003      	b.n	8003794 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003790:	2300      	movs	r3, #0
 8003792:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003794:	e02e      	b.n	80037f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2200      	movs	r2, #0
 800379e:	2180      	movs	r1, #128	@ 0x80
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f848 	bl	8003836 <UART_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e03a      	b.n	800382e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10b      	bne.n	80037d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	3302      	adds	r3, #2
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	e007      	b.n	80037e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1cb      	bne.n	8003796 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2200      	movs	r2, #0
 8003806:	2140      	movs	r1, #64	@ 0x40
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f814 	bl	8003836 <UART_WaitOnFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e006      	b.n	800382e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800382c:	2302      	movs	r3, #2
  }
}
 800382e:	4618      	mov	r0, r3
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	4613      	mov	r3, r2
 8003844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003846:	e03b      	b.n	80038c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d037      	beq.n	80038c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003850:	f7fe f966 	bl	8001b20 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <UART_WaitOnFlagUntilTimeout+0x30>
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e03a      	b.n	80038e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d023      	beq.n	80038c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b80      	cmp	r3, #128	@ 0x80
 800387c:	d020      	beq.n	80038c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	d01d      	beq.n	80038c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b08      	cmp	r3, #8
 8003890:	d116      	bne.n	80038c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f81d 	bl	80038e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2208      	movs	r2, #8
 80038b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e00f      	b.n	80038e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4013      	ands	r3, r2
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d0b4      	beq.n	8003848 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b095      	sub	sp, #84	@ 0x54
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003902:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003906:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003910:	643a      	str	r2, [r7, #64]	@ 0x40
 8003912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003916:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800391e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e5      	bne.n	80038f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3314      	adds	r3, #20
 800392a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	61fb      	str	r3, [r7, #28]
   return(result);
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3314      	adds	r3, #20
 8003942:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003944:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003946:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800394a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e5      	bne.n	8003924 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395c:	2b01      	cmp	r3, #1
 800395e:	d119      	bne.n	8003994 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f023 0310 	bic.w	r3, r3, #16
 8003976:	647b      	str	r3, [r7, #68]	@ 0x44
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	330c      	adds	r3, #12
 800397e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003980:	61ba      	str	r2, [r7, #24]
 8003982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003984:	6979      	ldr	r1, [r7, #20]
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	e841 2300 	strex	r3, r2, [r1]
 800398c:	613b      	str	r3, [r7, #16]
   return(result);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e5      	bne.n	8003960 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039a2:	bf00      	nop
 80039a4:	3754      	adds	r7, #84	@ 0x54
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr

080039ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80039e6:	f023 030c 	bic.w	r3, r3, #12
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6812      	ldr	r2, [r2, #0]
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	430b      	orrs	r3, r1
 80039f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac0 <UART_SetConfig+0x114>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d103      	bne.n	8003a1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a14:	f7ff fe02 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	e002      	b.n	8003a22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7ff fdea 	bl	80035f4 <HAL_RCC_GetPCLK1Freq>
 8003a20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009a      	lsls	r2, r3, #2
 8003a2c:	441a      	add	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	4a22      	ldr	r2, [pc, #136]	@ (8003ac4 <UART_SetConfig+0x118>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	0119      	lsls	r1, r3, #4
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009a      	lsls	r2, r3, #2
 8003a4c:	441a      	add	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac4 <UART_SetConfig+0x118>)
 8003a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	2064      	movs	r0, #100	@ 0x64
 8003a62:	fb00 f303 	mul.w	r3, r0, r3
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	3332      	adds	r3, #50	@ 0x32
 8003a6c:	4a15      	ldr	r2, [pc, #84]	@ (8003ac4 <UART_SetConfig+0x118>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a78:	4419      	add	r1, r3
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009a      	lsls	r2, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <UART_SetConfig+0x118>)
 8003a92:	fba3 0302 	umull	r0, r3, r3, r2
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2064      	movs	r0, #100	@ 0x64
 8003a9a:	fb00 f303 	mul.w	r3, r0, r3
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	3332      	adds	r3, #50	@ 0x32
 8003aa4:	4a07      	ldr	r2, [pc, #28]	@ (8003ac4 <UART_SetConfig+0x118>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	f003 020f 	and.w	r2, r3, #15
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	440a      	add	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40013800 	.word	0x40013800
 8003ac4:	51eb851f 	.word	0x51eb851f

08003ac8 <__cvt>:
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ace:	461d      	mov	r5, r3
 8003ad0:	bfbb      	ittet	lt
 8003ad2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003ad6:	461d      	movlt	r5, r3
 8003ad8:	2300      	movge	r3, #0
 8003ada:	232d      	movlt	r3, #45	@ 0x2d
 8003adc:	b088      	sub	sp, #32
 8003ade:	4614      	mov	r4, r2
 8003ae0:	bfb8      	it	lt
 8003ae2:	4614      	movlt	r4, r2
 8003ae4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003ae6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003ae8:	7013      	strb	r3, [r2, #0]
 8003aea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003aec:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003af0:	f023 0820 	bic.w	r8, r3, #32
 8003af4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003af8:	d005      	beq.n	8003b06 <__cvt+0x3e>
 8003afa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003afe:	d100      	bne.n	8003b02 <__cvt+0x3a>
 8003b00:	3601      	adds	r6, #1
 8003b02:	2302      	movs	r3, #2
 8003b04:	e000      	b.n	8003b08 <__cvt+0x40>
 8003b06:	2303      	movs	r3, #3
 8003b08:	aa07      	add	r2, sp, #28
 8003b0a:	9204      	str	r2, [sp, #16]
 8003b0c:	aa06      	add	r2, sp, #24
 8003b0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003b12:	e9cd 3600 	strd	r3, r6, [sp]
 8003b16:	4622      	mov	r2, r4
 8003b18:	462b      	mov	r3, r5
 8003b1a:	f000 fe61 	bl	80047e0 <_dtoa_r>
 8003b1e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003b22:	4607      	mov	r7, r0
 8003b24:	d119      	bne.n	8003b5a <__cvt+0x92>
 8003b26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003b28:	07db      	lsls	r3, r3, #31
 8003b2a:	d50e      	bpl.n	8003b4a <__cvt+0x82>
 8003b2c:	eb00 0906 	add.w	r9, r0, r6
 8003b30:	2200      	movs	r2, #0
 8003b32:	2300      	movs	r3, #0
 8003b34:	4620      	mov	r0, r4
 8003b36:	4629      	mov	r1, r5
 8003b38:	f7fc ff36 	bl	80009a8 <__aeabi_dcmpeq>
 8003b3c:	b108      	cbz	r0, 8003b42 <__cvt+0x7a>
 8003b3e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003b42:	2230      	movs	r2, #48	@ 0x30
 8003b44:	9b07      	ldr	r3, [sp, #28]
 8003b46:	454b      	cmp	r3, r9
 8003b48:	d31e      	bcc.n	8003b88 <__cvt+0xc0>
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	9b07      	ldr	r3, [sp, #28]
 8003b4e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003b50:	1bdb      	subs	r3, r3, r7
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	b008      	add	sp, #32
 8003b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b5a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b5e:	eb00 0906 	add.w	r9, r0, r6
 8003b62:	d1e5      	bne.n	8003b30 <__cvt+0x68>
 8003b64:	7803      	ldrb	r3, [r0, #0]
 8003b66:	2b30      	cmp	r3, #48	@ 0x30
 8003b68:	d10a      	bne.n	8003b80 <__cvt+0xb8>
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	4620      	mov	r0, r4
 8003b70:	4629      	mov	r1, r5
 8003b72:	f7fc ff19 	bl	80009a8 <__aeabi_dcmpeq>
 8003b76:	b918      	cbnz	r0, 8003b80 <__cvt+0xb8>
 8003b78:	f1c6 0601 	rsb	r6, r6, #1
 8003b7c:	f8ca 6000 	str.w	r6, [sl]
 8003b80:	f8da 3000 	ldr.w	r3, [sl]
 8003b84:	4499      	add	r9, r3
 8003b86:	e7d3      	b.n	8003b30 <__cvt+0x68>
 8003b88:	1c59      	adds	r1, r3, #1
 8003b8a:	9107      	str	r1, [sp, #28]
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	e7d9      	b.n	8003b44 <__cvt+0x7c>

08003b90 <__exponent>:
 8003b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b92:	2900      	cmp	r1, #0
 8003b94:	bfb6      	itet	lt
 8003b96:	232d      	movlt	r3, #45	@ 0x2d
 8003b98:	232b      	movge	r3, #43	@ 0x2b
 8003b9a:	4249      	neglt	r1, r1
 8003b9c:	2909      	cmp	r1, #9
 8003b9e:	7002      	strb	r2, [r0, #0]
 8003ba0:	7043      	strb	r3, [r0, #1]
 8003ba2:	dd29      	ble.n	8003bf8 <__exponent+0x68>
 8003ba4:	f10d 0307 	add.w	r3, sp, #7
 8003ba8:	461d      	mov	r5, r3
 8003baa:	270a      	movs	r7, #10
 8003bac:	fbb1 f6f7 	udiv	r6, r1, r7
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	fb07 1416 	mls	r4, r7, r6, r1
 8003bb6:	3430      	adds	r4, #48	@ 0x30
 8003bb8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	2c63      	cmp	r4, #99	@ 0x63
 8003bc0:	4631      	mov	r1, r6
 8003bc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003bc6:	dcf1      	bgt.n	8003bac <__exponent+0x1c>
 8003bc8:	3130      	adds	r1, #48	@ 0x30
 8003bca:	1e94      	subs	r4, r2, #2
 8003bcc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003bd0:	4623      	mov	r3, r4
 8003bd2:	1c41      	adds	r1, r0, #1
 8003bd4:	42ab      	cmp	r3, r5
 8003bd6:	d30a      	bcc.n	8003bee <__exponent+0x5e>
 8003bd8:	f10d 0309 	add.w	r3, sp, #9
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	42ac      	cmp	r4, r5
 8003be0:	bf88      	it	hi
 8003be2:	2300      	movhi	r3, #0
 8003be4:	3302      	adds	r3, #2
 8003be6:	4403      	add	r3, r0
 8003be8:	1a18      	subs	r0, r3, r0
 8003bea:	b003      	add	sp, #12
 8003bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bee:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003bf2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003bf6:	e7ed      	b.n	8003bd4 <__exponent+0x44>
 8003bf8:	2330      	movs	r3, #48	@ 0x30
 8003bfa:	3130      	adds	r1, #48	@ 0x30
 8003bfc:	7083      	strb	r3, [r0, #2]
 8003bfe:	70c1      	strb	r1, [r0, #3]
 8003c00:	1d03      	adds	r3, r0, #4
 8003c02:	e7f1      	b.n	8003be8 <__exponent+0x58>

08003c04 <_printf_float>:
 8003c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c08:	b091      	sub	sp, #68	@ 0x44
 8003c0a:	460c      	mov	r4, r1
 8003c0c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003c10:	4616      	mov	r6, r2
 8003c12:	461f      	mov	r7, r3
 8003c14:	4605      	mov	r5, r0
 8003c16:	f000 fcd3 	bl	80045c0 <_localeconv_r>
 8003c1a:	6803      	ldr	r3, [r0, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	9308      	str	r3, [sp, #32]
 8003c20:	f7fc fa96 	bl	8000150 <strlen>
 8003c24:	2300      	movs	r3, #0
 8003c26:	930e      	str	r3, [sp, #56]	@ 0x38
 8003c28:	f8d8 3000 	ldr.w	r3, [r8]
 8003c2c:	9009      	str	r0, [sp, #36]	@ 0x24
 8003c2e:	3307      	adds	r3, #7
 8003c30:	f023 0307 	bic.w	r3, r3, #7
 8003c34:	f103 0208 	add.w	r2, r3, #8
 8003c38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003c3c:	f8d4 b000 	ldr.w	fp, [r4]
 8003c40:	f8c8 2000 	str.w	r2, [r8]
 8003c44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003c4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c4e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003c52:	f04f 32ff 	mov.w	r2, #4294967295
 8003c56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003c5e:	4b9c      	ldr	r3, [pc, #624]	@ (8003ed0 <_printf_float+0x2cc>)
 8003c60:	f7fc fed4 	bl	8000a0c <__aeabi_dcmpun>
 8003c64:	bb70      	cbnz	r0, 8003cc4 <_printf_float+0xc0>
 8003c66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6e:	4b98      	ldr	r3, [pc, #608]	@ (8003ed0 <_printf_float+0x2cc>)
 8003c70:	f7fc feae 	bl	80009d0 <__aeabi_dcmple>
 8003c74:	bb30      	cbnz	r0, 8003cc4 <_printf_float+0xc0>
 8003c76:	2200      	movs	r2, #0
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4640      	mov	r0, r8
 8003c7c:	4649      	mov	r1, r9
 8003c7e:	f7fc fe9d 	bl	80009bc <__aeabi_dcmplt>
 8003c82:	b110      	cbz	r0, 8003c8a <_printf_float+0x86>
 8003c84:	232d      	movs	r3, #45	@ 0x2d
 8003c86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c8a:	4a92      	ldr	r2, [pc, #584]	@ (8003ed4 <_printf_float+0x2d0>)
 8003c8c:	4b92      	ldr	r3, [pc, #584]	@ (8003ed8 <_printf_float+0x2d4>)
 8003c8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003c92:	bf94      	ite	ls
 8003c94:	4690      	movls	r8, r2
 8003c96:	4698      	movhi	r8, r3
 8003c98:	2303      	movs	r3, #3
 8003c9a:	f04f 0900 	mov.w	r9, #0
 8003c9e:	6123      	str	r3, [r4, #16]
 8003ca0:	f02b 0304 	bic.w	r3, fp, #4
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	4633      	mov	r3, r6
 8003ca8:	4621      	mov	r1, r4
 8003caa:	4628      	mov	r0, r5
 8003cac:	9700      	str	r7, [sp, #0]
 8003cae:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003cb0:	f000 f9d4 	bl	800405c <_printf_common>
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	f040 8090 	bne.w	8003dda <_printf_float+0x1d6>
 8003cba:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbe:	b011      	add	sp, #68	@ 0x44
 8003cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	4640      	mov	r0, r8
 8003cca:	4649      	mov	r1, r9
 8003ccc:	f7fc fe9e 	bl	8000a0c <__aeabi_dcmpun>
 8003cd0:	b148      	cbz	r0, 8003ce6 <_printf_float+0xe2>
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bfb8      	it	lt
 8003cd8:	232d      	movlt	r3, #45	@ 0x2d
 8003cda:	4a80      	ldr	r2, [pc, #512]	@ (8003edc <_printf_float+0x2d8>)
 8003cdc:	bfb8      	it	lt
 8003cde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ee0 <_printf_float+0x2dc>)
 8003ce4:	e7d3      	b.n	8003c8e <_printf_float+0x8a>
 8003ce6:	6863      	ldr	r3, [r4, #4]
 8003ce8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	d13f      	bne.n	8003d70 <_printf_float+0x16c>
 8003cf0:	2306      	movs	r3, #6
 8003cf2:	6063      	str	r3, [r4, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003cfa:	6023      	str	r3, [r4, #0]
 8003cfc:	9206      	str	r2, [sp, #24]
 8003cfe:	aa0e      	add	r2, sp, #56	@ 0x38
 8003d00:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003d04:	aa0d      	add	r2, sp, #52	@ 0x34
 8003d06:	9203      	str	r2, [sp, #12]
 8003d08:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003d0c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d10:	6863      	ldr	r3, [r4, #4]
 8003d12:	4642      	mov	r2, r8
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	4628      	mov	r0, r5
 8003d18:	464b      	mov	r3, r9
 8003d1a:	910a      	str	r1, [sp, #40]	@ 0x28
 8003d1c:	f7ff fed4 	bl	8003ac8 <__cvt>
 8003d20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003d22:	4680      	mov	r8, r0
 8003d24:	2947      	cmp	r1, #71	@ 0x47
 8003d26:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003d28:	d128      	bne.n	8003d7c <_printf_float+0x178>
 8003d2a:	1cc8      	adds	r0, r1, #3
 8003d2c:	db02      	blt.n	8003d34 <_printf_float+0x130>
 8003d2e:	6863      	ldr	r3, [r4, #4]
 8003d30:	4299      	cmp	r1, r3
 8003d32:	dd40      	ble.n	8003db6 <_printf_float+0x1b2>
 8003d34:	f1aa 0a02 	sub.w	sl, sl, #2
 8003d38:	fa5f fa8a 	uxtb.w	sl, sl
 8003d3c:	4652      	mov	r2, sl
 8003d3e:	3901      	subs	r1, #1
 8003d40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003d44:	910d      	str	r1, [sp, #52]	@ 0x34
 8003d46:	f7ff ff23 	bl	8003b90 <__exponent>
 8003d4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003d4c:	4681      	mov	r9, r0
 8003d4e:	1813      	adds	r3, r2, r0
 8003d50:	2a01      	cmp	r2, #1
 8003d52:	6123      	str	r3, [r4, #16]
 8003d54:	dc02      	bgt.n	8003d5c <_printf_float+0x158>
 8003d56:	6822      	ldr	r2, [r4, #0]
 8003d58:	07d2      	lsls	r2, r2, #31
 8003d5a:	d501      	bpl.n	8003d60 <_printf_float+0x15c>
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	6123      	str	r3, [r4, #16]
 8003d60:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d09e      	beq.n	8003ca6 <_printf_float+0xa2>
 8003d68:	232d      	movs	r3, #45	@ 0x2d
 8003d6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d6e:	e79a      	b.n	8003ca6 <_printf_float+0xa2>
 8003d70:	2947      	cmp	r1, #71	@ 0x47
 8003d72:	d1bf      	bne.n	8003cf4 <_printf_float+0xf0>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1bd      	bne.n	8003cf4 <_printf_float+0xf0>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e7ba      	b.n	8003cf2 <_printf_float+0xee>
 8003d7c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d80:	d9dc      	bls.n	8003d3c <_printf_float+0x138>
 8003d82:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003d86:	d118      	bne.n	8003dba <_printf_float+0x1b6>
 8003d88:	2900      	cmp	r1, #0
 8003d8a:	6863      	ldr	r3, [r4, #4]
 8003d8c:	dd0b      	ble.n	8003da6 <_printf_float+0x1a2>
 8003d8e:	6121      	str	r1, [r4, #16]
 8003d90:	b913      	cbnz	r3, 8003d98 <_printf_float+0x194>
 8003d92:	6822      	ldr	r2, [r4, #0]
 8003d94:	07d0      	lsls	r0, r2, #31
 8003d96:	d502      	bpl.n	8003d9e <_printf_float+0x19a>
 8003d98:	3301      	adds	r3, #1
 8003d9a:	440b      	add	r3, r1
 8003d9c:	6123      	str	r3, [r4, #16]
 8003d9e:	f04f 0900 	mov.w	r9, #0
 8003da2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003da4:	e7dc      	b.n	8003d60 <_printf_float+0x15c>
 8003da6:	b913      	cbnz	r3, 8003dae <_printf_float+0x1aa>
 8003da8:	6822      	ldr	r2, [r4, #0]
 8003daa:	07d2      	lsls	r2, r2, #31
 8003dac:	d501      	bpl.n	8003db2 <_printf_float+0x1ae>
 8003dae:	3302      	adds	r3, #2
 8003db0:	e7f4      	b.n	8003d9c <_printf_float+0x198>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e7f2      	b.n	8003d9c <_printf_float+0x198>
 8003db6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003dba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003dbc:	4299      	cmp	r1, r3
 8003dbe:	db05      	blt.n	8003dcc <_printf_float+0x1c8>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	6121      	str	r1, [r4, #16]
 8003dc4:	07d8      	lsls	r0, r3, #31
 8003dc6:	d5ea      	bpl.n	8003d9e <_printf_float+0x19a>
 8003dc8:	1c4b      	adds	r3, r1, #1
 8003dca:	e7e7      	b.n	8003d9c <_printf_float+0x198>
 8003dcc:	2900      	cmp	r1, #0
 8003dce:	bfcc      	ite	gt
 8003dd0:	2201      	movgt	r2, #1
 8003dd2:	f1c1 0202 	rsble	r2, r1, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	e7e0      	b.n	8003d9c <_printf_float+0x198>
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	055a      	lsls	r2, r3, #21
 8003dde:	d407      	bmi.n	8003df0 <_printf_float+0x1ec>
 8003de0:	6923      	ldr	r3, [r4, #16]
 8003de2:	4642      	mov	r2, r8
 8003de4:	4631      	mov	r1, r6
 8003de6:	4628      	mov	r0, r5
 8003de8:	47b8      	blx	r7
 8003dea:	3001      	adds	r0, #1
 8003dec:	d12b      	bne.n	8003e46 <_printf_float+0x242>
 8003dee:	e764      	b.n	8003cba <_printf_float+0xb6>
 8003df0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003df4:	f240 80dc 	bls.w	8003fb0 <_printf_float+0x3ac>
 8003df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f7fc fdd2 	bl	80009a8 <__aeabi_dcmpeq>
 8003e04:	2800      	cmp	r0, #0
 8003e06:	d033      	beq.n	8003e70 <_printf_float+0x26c>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	4a35      	ldr	r2, [pc, #212]	@ (8003ee4 <_printf_float+0x2e0>)
 8003e10:	47b8      	blx	r7
 8003e12:	3001      	adds	r0, #1
 8003e14:	f43f af51 	beq.w	8003cba <_printf_float+0xb6>
 8003e18:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003e1c:	4543      	cmp	r3, r8
 8003e1e:	db02      	blt.n	8003e26 <_printf_float+0x222>
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	07d8      	lsls	r0, r3, #31
 8003e24:	d50f      	bpl.n	8003e46 <_printf_float+0x242>
 8003e26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	47b8      	blx	r7
 8003e30:	3001      	adds	r0, #1
 8003e32:	f43f af42 	beq.w	8003cba <_printf_float+0xb6>
 8003e36:	f04f 0900 	mov.w	r9, #0
 8003e3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003e3e:	f104 0a1a 	add.w	sl, r4, #26
 8003e42:	45c8      	cmp	r8, r9
 8003e44:	dc09      	bgt.n	8003e5a <_printf_float+0x256>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	079b      	lsls	r3, r3, #30
 8003e4a:	f100 8102 	bmi.w	8004052 <_printf_float+0x44e>
 8003e4e:	68e0      	ldr	r0, [r4, #12]
 8003e50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003e52:	4298      	cmp	r0, r3
 8003e54:	bfb8      	it	lt
 8003e56:	4618      	movlt	r0, r3
 8003e58:	e731      	b.n	8003cbe <_printf_float+0xba>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4652      	mov	r2, sl
 8003e5e:	4631      	mov	r1, r6
 8003e60:	4628      	mov	r0, r5
 8003e62:	47b8      	blx	r7
 8003e64:	3001      	adds	r0, #1
 8003e66:	f43f af28 	beq.w	8003cba <_printf_float+0xb6>
 8003e6a:	f109 0901 	add.w	r9, r9, #1
 8003e6e:	e7e8      	b.n	8003e42 <_printf_float+0x23e>
 8003e70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	dc38      	bgt.n	8003ee8 <_printf_float+0x2e4>
 8003e76:	2301      	movs	r3, #1
 8003e78:	4631      	mov	r1, r6
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	4a19      	ldr	r2, [pc, #100]	@ (8003ee4 <_printf_float+0x2e0>)
 8003e7e:	47b8      	blx	r7
 8003e80:	3001      	adds	r0, #1
 8003e82:	f43f af1a 	beq.w	8003cba <_printf_float+0xb6>
 8003e86:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003e8a:	ea59 0303 	orrs.w	r3, r9, r3
 8003e8e:	d102      	bne.n	8003e96 <_printf_float+0x292>
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	07d9      	lsls	r1, r3, #31
 8003e94:	d5d7      	bpl.n	8003e46 <_printf_float+0x242>
 8003e96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	47b8      	blx	r7
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	f43f af0a 	beq.w	8003cba <_printf_float+0xb6>
 8003ea6:	f04f 0a00 	mov.w	sl, #0
 8003eaa:	f104 0b1a 	add.w	fp, r4, #26
 8003eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003eb0:	425b      	negs	r3, r3
 8003eb2:	4553      	cmp	r3, sl
 8003eb4:	dc01      	bgt.n	8003eba <_printf_float+0x2b6>
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	e793      	b.n	8003de2 <_printf_float+0x1de>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	465a      	mov	r2, fp
 8003ebe:	4631      	mov	r1, r6
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	47b8      	blx	r7
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	f43f aef8 	beq.w	8003cba <_printf_float+0xb6>
 8003eca:	f10a 0a01 	add.w	sl, sl, #1
 8003ece:	e7ee      	b.n	8003eae <_printf_float+0x2aa>
 8003ed0:	7fefffff 	.word	0x7fefffff
 8003ed4:	08006682 	.word	0x08006682
 8003ed8:	08006686 	.word	0x08006686
 8003edc:	0800668a 	.word	0x0800668a
 8003ee0:	0800668e 	.word	0x0800668e
 8003ee4:	08006692 	.word	0x08006692
 8003ee8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003eea:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003eee:	4553      	cmp	r3, sl
 8003ef0:	bfa8      	it	ge
 8003ef2:	4653      	movge	r3, sl
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	4699      	mov	r9, r3
 8003ef8:	dc36      	bgt.n	8003f68 <_printf_float+0x364>
 8003efa:	f04f 0b00 	mov.w	fp, #0
 8003efe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f02:	f104 021a 	add.w	r2, r4, #26
 8003f06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f08:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f0a:	eba3 0309 	sub.w	r3, r3, r9
 8003f0e:	455b      	cmp	r3, fp
 8003f10:	dc31      	bgt.n	8003f76 <_printf_float+0x372>
 8003f12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f14:	459a      	cmp	sl, r3
 8003f16:	dc3a      	bgt.n	8003f8e <_printf_float+0x38a>
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	07da      	lsls	r2, r3, #31
 8003f1c:	d437      	bmi.n	8003f8e <_printf_float+0x38a>
 8003f1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f20:	ebaa 0903 	sub.w	r9, sl, r3
 8003f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f26:	ebaa 0303 	sub.w	r3, sl, r3
 8003f2a:	4599      	cmp	r9, r3
 8003f2c:	bfa8      	it	ge
 8003f2e:	4699      	movge	r9, r3
 8003f30:	f1b9 0f00 	cmp.w	r9, #0
 8003f34:	dc33      	bgt.n	8003f9e <_printf_float+0x39a>
 8003f36:	f04f 0800 	mov.w	r8, #0
 8003f3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f3e:	f104 0b1a 	add.w	fp, r4, #26
 8003f42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003f44:	ebaa 0303 	sub.w	r3, sl, r3
 8003f48:	eba3 0309 	sub.w	r3, r3, r9
 8003f4c:	4543      	cmp	r3, r8
 8003f4e:	f77f af7a 	ble.w	8003e46 <_printf_float+0x242>
 8003f52:	2301      	movs	r3, #1
 8003f54:	465a      	mov	r2, fp
 8003f56:	4631      	mov	r1, r6
 8003f58:	4628      	mov	r0, r5
 8003f5a:	47b8      	blx	r7
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	f43f aeac 	beq.w	8003cba <_printf_float+0xb6>
 8003f62:	f108 0801 	add.w	r8, r8, #1
 8003f66:	e7ec      	b.n	8003f42 <_printf_float+0x33e>
 8003f68:	4642      	mov	r2, r8
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b8      	blx	r7
 8003f70:	3001      	adds	r0, #1
 8003f72:	d1c2      	bne.n	8003efa <_printf_float+0x2f6>
 8003f74:	e6a1      	b.n	8003cba <_printf_float+0xb6>
 8003f76:	2301      	movs	r3, #1
 8003f78:	4631      	mov	r1, r6
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	920a      	str	r2, [sp, #40]	@ 0x28
 8003f7e:	47b8      	blx	r7
 8003f80:	3001      	adds	r0, #1
 8003f82:	f43f ae9a 	beq.w	8003cba <_printf_float+0xb6>
 8003f86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f88:	f10b 0b01 	add.w	fp, fp, #1
 8003f8c:	e7bb      	b.n	8003f06 <_printf_float+0x302>
 8003f8e:	4631      	mov	r1, r6
 8003f90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f94:	4628      	mov	r0, r5
 8003f96:	47b8      	blx	r7
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d1c0      	bne.n	8003f1e <_printf_float+0x31a>
 8003f9c:	e68d      	b.n	8003cba <_printf_float+0xb6>
 8003f9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003fa0:	464b      	mov	r3, r9
 8003fa2:	4631      	mov	r1, r6
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	4442      	add	r2, r8
 8003fa8:	47b8      	blx	r7
 8003faa:	3001      	adds	r0, #1
 8003fac:	d1c3      	bne.n	8003f36 <_printf_float+0x332>
 8003fae:	e684      	b.n	8003cba <_printf_float+0xb6>
 8003fb0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003fb4:	f1ba 0f01 	cmp.w	sl, #1
 8003fb8:	dc01      	bgt.n	8003fbe <_printf_float+0x3ba>
 8003fba:	07db      	lsls	r3, r3, #31
 8003fbc:	d536      	bpl.n	800402c <_printf_float+0x428>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4642      	mov	r2, r8
 8003fc2:	4631      	mov	r1, r6
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	47b8      	blx	r7
 8003fc8:	3001      	adds	r0, #1
 8003fca:	f43f ae76 	beq.w	8003cba <_printf_float+0xb6>
 8003fce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fd2:	4631      	mov	r1, r6
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	47b8      	blx	r7
 8003fd8:	3001      	adds	r0, #1
 8003fda:	f43f ae6e 	beq.w	8003cba <_printf_float+0xb6>
 8003fde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003fea:	f7fc fcdd 	bl	80009a8 <__aeabi_dcmpeq>
 8003fee:	b9c0      	cbnz	r0, 8004022 <_printf_float+0x41e>
 8003ff0:	4653      	mov	r3, sl
 8003ff2:	f108 0201 	add.w	r2, r8, #1
 8003ff6:	4631      	mov	r1, r6
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	47b8      	blx	r7
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d10c      	bne.n	800401a <_printf_float+0x416>
 8004000:	e65b      	b.n	8003cba <_printf_float+0xb6>
 8004002:	2301      	movs	r3, #1
 8004004:	465a      	mov	r2, fp
 8004006:	4631      	mov	r1, r6
 8004008:	4628      	mov	r0, r5
 800400a:	47b8      	blx	r7
 800400c:	3001      	adds	r0, #1
 800400e:	f43f ae54 	beq.w	8003cba <_printf_float+0xb6>
 8004012:	f108 0801 	add.w	r8, r8, #1
 8004016:	45d0      	cmp	r8, sl
 8004018:	dbf3      	blt.n	8004002 <_printf_float+0x3fe>
 800401a:	464b      	mov	r3, r9
 800401c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004020:	e6e0      	b.n	8003de4 <_printf_float+0x1e0>
 8004022:	f04f 0800 	mov.w	r8, #0
 8004026:	f104 0b1a 	add.w	fp, r4, #26
 800402a:	e7f4      	b.n	8004016 <_printf_float+0x412>
 800402c:	2301      	movs	r3, #1
 800402e:	4642      	mov	r2, r8
 8004030:	e7e1      	b.n	8003ff6 <_printf_float+0x3f2>
 8004032:	2301      	movs	r3, #1
 8004034:	464a      	mov	r2, r9
 8004036:	4631      	mov	r1, r6
 8004038:	4628      	mov	r0, r5
 800403a:	47b8      	blx	r7
 800403c:	3001      	adds	r0, #1
 800403e:	f43f ae3c 	beq.w	8003cba <_printf_float+0xb6>
 8004042:	f108 0801 	add.w	r8, r8, #1
 8004046:	68e3      	ldr	r3, [r4, #12]
 8004048:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800404a:	1a5b      	subs	r3, r3, r1
 800404c:	4543      	cmp	r3, r8
 800404e:	dcf0      	bgt.n	8004032 <_printf_float+0x42e>
 8004050:	e6fd      	b.n	8003e4e <_printf_float+0x24a>
 8004052:	f04f 0800 	mov.w	r8, #0
 8004056:	f104 0919 	add.w	r9, r4, #25
 800405a:	e7f4      	b.n	8004046 <_printf_float+0x442>

0800405c <_printf_common>:
 800405c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004060:	4616      	mov	r6, r2
 8004062:	4698      	mov	r8, r3
 8004064:	688a      	ldr	r2, [r1, #8]
 8004066:	690b      	ldr	r3, [r1, #16]
 8004068:	4607      	mov	r7, r0
 800406a:	4293      	cmp	r3, r2
 800406c:	bfb8      	it	lt
 800406e:	4613      	movlt	r3, r2
 8004070:	6033      	str	r3, [r6, #0]
 8004072:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004076:	460c      	mov	r4, r1
 8004078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800407c:	b10a      	cbz	r2, 8004082 <_printf_common+0x26>
 800407e:	3301      	adds	r3, #1
 8004080:	6033      	str	r3, [r6, #0]
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	0699      	lsls	r1, r3, #26
 8004086:	bf42      	ittt	mi
 8004088:	6833      	ldrmi	r3, [r6, #0]
 800408a:	3302      	addmi	r3, #2
 800408c:	6033      	strmi	r3, [r6, #0]
 800408e:	6825      	ldr	r5, [r4, #0]
 8004090:	f015 0506 	ands.w	r5, r5, #6
 8004094:	d106      	bne.n	80040a4 <_printf_common+0x48>
 8004096:	f104 0a19 	add.w	sl, r4, #25
 800409a:	68e3      	ldr	r3, [r4, #12]
 800409c:	6832      	ldr	r2, [r6, #0]
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	42ab      	cmp	r3, r5
 80040a2:	dc2b      	bgt.n	80040fc <_printf_common+0xa0>
 80040a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040a8:	6822      	ldr	r2, [r4, #0]
 80040aa:	3b00      	subs	r3, #0
 80040ac:	bf18      	it	ne
 80040ae:	2301      	movne	r3, #1
 80040b0:	0692      	lsls	r2, r2, #26
 80040b2:	d430      	bmi.n	8004116 <_printf_common+0xba>
 80040b4:	4641      	mov	r1, r8
 80040b6:	4638      	mov	r0, r7
 80040b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040bc:	47c8      	blx	r9
 80040be:	3001      	adds	r0, #1
 80040c0:	d023      	beq.n	800410a <_printf_common+0xae>
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	6922      	ldr	r2, [r4, #16]
 80040c6:	f003 0306 	and.w	r3, r3, #6
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	bf14      	ite	ne
 80040ce:	2500      	movne	r5, #0
 80040d0:	6833      	ldreq	r3, [r6, #0]
 80040d2:	f04f 0600 	mov.w	r6, #0
 80040d6:	bf08      	it	eq
 80040d8:	68e5      	ldreq	r5, [r4, #12]
 80040da:	f104 041a 	add.w	r4, r4, #26
 80040de:	bf08      	it	eq
 80040e0:	1aed      	subeq	r5, r5, r3
 80040e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80040e6:	bf08      	it	eq
 80040e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040ec:	4293      	cmp	r3, r2
 80040ee:	bfc4      	itt	gt
 80040f0:	1a9b      	subgt	r3, r3, r2
 80040f2:	18ed      	addgt	r5, r5, r3
 80040f4:	42b5      	cmp	r5, r6
 80040f6:	d11a      	bne.n	800412e <_printf_common+0xd2>
 80040f8:	2000      	movs	r0, #0
 80040fa:	e008      	b.n	800410e <_printf_common+0xb2>
 80040fc:	2301      	movs	r3, #1
 80040fe:	4652      	mov	r2, sl
 8004100:	4641      	mov	r1, r8
 8004102:	4638      	mov	r0, r7
 8004104:	47c8      	blx	r9
 8004106:	3001      	adds	r0, #1
 8004108:	d103      	bne.n	8004112 <_printf_common+0xb6>
 800410a:	f04f 30ff 	mov.w	r0, #4294967295
 800410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004112:	3501      	adds	r5, #1
 8004114:	e7c1      	b.n	800409a <_printf_common+0x3e>
 8004116:	2030      	movs	r0, #48	@ 0x30
 8004118:	18e1      	adds	r1, r4, r3
 800411a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004124:	4422      	add	r2, r4
 8004126:	3302      	adds	r3, #2
 8004128:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800412c:	e7c2      	b.n	80040b4 <_printf_common+0x58>
 800412e:	2301      	movs	r3, #1
 8004130:	4622      	mov	r2, r4
 8004132:	4641      	mov	r1, r8
 8004134:	4638      	mov	r0, r7
 8004136:	47c8      	blx	r9
 8004138:	3001      	adds	r0, #1
 800413a:	d0e6      	beq.n	800410a <_printf_common+0xae>
 800413c:	3601      	adds	r6, #1
 800413e:	e7d9      	b.n	80040f4 <_printf_common+0x98>

08004140 <_printf_i>:
 8004140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004144:	7e0f      	ldrb	r7, [r1, #24]
 8004146:	4691      	mov	r9, r2
 8004148:	2f78      	cmp	r7, #120	@ 0x78
 800414a:	4680      	mov	r8, r0
 800414c:	460c      	mov	r4, r1
 800414e:	469a      	mov	sl, r3
 8004150:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004156:	d807      	bhi.n	8004168 <_printf_i+0x28>
 8004158:	2f62      	cmp	r7, #98	@ 0x62
 800415a:	d80a      	bhi.n	8004172 <_printf_i+0x32>
 800415c:	2f00      	cmp	r7, #0
 800415e:	f000 80d3 	beq.w	8004308 <_printf_i+0x1c8>
 8004162:	2f58      	cmp	r7, #88	@ 0x58
 8004164:	f000 80ba 	beq.w	80042dc <_printf_i+0x19c>
 8004168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800416c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004170:	e03a      	b.n	80041e8 <_printf_i+0xa8>
 8004172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004176:	2b15      	cmp	r3, #21
 8004178:	d8f6      	bhi.n	8004168 <_printf_i+0x28>
 800417a:	a101      	add	r1, pc, #4	@ (adr r1, 8004180 <_printf_i+0x40>)
 800417c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004180:	080041d9 	.word	0x080041d9
 8004184:	080041ed 	.word	0x080041ed
 8004188:	08004169 	.word	0x08004169
 800418c:	08004169 	.word	0x08004169
 8004190:	08004169 	.word	0x08004169
 8004194:	08004169 	.word	0x08004169
 8004198:	080041ed 	.word	0x080041ed
 800419c:	08004169 	.word	0x08004169
 80041a0:	08004169 	.word	0x08004169
 80041a4:	08004169 	.word	0x08004169
 80041a8:	08004169 	.word	0x08004169
 80041ac:	080042ef 	.word	0x080042ef
 80041b0:	08004217 	.word	0x08004217
 80041b4:	080042a9 	.word	0x080042a9
 80041b8:	08004169 	.word	0x08004169
 80041bc:	08004169 	.word	0x08004169
 80041c0:	08004311 	.word	0x08004311
 80041c4:	08004169 	.word	0x08004169
 80041c8:	08004217 	.word	0x08004217
 80041cc:	08004169 	.word	0x08004169
 80041d0:	08004169 	.word	0x08004169
 80041d4:	080042b1 	.word	0x080042b1
 80041d8:	6833      	ldr	r3, [r6, #0]
 80041da:	1d1a      	adds	r2, r3, #4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6032      	str	r2, [r6, #0]
 80041e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041e8:	2301      	movs	r3, #1
 80041ea:	e09e      	b.n	800432a <_printf_i+0x1ea>
 80041ec:	6833      	ldr	r3, [r6, #0]
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	1d19      	adds	r1, r3, #4
 80041f2:	6031      	str	r1, [r6, #0]
 80041f4:	0606      	lsls	r6, r0, #24
 80041f6:	d501      	bpl.n	80041fc <_printf_i+0xbc>
 80041f8:	681d      	ldr	r5, [r3, #0]
 80041fa:	e003      	b.n	8004204 <_printf_i+0xc4>
 80041fc:	0645      	lsls	r5, r0, #25
 80041fe:	d5fb      	bpl.n	80041f8 <_printf_i+0xb8>
 8004200:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004204:	2d00      	cmp	r5, #0
 8004206:	da03      	bge.n	8004210 <_printf_i+0xd0>
 8004208:	232d      	movs	r3, #45	@ 0x2d
 800420a:	426d      	negs	r5, r5
 800420c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004210:	230a      	movs	r3, #10
 8004212:	4859      	ldr	r0, [pc, #356]	@ (8004378 <_printf_i+0x238>)
 8004214:	e011      	b.n	800423a <_printf_i+0xfa>
 8004216:	6821      	ldr	r1, [r4, #0]
 8004218:	6833      	ldr	r3, [r6, #0]
 800421a:	0608      	lsls	r0, r1, #24
 800421c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004220:	d402      	bmi.n	8004228 <_printf_i+0xe8>
 8004222:	0649      	lsls	r1, r1, #25
 8004224:	bf48      	it	mi
 8004226:	b2ad      	uxthmi	r5, r5
 8004228:	2f6f      	cmp	r7, #111	@ 0x6f
 800422a:	6033      	str	r3, [r6, #0]
 800422c:	bf14      	ite	ne
 800422e:	230a      	movne	r3, #10
 8004230:	2308      	moveq	r3, #8
 8004232:	4851      	ldr	r0, [pc, #324]	@ (8004378 <_printf_i+0x238>)
 8004234:	2100      	movs	r1, #0
 8004236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800423a:	6866      	ldr	r6, [r4, #4]
 800423c:	2e00      	cmp	r6, #0
 800423e:	bfa8      	it	ge
 8004240:	6821      	ldrge	r1, [r4, #0]
 8004242:	60a6      	str	r6, [r4, #8]
 8004244:	bfa4      	itt	ge
 8004246:	f021 0104 	bicge.w	r1, r1, #4
 800424a:	6021      	strge	r1, [r4, #0]
 800424c:	b90d      	cbnz	r5, 8004252 <_printf_i+0x112>
 800424e:	2e00      	cmp	r6, #0
 8004250:	d04b      	beq.n	80042ea <_printf_i+0x1aa>
 8004252:	4616      	mov	r6, r2
 8004254:	fbb5 f1f3 	udiv	r1, r5, r3
 8004258:	fb03 5711 	mls	r7, r3, r1, r5
 800425c:	5dc7      	ldrb	r7, [r0, r7]
 800425e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004262:	462f      	mov	r7, r5
 8004264:	42bb      	cmp	r3, r7
 8004266:	460d      	mov	r5, r1
 8004268:	d9f4      	bls.n	8004254 <_printf_i+0x114>
 800426a:	2b08      	cmp	r3, #8
 800426c:	d10b      	bne.n	8004286 <_printf_i+0x146>
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	07df      	lsls	r7, r3, #31
 8004272:	d508      	bpl.n	8004286 <_printf_i+0x146>
 8004274:	6923      	ldr	r3, [r4, #16]
 8004276:	6861      	ldr	r1, [r4, #4]
 8004278:	4299      	cmp	r1, r3
 800427a:	bfde      	ittt	le
 800427c:	2330      	movle	r3, #48	@ 0x30
 800427e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004282:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004286:	1b92      	subs	r2, r2, r6
 8004288:	6122      	str	r2, [r4, #16]
 800428a:	464b      	mov	r3, r9
 800428c:	4621      	mov	r1, r4
 800428e:	4640      	mov	r0, r8
 8004290:	f8cd a000 	str.w	sl, [sp]
 8004294:	aa03      	add	r2, sp, #12
 8004296:	f7ff fee1 	bl	800405c <_printf_common>
 800429a:	3001      	adds	r0, #1
 800429c:	d14a      	bne.n	8004334 <_printf_i+0x1f4>
 800429e:	f04f 30ff 	mov.w	r0, #4294967295
 80042a2:	b004      	add	sp, #16
 80042a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	f043 0320 	orr.w	r3, r3, #32
 80042ae:	6023      	str	r3, [r4, #0]
 80042b0:	2778      	movs	r7, #120	@ 0x78
 80042b2:	4832      	ldr	r0, [pc, #200]	@ (800437c <_printf_i+0x23c>)
 80042b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	6831      	ldr	r1, [r6, #0]
 80042bc:	061f      	lsls	r7, r3, #24
 80042be:	f851 5b04 	ldr.w	r5, [r1], #4
 80042c2:	d402      	bmi.n	80042ca <_printf_i+0x18a>
 80042c4:	065f      	lsls	r7, r3, #25
 80042c6:	bf48      	it	mi
 80042c8:	b2ad      	uxthmi	r5, r5
 80042ca:	6031      	str	r1, [r6, #0]
 80042cc:	07d9      	lsls	r1, r3, #31
 80042ce:	bf44      	itt	mi
 80042d0:	f043 0320 	orrmi.w	r3, r3, #32
 80042d4:	6023      	strmi	r3, [r4, #0]
 80042d6:	b11d      	cbz	r5, 80042e0 <_printf_i+0x1a0>
 80042d8:	2310      	movs	r3, #16
 80042da:	e7ab      	b.n	8004234 <_printf_i+0xf4>
 80042dc:	4826      	ldr	r0, [pc, #152]	@ (8004378 <_printf_i+0x238>)
 80042de:	e7e9      	b.n	80042b4 <_printf_i+0x174>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	f023 0320 	bic.w	r3, r3, #32
 80042e6:	6023      	str	r3, [r4, #0]
 80042e8:	e7f6      	b.n	80042d8 <_printf_i+0x198>
 80042ea:	4616      	mov	r6, r2
 80042ec:	e7bd      	b.n	800426a <_printf_i+0x12a>
 80042ee:	6833      	ldr	r3, [r6, #0]
 80042f0:	6825      	ldr	r5, [r4, #0]
 80042f2:	1d18      	adds	r0, r3, #4
 80042f4:	6961      	ldr	r1, [r4, #20]
 80042f6:	6030      	str	r0, [r6, #0]
 80042f8:	062e      	lsls	r6, r5, #24
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	d501      	bpl.n	8004302 <_printf_i+0x1c2>
 80042fe:	6019      	str	r1, [r3, #0]
 8004300:	e002      	b.n	8004308 <_printf_i+0x1c8>
 8004302:	0668      	lsls	r0, r5, #25
 8004304:	d5fb      	bpl.n	80042fe <_printf_i+0x1be>
 8004306:	8019      	strh	r1, [r3, #0]
 8004308:	2300      	movs	r3, #0
 800430a:	4616      	mov	r6, r2
 800430c:	6123      	str	r3, [r4, #16]
 800430e:	e7bc      	b.n	800428a <_printf_i+0x14a>
 8004310:	6833      	ldr	r3, [r6, #0]
 8004312:	2100      	movs	r1, #0
 8004314:	1d1a      	adds	r2, r3, #4
 8004316:	6032      	str	r2, [r6, #0]
 8004318:	681e      	ldr	r6, [r3, #0]
 800431a:	6862      	ldr	r2, [r4, #4]
 800431c:	4630      	mov	r0, r6
 800431e:	f000 f9c6 	bl	80046ae <memchr>
 8004322:	b108      	cbz	r0, 8004328 <_printf_i+0x1e8>
 8004324:	1b80      	subs	r0, r0, r6
 8004326:	6060      	str	r0, [r4, #4]
 8004328:	6863      	ldr	r3, [r4, #4]
 800432a:	6123      	str	r3, [r4, #16]
 800432c:	2300      	movs	r3, #0
 800432e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004332:	e7aa      	b.n	800428a <_printf_i+0x14a>
 8004334:	4632      	mov	r2, r6
 8004336:	4649      	mov	r1, r9
 8004338:	4640      	mov	r0, r8
 800433a:	6923      	ldr	r3, [r4, #16]
 800433c:	47d0      	blx	sl
 800433e:	3001      	adds	r0, #1
 8004340:	d0ad      	beq.n	800429e <_printf_i+0x15e>
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	079b      	lsls	r3, r3, #30
 8004346:	d413      	bmi.n	8004370 <_printf_i+0x230>
 8004348:	68e0      	ldr	r0, [r4, #12]
 800434a:	9b03      	ldr	r3, [sp, #12]
 800434c:	4298      	cmp	r0, r3
 800434e:	bfb8      	it	lt
 8004350:	4618      	movlt	r0, r3
 8004352:	e7a6      	b.n	80042a2 <_printf_i+0x162>
 8004354:	2301      	movs	r3, #1
 8004356:	4632      	mov	r2, r6
 8004358:	4649      	mov	r1, r9
 800435a:	4640      	mov	r0, r8
 800435c:	47d0      	blx	sl
 800435e:	3001      	adds	r0, #1
 8004360:	d09d      	beq.n	800429e <_printf_i+0x15e>
 8004362:	3501      	adds	r5, #1
 8004364:	68e3      	ldr	r3, [r4, #12]
 8004366:	9903      	ldr	r1, [sp, #12]
 8004368:	1a5b      	subs	r3, r3, r1
 800436a:	42ab      	cmp	r3, r5
 800436c:	dcf2      	bgt.n	8004354 <_printf_i+0x214>
 800436e:	e7eb      	b.n	8004348 <_printf_i+0x208>
 8004370:	2500      	movs	r5, #0
 8004372:	f104 0619 	add.w	r6, r4, #25
 8004376:	e7f5      	b.n	8004364 <_printf_i+0x224>
 8004378:	08006694 	.word	0x08006694
 800437c:	080066a5 	.word	0x080066a5

08004380 <std>:
 8004380:	2300      	movs	r3, #0
 8004382:	b510      	push	{r4, lr}
 8004384:	4604      	mov	r4, r0
 8004386:	e9c0 3300 	strd	r3, r3, [r0]
 800438a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800438e:	6083      	str	r3, [r0, #8]
 8004390:	8181      	strh	r1, [r0, #12]
 8004392:	6643      	str	r3, [r0, #100]	@ 0x64
 8004394:	81c2      	strh	r2, [r0, #14]
 8004396:	6183      	str	r3, [r0, #24]
 8004398:	4619      	mov	r1, r3
 800439a:	2208      	movs	r2, #8
 800439c:	305c      	adds	r0, #92	@ 0x5c
 800439e:	f000 f906 	bl	80045ae <memset>
 80043a2:	4b0d      	ldr	r3, [pc, #52]	@ (80043d8 <std+0x58>)
 80043a4:	6224      	str	r4, [r4, #32]
 80043a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80043a8:	4b0c      	ldr	r3, [pc, #48]	@ (80043dc <std+0x5c>)
 80043aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80043ac:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <std+0x60>)
 80043ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80043b0:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <std+0x64>)
 80043b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80043b4:	4b0c      	ldr	r3, [pc, #48]	@ (80043e8 <std+0x68>)
 80043b6:	429c      	cmp	r4, r3
 80043b8:	d006      	beq.n	80043c8 <std+0x48>
 80043ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80043be:	4294      	cmp	r4, r2
 80043c0:	d002      	beq.n	80043c8 <std+0x48>
 80043c2:	33d0      	adds	r3, #208	@ 0xd0
 80043c4:	429c      	cmp	r4, r3
 80043c6:	d105      	bne.n	80043d4 <std+0x54>
 80043c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80043cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d0:	f000 b96a 	b.w	80046a8 <__retarget_lock_init_recursive>
 80043d4:	bd10      	pop	{r4, pc}
 80043d6:	bf00      	nop
 80043d8:	08004529 	.word	0x08004529
 80043dc:	0800454b 	.word	0x0800454b
 80043e0:	08004583 	.word	0x08004583
 80043e4:	080045a7 	.word	0x080045a7
 80043e8:	200002d0 	.word	0x200002d0

080043ec <stdio_exit_handler>:
 80043ec:	4a02      	ldr	r2, [pc, #8]	@ (80043f8 <stdio_exit_handler+0xc>)
 80043ee:	4903      	ldr	r1, [pc, #12]	@ (80043fc <stdio_exit_handler+0x10>)
 80043f0:	4803      	ldr	r0, [pc, #12]	@ (8004400 <stdio_exit_handler+0x14>)
 80043f2:	f000 b869 	b.w	80044c8 <_fwalk_sglue>
 80043f6:	bf00      	nop
 80043f8:	2000000c 	.word	0x2000000c
 80043fc:	08005fed 	.word	0x08005fed
 8004400:	2000001c 	.word	0x2000001c

08004404 <cleanup_stdio>:
 8004404:	6841      	ldr	r1, [r0, #4]
 8004406:	4b0c      	ldr	r3, [pc, #48]	@ (8004438 <cleanup_stdio+0x34>)
 8004408:	b510      	push	{r4, lr}
 800440a:	4299      	cmp	r1, r3
 800440c:	4604      	mov	r4, r0
 800440e:	d001      	beq.n	8004414 <cleanup_stdio+0x10>
 8004410:	f001 fdec 	bl	8005fec <_fflush_r>
 8004414:	68a1      	ldr	r1, [r4, #8]
 8004416:	4b09      	ldr	r3, [pc, #36]	@ (800443c <cleanup_stdio+0x38>)
 8004418:	4299      	cmp	r1, r3
 800441a:	d002      	beq.n	8004422 <cleanup_stdio+0x1e>
 800441c:	4620      	mov	r0, r4
 800441e:	f001 fde5 	bl	8005fec <_fflush_r>
 8004422:	68e1      	ldr	r1, [r4, #12]
 8004424:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <cleanup_stdio+0x3c>)
 8004426:	4299      	cmp	r1, r3
 8004428:	d004      	beq.n	8004434 <cleanup_stdio+0x30>
 800442a:	4620      	mov	r0, r4
 800442c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004430:	f001 bddc 	b.w	8005fec <_fflush_r>
 8004434:	bd10      	pop	{r4, pc}
 8004436:	bf00      	nop
 8004438:	200002d0 	.word	0x200002d0
 800443c:	20000338 	.word	0x20000338
 8004440:	200003a0 	.word	0x200003a0

08004444 <global_stdio_init.part.0>:
 8004444:	b510      	push	{r4, lr}
 8004446:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <global_stdio_init.part.0+0x30>)
 8004448:	4c0b      	ldr	r4, [pc, #44]	@ (8004478 <global_stdio_init.part.0+0x34>)
 800444a:	4a0c      	ldr	r2, [pc, #48]	@ (800447c <global_stdio_init.part.0+0x38>)
 800444c:	4620      	mov	r0, r4
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	2104      	movs	r1, #4
 8004452:	2200      	movs	r2, #0
 8004454:	f7ff ff94 	bl	8004380 <std>
 8004458:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800445c:	2201      	movs	r2, #1
 800445e:	2109      	movs	r1, #9
 8004460:	f7ff ff8e 	bl	8004380 <std>
 8004464:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004468:	2202      	movs	r2, #2
 800446a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800446e:	2112      	movs	r1, #18
 8004470:	f7ff bf86 	b.w	8004380 <std>
 8004474:	20000408 	.word	0x20000408
 8004478:	200002d0 	.word	0x200002d0
 800447c:	080043ed 	.word	0x080043ed

08004480 <__sfp_lock_acquire>:
 8004480:	4801      	ldr	r0, [pc, #4]	@ (8004488 <__sfp_lock_acquire+0x8>)
 8004482:	f000 b912 	b.w	80046aa <__retarget_lock_acquire_recursive>
 8004486:	bf00      	nop
 8004488:	20000411 	.word	0x20000411

0800448c <__sfp_lock_release>:
 800448c:	4801      	ldr	r0, [pc, #4]	@ (8004494 <__sfp_lock_release+0x8>)
 800448e:	f000 b90d 	b.w	80046ac <__retarget_lock_release_recursive>
 8004492:	bf00      	nop
 8004494:	20000411 	.word	0x20000411

08004498 <__sinit>:
 8004498:	b510      	push	{r4, lr}
 800449a:	4604      	mov	r4, r0
 800449c:	f7ff fff0 	bl	8004480 <__sfp_lock_acquire>
 80044a0:	6a23      	ldr	r3, [r4, #32]
 80044a2:	b11b      	cbz	r3, 80044ac <__sinit+0x14>
 80044a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044a8:	f7ff bff0 	b.w	800448c <__sfp_lock_release>
 80044ac:	4b04      	ldr	r3, [pc, #16]	@ (80044c0 <__sinit+0x28>)
 80044ae:	6223      	str	r3, [r4, #32]
 80044b0:	4b04      	ldr	r3, [pc, #16]	@ (80044c4 <__sinit+0x2c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f5      	bne.n	80044a4 <__sinit+0xc>
 80044b8:	f7ff ffc4 	bl	8004444 <global_stdio_init.part.0>
 80044bc:	e7f2      	b.n	80044a4 <__sinit+0xc>
 80044be:	bf00      	nop
 80044c0:	08004405 	.word	0x08004405
 80044c4:	20000408 	.word	0x20000408

080044c8 <_fwalk_sglue>:
 80044c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044cc:	4607      	mov	r7, r0
 80044ce:	4688      	mov	r8, r1
 80044d0:	4614      	mov	r4, r2
 80044d2:	2600      	movs	r6, #0
 80044d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044d8:	f1b9 0901 	subs.w	r9, r9, #1
 80044dc:	d505      	bpl.n	80044ea <_fwalk_sglue+0x22>
 80044de:	6824      	ldr	r4, [r4, #0]
 80044e0:	2c00      	cmp	r4, #0
 80044e2:	d1f7      	bne.n	80044d4 <_fwalk_sglue+0xc>
 80044e4:	4630      	mov	r0, r6
 80044e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044ea:	89ab      	ldrh	r3, [r5, #12]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d907      	bls.n	8004500 <_fwalk_sglue+0x38>
 80044f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044f4:	3301      	adds	r3, #1
 80044f6:	d003      	beq.n	8004500 <_fwalk_sglue+0x38>
 80044f8:	4629      	mov	r1, r5
 80044fa:	4638      	mov	r0, r7
 80044fc:	47c0      	blx	r8
 80044fe:	4306      	orrs	r6, r0
 8004500:	3568      	adds	r5, #104	@ 0x68
 8004502:	e7e9      	b.n	80044d8 <_fwalk_sglue+0x10>

08004504 <iprintf>:
 8004504:	b40f      	push	{r0, r1, r2, r3}
 8004506:	b507      	push	{r0, r1, r2, lr}
 8004508:	4906      	ldr	r1, [pc, #24]	@ (8004524 <iprintf+0x20>)
 800450a:	ab04      	add	r3, sp, #16
 800450c:	6808      	ldr	r0, [r1, #0]
 800450e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004512:	6881      	ldr	r1, [r0, #8]
 8004514:	9301      	str	r3, [sp, #4]
 8004516:	f001 fbd1 	bl	8005cbc <_vfiprintf_r>
 800451a:	b003      	add	sp, #12
 800451c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004520:	b004      	add	sp, #16
 8004522:	4770      	bx	lr
 8004524:	20000018 	.word	0x20000018

08004528 <__sread>:
 8004528:	b510      	push	{r4, lr}
 800452a:	460c      	mov	r4, r1
 800452c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004530:	f000 f86c 	bl	800460c <_read_r>
 8004534:	2800      	cmp	r0, #0
 8004536:	bfab      	itete	ge
 8004538:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800453a:	89a3      	ldrhlt	r3, [r4, #12]
 800453c:	181b      	addge	r3, r3, r0
 800453e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004542:	bfac      	ite	ge
 8004544:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004546:	81a3      	strhlt	r3, [r4, #12]
 8004548:	bd10      	pop	{r4, pc}

0800454a <__swrite>:
 800454a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800454e:	461f      	mov	r7, r3
 8004550:	898b      	ldrh	r3, [r1, #12]
 8004552:	4605      	mov	r5, r0
 8004554:	05db      	lsls	r3, r3, #23
 8004556:	460c      	mov	r4, r1
 8004558:	4616      	mov	r6, r2
 800455a:	d505      	bpl.n	8004568 <__swrite+0x1e>
 800455c:	2302      	movs	r3, #2
 800455e:	2200      	movs	r2, #0
 8004560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004564:	f000 f840 	bl	80045e8 <_lseek_r>
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	4632      	mov	r2, r6
 800456c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004570:	81a3      	strh	r3, [r4, #12]
 8004572:	4628      	mov	r0, r5
 8004574:	463b      	mov	r3, r7
 8004576:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800457a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800457e:	f000 b857 	b.w	8004630 <_write_r>

08004582 <__sseek>:
 8004582:	b510      	push	{r4, lr}
 8004584:	460c      	mov	r4, r1
 8004586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800458a:	f000 f82d 	bl	80045e8 <_lseek_r>
 800458e:	1c43      	adds	r3, r0, #1
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	bf15      	itete	ne
 8004594:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004596:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800459a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800459e:	81a3      	strheq	r3, [r4, #12]
 80045a0:	bf18      	it	ne
 80045a2:	81a3      	strhne	r3, [r4, #12]
 80045a4:	bd10      	pop	{r4, pc}

080045a6 <__sclose>:
 80045a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045aa:	f000 b80d 	b.w	80045c8 <_close_r>

080045ae <memset>:
 80045ae:	4603      	mov	r3, r0
 80045b0:	4402      	add	r2, r0
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d100      	bne.n	80045b8 <memset+0xa>
 80045b6:	4770      	bx	lr
 80045b8:	f803 1b01 	strb.w	r1, [r3], #1
 80045bc:	e7f9      	b.n	80045b2 <memset+0x4>
	...

080045c0 <_localeconv_r>:
 80045c0:	4800      	ldr	r0, [pc, #0]	@ (80045c4 <_localeconv_r+0x4>)
 80045c2:	4770      	bx	lr
 80045c4:	20000158 	.word	0x20000158

080045c8 <_close_r>:
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	2300      	movs	r3, #0
 80045cc:	4d05      	ldr	r5, [pc, #20]	@ (80045e4 <_close_r+0x1c>)
 80045ce:	4604      	mov	r4, r0
 80045d0:	4608      	mov	r0, r1
 80045d2:	602b      	str	r3, [r5, #0]
 80045d4:	f7fd f9b9 	bl	800194a <_close>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	d102      	bne.n	80045e2 <_close_r+0x1a>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	b103      	cbz	r3, 80045e2 <_close_r+0x1a>
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	2000040c 	.word	0x2000040c

080045e8 <_lseek_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4604      	mov	r4, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	4611      	mov	r1, r2
 80045f0:	2200      	movs	r2, #0
 80045f2:	4d05      	ldr	r5, [pc, #20]	@ (8004608 <_lseek_r+0x20>)
 80045f4:	602a      	str	r2, [r5, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f7fd f9cb 	bl	8001992 <_lseek>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_lseek_r+0x1e>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_lseek_r+0x1e>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	2000040c 	.word	0x2000040c

0800460c <_read_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	4611      	mov	r1, r2
 8004614:	2200      	movs	r2, #0
 8004616:	4d05      	ldr	r5, [pc, #20]	@ (800462c <_read_r+0x20>)
 8004618:	602a      	str	r2, [r5, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	f7fd f978 	bl	8001910 <_read>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_read_r+0x1e>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	b103      	cbz	r3, 800462a <_read_r+0x1e>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	2000040c 	.word	0x2000040c

08004630 <_write_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4604      	mov	r4, r0
 8004634:	4608      	mov	r0, r1
 8004636:	4611      	mov	r1, r2
 8004638:	2200      	movs	r2, #0
 800463a:	4d05      	ldr	r5, [pc, #20]	@ (8004650 <_write_r+0x20>)
 800463c:	602a      	str	r2, [r5, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	f7fc fa42 	bl	8000ac8 <_write>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_write_r+0x1e>
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	b103      	cbz	r3, 800464e <_write_r+0x1e>
 800464c:	6023      	str	r3, [r4, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	2000040c 	.word	0x2000040c

08004654 <__errno>:
 8004654:	4b01      	ldr	r3, [pc, #4]	@ (800465c <__errno+0x8>)
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20000018 	.word	0x20000018

08004660 <__libc_init_array>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	2600      	movs	r6, #0
 8004664:	4d0c      	ldr	r5, [pc, #48]	@ (8004698 <__libc_init_array+0x38>)
 8004666:	4c0d      	ldr	r4, [pc, #52]	@ (800469c <__libc_init_array+0x3c>)
 8004668:	1b64      	subs	r4, r4, r5
 800466a:	10a4      	asrs	r4, r4, #2
 800466c:	42a6      	cmp	r6, r4
 800466e:	d109      	bne.n	8004684 <__libc_init_array+0x24>
 8004670:	f001 ffc4 	bl	80065fc <_init>
 8004674:	2600      	movs	r6, #0
 8004676:	4d0a      	ldr	r5, [pc, #40]	@ (80046a0 <__libc_init_array+0x40>)
 8004678:	4c0a      	ldr	r4, [pc, #40]	@ (80046a4 <__libc_init_array+0x44>)
 800467a:	1b64      	subs	r4, r4, r5
 800467c:	10a4      	asrs	r4, r4, #2
 800467e:	42a6      	cmp	r6, r4
 8004680:	d105      	bne.n	800468e <__libc_init_array+0x2e>
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	f855 3b04 	ldr.w	r3, [r5], #4
 8004688:	4798      	blx	r3
 800468a:	3601      	adds	r6, #1
 800468c:	e7ee      	b.n	800466c <__libc_init_array+0xc>
 800468e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004692:	4798      	blx	r3
 8004694:	3601      	adds	r6, #1
 8004696:	e7f2      	b.n	800467e <__libc_init_array+0x1e>
 8004698:	080069f8 	.word	0x080069f8
 800469c:	080069f8 	.word	0x080069f8
 80046a0:	080069f8 	.word	0x080069f8
 80046a4:	080069fc 	.word	0x080069fc

080046a8 <__retarget_lock_init_recursive>:
 80046a8:	4770      	bx	lr

080046aa <__retarget_lock_acquire_recursive>:
 80046aa:	4770      	bx	lr

080046ac <__retarget_lock_release_recursive>:
 80046ac:	4770      	bx	lr

080046ae <memchr>:
 80046ae:	4603      	mov	r3, r0
 80046b0:	b510      	push	{r4, lr}
 80046b2:	b2c9      	uxtb	r1, r1
 80046b4:	4402      	add	r2, r0
 80046b6:	4293      	cmp	r3, r2
 80046b8:	4618      	mov	r0, r3
 80046ba:	d101      	bne.n	80046c0 <memchr+0x12>
 80046bc:	2000      	movs	r0, #0
 80046be:	e003      	b.n	80046c8 <memchr+0x1a>
 80046c0:	7804      	ldrb	r4, [r0, #0]
 80046c2:	3301      	adds	r3, #1
 80046c4:	428c      	cmp	r4, r1
 80046c6:	d1f6      	bne.n	80046b6 <memchr+0x8>
 80046c8:	bd10      	pop	{r4, pc}

080046ca <quorem>:
 80046ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ce:	6903      	ldr	r3, [r0, #16]
 80046d0:	690c      	ldr	r4, [r1, #16]
 80046d2:	4607      	mov	r7, r0
 80046d4:	42a3      	cmp	r3, r4
 80046d6:	db7e      	blt.n	80047d6 <quorem+0x10c>
 80046d8:	3c01      	subs	r4, #1
 80046da:	00a3      	lsls	r3, r4, #2
 80046dc:	f100 0514 	add.w	r5, r0, #20
 80046e0:	f101 0814 	add.w	r8, r1, #20
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046f4:	3301      	adds	r3, #1
 80046f6:	429a      	cmp	r2, r3
 80046f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80046fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004700:	d32e      	bcc.n	8004760 <quorem+0x96>
 8004702:	f04f 0a00 	mov.w	sl, #0
 8004706:	46c4      	mov	ip, r8
 8004708:	46ae      	mov	lr, r5
 800470a:	46d3      	mov	fp, sl
 800470c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004710:	b298      	uxth	r0, r3
 8004712:	fb06 a000 	mla	r0, r6, r0, sl
 8004716:	0c1b      	lsrs	r3, r3, #16
 8004718:	0c02      	lsrs	r2, r0, #16
 800471a:	fb06 2303 	mla	r3, r6, r3, r2
 800471e:	f8de 2000 	ldr.w	r2, [lr]
 8004722:	b280      	uxth	r0, r0
 8004724:	b292      	uxth	r2, r2
 8004726:	1a12      	subs	r2, r2, r0
 8004728:	445a      	add	r2, fp
 800472a:	f8de 0000 	ldr.w	r0, [lr]
 800472e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004732:	b29b      	uxth	r3, r3
 8004734:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004738:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800473c:	b292      	uxth	r2, r2
 800473e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004742:	45e1      	cmp	r9, ip
 8004744:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004748:	f84e 2b04 	str.w	r2, [lr], #4
 800474c:	d2de      	bcs.n	800470c <quorem+0x42>
 800474e:	9b00      	ldr	r3, [sp, #0]
 8004750:	58eb      	ldr	r3, [r5, r3]
 8004752:	b92b      	cbnz	r3, 8004760 <quorem+0x96>
 8004754:	9b01      	ldr	r3, [sp, #4]
 8004756:	3b04      	subs	r3, #4
 8004758:	429d      	cmp	r5, r3
 800475a:	461a      	mov	r2, r3
 800475c:	d32f      	bcc.n	80047be <quorem+0xf4>
 800475e:	613c      	str	r4, [r7, #16]
 8004760:	4638      	mov	r0, r7
 8004762:	f001 f97b 	bl	8005a5c <__mcmp>
 8004766:	2800      	cmp	r0, #0
 8004768:	db25      	blt.n	80047b6 <quorem+0xec>
 800476a:	4629      	mov	r1, r5
 800476c:	2000      	movs	r0, #0
 800476e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004772:	f8d1 c000 	ldr.w	ip, [r1]
 8004776:	fa1f fe82 	uxth.w	lr, r2
 800477a:	fa1f f38c 	uxth.w	r3, ip
 800477e:	eba3 030e 	sub.w	r3, r3, lr
 8004782:	4403      	add	r3, r0
 8004784:	0c12      	lsrs	r2, r2, #16
 8004786:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800478a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800478e:	b29b      	uxth	r3, r3
 8004790:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004794:	45c1      	cmp	r9, r8
 8004796:	ea4f 4022 	mov.w	r0, r2, asr #16
 800479a:	f841 3b04 	str.w	r3, [r1], #4
 800479e:	d2e6      	bcs.n	800476e <quorem+0xa4>
 80047a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047a8:	b922      	cbnz	r2, 80047b4 <quorem+0xea>
 80047aa:	3b04      	subs	r3, #4
 80047ac:	429d      	cmp	r5, r3
 80047ae:	461a      	mov	r2, r3
 80047b0:	d30b      	bcc.n	80047ca <quorem+0x100>
 80047b2:	613c      	str	r4, [r7, #16]
 80047b4:	3601      	adds	r6, #1
 80047b6:	4630      	mov	r0, r6
 80047b8:	b003      	add	sp, #12
 80047ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	3b04      	subs	r3, #4
 80047c2:	2a00      	cmp	r2, #0
 80047c4:	d1cb      	bne.n	800475e <quorem+0x94>
 80047c6:	3c01      	subs	r4, #1
 80047c8:	e7c6      	b.n	8004758 <quorem+0x8e>
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	3b04      	subs	r3, #4
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	d1ef      	bne.n	80047b2 <quorem+0xe8>
 80047d2:	3c01      	subs	r4, #1
 80047d4:	e7ea      	b.n	80047ac <quorem+0xe2>
 80047d6:	2000      	movs	r0, #0
 80047d8:	e7ee      	b.n	80047b8 <quorem+0xee>
 80047da:	0000      	movs	r0, r0
 80047dc:	0000      	movs	r0, r0
	...

080047e0 <_dtoa_r>:
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	4614      	mov	r4, r2
 80047e6:	461d      	mov	r5, r3
 80047e8:	69c7      	ldr	r7, [r0, #28]
 80047ea:	b097      	sub	sp, #92	@ 0x5c
 80047ec:	4683      	mov	fp, r0
 80047ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80047f2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80047f4:	b97f      	cbnz	r7, 8004816 <_dtoa_r+0x36>
 80047f6:	2010      	movs	r0, #16
 80047f8:	f000 fe02 	bl	8005400 <malloc>
 80047fc:	4602      	mov	r2, r0
 80047fe:	f8cb 001c 	str.w	r0, [fp, #28]
 8004802:	b920      	cbnz	r0, 800480e <_dtoa_r+0x2e>
 8004804:	21ef      	movs	r1, #239	@ 0xef
 8004806:	4ba8      	ldr	r3, [pc, #672]	@ (8004aa8 <_dtoa_r+0x2c8>)
 8004808:	48a8      	ldr	r0, [pc, #672]	@ (8004aac <_dtoa_r+0x2cc>)
 800480a:	f001 fcc9 	bl	80061a0 <__assert_func>
 800480e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004812:	6007      	str	r7, [r0, #0]
 8004814:	60c7      	str	r7, [r0, #12]
 8004816:	f8db 301c 	ldr.w	r3, [fp, #28]
 800481a:	6819      	ldr	r1, [r3, #0]
 800481c:	b159      	cbz	r1, 8004836 <_dtoa_r+0x56>
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	2301      	movs	r3, #1
 8004822:	4093      	lsls	r3, r2
 8004824:	604a      	str	r2, [r1, #4]
 8004826:	608b      	str	r3, [r1, #8]
 8004828:	4658      	mov	r0, fp
 800482a:	f000 fedf 	bl	80055ec <_Bfree>
 800482e:	2200      	movs	r2, #0
 8004830:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	1e2b      	subs	r3, r5, #0
 8004838:	bfaf      	iteee	ge
 800483a:	2300      	movge	r3, #0
 800483c:	2201      	movlt	r2, #1
 800483e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004842:	9303      	strlt	r3, [sp, #12]
 8004844:	bfa8      	it	ge
 8004846:	6033      	strge	r3, [r6, #0]
 8004848:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800484c:	4b98      	ldr	r3, [pc, #608]	@ (8004ab0 <_dtoa_r+0x2d0>)
 800484e:	bfb8      	it	lt
 8004850:	6032      	strlt	r2, [r6, #0]
 8004852:	ea33 0308 	bics.w	r3, r3, r8
 8004856:	d112      	bne.n	800487e <_dtoa_r+0x9e>
 8004858:	f242 730f 	movw	r3, #9999	@ 0x270f
 800485c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004864:	4323      	orrs	r3, r4
 8004866:	f000 8550 	beq.w	800530a <_dtoa_r+0xb2a>
 800486a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800486c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004ab4 <_dtoa_r+0x2d4>
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8552 	beq.w	800531a <_dtoa_r+0xb3a>
 8004876:	f10a 0303 	add.w	r3, sl, #3
 800487a:	f000 bd4c 	b.w	8005316 <_dtoa_r+0xb36>
 800487e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004882:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800488a:	2200      	movs	r2, #0
 800488c:	2300      	movs	r3, #0
 800488e:	f7fc f88b 	bl	80009a8 <__aeabi_dcmpeq>
 8004892:	4607      	mov	r7, r0
 8004894:	b158      	cbz	r0, 80048ae <_dtoa_r+0xce>
 8004896:	2301      	movs	r3, #1
 8004898:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800489e:	b113      	cbz	r3, 80048a6 <_dtoa_r+0xc6>
 80048a0:	4b85      	ldr	r3, [pc, #532]	@ (8004ab8 <_dtoa_r+0x2d8>)
 80048a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004abc <_dtoa_r+0x2dc>
 80048aa:	f000 bd36 	b.w	800531a <_dtoa_r+0xb3a>
 80048ae:	ab14      	add	r3, sp, #80	@ 0x50
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	ab15      	add	r3, sp, #84	@ 0x54
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	4658      	mov	r0, fp
 80048b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80048bc:	f001 f97e 	bl	8005bbc <__d2b>
 80048c0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80048c4:	4681      	mov	r9, r0
 80048c6:	2e00      	cmp	r6, #0
 80048c8:	d077      	beq.n	80049ba <_dtoa_r+0x1da>
 80048ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048d0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80048d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048d8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80048dc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80048e0:	9712      	str	r7, [sp, #72]	@ 0x48
 80048e2:	4619      	mov	r1, r3
 80048e4:	2200      	movs	r2, #0
 80048e6:	4b76      	ldr	r3, [pc, #472]	@ (8004ac0 <_dtoa_r+0x2e0>)
 80048e8:	f7fb fc3e 	bl	8000168 <__aeabi_dsub>
 80048ec:	a368      	add	r3, pc, #416	@ (adr r3, 8004a90 <_dtoa_r+0x2b0>)
 80048ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f2:	f7fb fdf1 	bl	80004d8 <__aeabi_dmul>
 80048f6:	a368      	add	r3, pc, #416	@ (adr r3, 8004a98 <_dtoa_r+0x2b8>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f7fb fc36 	bl	800016c <__adddf3>
 8004900:	4604      	mov	r4, r0
 8004902:	4630      	mov	r0, r6
 8004904:	460d      	mov	r5, r1
 8004906:	f7fb fd7d 	bl	8000404 <__aeabi_i2d>
 800490a:	a365      	add	r3, pc, #404	@ (adr r3, 8004aa0 <_dtoa_r+0x2c0>)
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	f7fb fde2 	bl	80004d8 <__aeabi_dmul>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4620      	mov	r0, r4
 800491a:	4629      	mov	r1, r5
 800491c:	f7fb fc26 	bl	800016c <__adddf3>
 8004920:	4604      	mov	r4, r0
 8004922:	460d      	mov	r5, r1
 8004924:	f7fc f888 	bl	8000a38 <__aeabi_d2iz>
 8004928:	2200      	movs	r2, #0
 800492a:	4607      	mov	r7, r0
 800492c:	2300      	movs	r3, #0
 800492e:	4620      	mov	r0, r4
 8004930:	4629      	mov	r1, r5
 8004932:	f7fc f843 	bl	80009bc <__aeabi_dcmplt>
 8004936:	b140      	cbz	r0, 800494a <_dtoa_r+0x16a>
 8004938:	4638      	mov	r0, r7
 800493a:	f7fb fd63 	bl	8000404 <__aeabi_i2d>
 800493e:	4622      	mov	r2, r4
 8004940:	462b      	mov	r3, r5
 8004942:	f7fc f831 	bl	80009a8 <__aeabi_dcmpeq>
 8004946:	b900      	cbnz	r0, 800494a <_dtoa_r+0x16a>
 8004948:	3f01      	subs	r7, #1
 800494a:	2f16      	cmp	r7, #22
 800494c:	d853      	bhi.n	80049f6 <_dtoa_r+0x216>
 800494e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004952:	4b5c      	ldr	r3, [pc, #368]	@ (8004ac4 <_dtoa_r+0x2e4>)
 8004954:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f7fc f82e 	bl	80009bc <__aeabi_dcmplt>
 8004960:	2800      	cmp	r0, #0
 8004962:	d04a      	beq.n	80049fa <_dtoa_r+0x21a>
 8004964:	2300      	movs	r3, #0
 8004966:	3f01      	subs	r7, #1
 8004968:	930f      	str	r3, [sp, #60]	@ 0x3c
 800496a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800496c:	1b9b      	subs	r3, r3, r6
 800496e:	1e5a      	subs	r2, r3, #1
 8004970:	bf46      	itte	mi
 8004972:	f1c3 0801 	rsbmi	r8, r3, #1
 8004976:	2300      	movmi	r3, #0
 8004978:	f04f 0800 	movpl.w	r8, #0
 800497c:	9209      	str	r2, [sp, #36]	@ 0x24
 800497e:	bf48      	it	mi
 8004980:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004982:	2f00      	cmp	r7, #0
 8004984:	db3b      	blt.n	80049fe <_dtoa_r+0x21e>
 8004986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004988:	970e      	str	r7, [sp, #56]	@ 0x38
 800498a:	443b      	add	r3, r7
 800498c:	9309      	str	r3, [sp, #36]	@ 0x24
 800498e:	2300      	movs	r3, #0
 8004990:	930a      	str	r3, [sp, #40]	@ 0x28
 8004992:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004994:	2b09      	cmp	r3, #9
 8004996:	d866      	bhi.n	8004a66 <_dtoa_r+0x286>
 8004998:	2b05      	cmp	r3, #5
 800499a:	bfc4      	itt	gt
 800499c:	3b04      	subgt	r3, #4
 800499e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80049a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049a2:	bfc8      	it	gt
 80049a4:	2400      	movgt	r4, #0
 80049a6:	f1a3 0302 	sub.w	r3, r3, #2
 80049aa:	bfd8      	it	le
 80049ac:	2401      	movle	r4, #1
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d864      	bhi.n	8004a7c <_dtoa_r+0x29c>
 80049b2:	e8df f003 	tbb	[pc, r3]
 80049b6:	382b      	.short	0x382b
 80049b8:	5636      	.short	0x5636
 80049ba:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80049be:	441e      	add	r6, r3
 80049c0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	bfc1      	itttt	gt
 80049c8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80049cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80049d0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80049d4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80049d8:	bfd6      	itet	le
 80049da:	f1c3 0320 	rsble	r3, r3, #32
 80049de:	ea48 0003 	orrgt.w	r0, r8, r3
 80049e2:	fa04 f003 	lslle.w	r0, r4, r3
 80049e6:	f7fb fcfd 	bl	80003e4 <__aeabi_ui2d>
 80049ea:	2201      	movs	r2, #1
 80049ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80049f0:	3e01      	subs	r6, #1
 80049f2:	9212      	str	r2, [sp, #72]	@ 0x48
 80049f4:	e775      	b.n	80048e2 <_dtoa_r+0x102>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e7b6      	b.n	8004968 <_dtoa_r+0x188>
 80049fa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80049fc:	e7b5      	b.n	800496a <_dtoa_r+0x18a>
 80049fe:	427b      	negs	r3, r7
 8004a00:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a02:	2300      	movs	r3, #0
 8004a04:	eba8 0807 	sub.w	r8, r8, r7
 8004a08:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a0a:	e7c2      	b.n	8004992 <_dtoa_r+0x1b2>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	dc35      	bgt.n	8004a82 <_dtoa_r+0x2a2>
 8004a16:	2301      	movs	r3, #1
 8004a18:	461a      	mov	r2, r3
 8004a1a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a1e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004a20:	e00b      	b.n	8004a3a <_dtoa_r+0x25a>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e7f3      	b.n	8004a0e <_dtoa_r+0x22e>
 8004a26:	2300      	movs	r3, #0
 8004a28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	9308      	str	r3, [sp, #32]
 8004a30:	3301      	adds	r3, #1
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	9307      	str	r3, [sp, #28]
 8004a36:	bfb8      	it	lt
 8004a38:	2301      	movlt	r3, #1
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004a42:	f102 0514 	add.w	r5, r2, #20
 8004a46:	429d      	cmp	r5, r3
 8004a48:	d91f      	bls.n	8004a8a <_dtoa_r+0x2aa>
 8004a4a:	6041      	str	r1, [r0, #4]
 8004a4c:	4658      	mov	r0, fp
 8004a4e:	f000 fd8d 	bl	800556c <_Balloc>
 8004a52:	4682      	mov	sl, r0
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d139      	bne.n	8004acc <_dtoa_r+0x2ec>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	f240 11af 	movw	r1, #431	@ 0x1af
 8004a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac8 <_dtoa_r+0x2e8>)
 8004a60:	e6d2      	b.n	8004808 <_dtoa_r+0x28>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e7e0      	b.n	8004a28 <_dtoa_r+0x248>
 8004a66:	2401      	movs	r4, #1
 8004a68:	2300      	movs	r3, #0
 8004a6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004a6c:	9320      	str	r3, [sp, #128]	@ 0x80
 8004a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a72:	2200      	movs	r2, #0
 8004a74:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a78:	2312      	movs	r3, #18
 8004a7a:	e7d0      	b.n	8004a1e <_dtoa_r+0x23e>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a80:	e7f5      	b.n	8004a6e <_dtoa_r+0x28e>
 8004a82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a84:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a88:	e7d7      	b.n	8004a3a <_dtoa_r+0x25a>
 8004a8a:	3101      	adds	r1, #1
 8004a8c:	0052      	lsls	r2, r2, #1
 8004a8e:	e7d8      	b.n	8004a42 <_dtoa_r+0x262>
 8004a90:	636f4361 	.word	0x636f4361
 8004a94:	3fd287a7 	.word	0x3fd287a7
 8004a98:	8b60c8b3 	.word	0x8b60c8b3
 8004a9c:	3fc68a28 	.word	0x3fc68a28
 8004aa0:	509f79fb 	.word	0x509f79fb
 8004aa4:	3fd34413 	.word	0x3fd34413
 8004aa8:	080066c3 	.word	0x080066c3
 8004aac:	080066da 	.word	0x080066da
 8004ab0:	7ff00000 	.word	0x7ff00000
 8004ab4:	080066bf 	.word	0x080066bf
 8004ab8:	08006693 	.word	0x08006693
 8004abc:	08006692 	.word	0x08006692
 8004ac0:	3ff80000 	.word	0x3ff80000
 8004ac4:	080067d0 	.word	0x080067d0
 8004ac8:	08006732 	.word	0x08006732
 8004acc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ad0:	6018      	str	r0, [r3, #0]
 8004ad2:	9b07      	ldr	r3, [sp, #28]
 8004ad4:	2b0e      	cmp	r3, #14
 8004ad6:	f200 80a4 	bhi.w	8004c22 <_dtoa_r+0x442>
 8004ada:	2c00      	cmp	r4, #0
 8004adc:	f000 80a1 	beq.w	8004c22 <_dtoa_r+0x442>
 8004ae0:	2f00      	cmp	r7, #0
 8004ae2:	dd33      	ble.n	8004b4c <_dtoa_r+0x36c>
 8004ae4:	4b86      	ldr	r3, [pc, #536]	@ (8004d00 <_dtoa_r+0x520>)
 8004ae6:	f007 020f 	and.w	r2, r7, #15
 8004aea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004aee:	05f8      	lsls	r0, r7, #23
 8004af0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004af4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004af8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004afc:	d516      	bpl.n	8004b2c <_dtoa_r+0x34c>
 8004afe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b02:	4b80      	ldr	r3, [pc, #512]	@ (8004d04 <_dtoa_r+0x524>)
 8004b04:	2603      	movs	r6, #3
 8004b06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b0a:	f7fb fe0f 	bl	800072c <__aeabi_ddiv>
 8004b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b12:	f004 040f 	and.w	r4, r4, #15
 8004b16:	4d7b      	ldr	r5, [pc, #492]	@ (8004d04 <_dtoa_r+0x524>)
 8004b18:	b954      	cbnz	r4, 8004b30 <_dtoa_r+0x350>
 8004b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b22:	f7fb fe03 	bl	800072c <__aeabi_ddiv>
 8004b26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b2a:	e028      	b.n	8004b7e <_dtoa_r+0x39e>
 8004b2c:	2602      	movs	r6, #2
 8004b2e:	e7f2      	b.n	8004b16 <_dtoa_r+0x336>
 8004b30:	07e1      	lsls	r1, r4, #31
 8004b32:	d508      	bpl.n	8004b46 <_dtoa_r+0x366>
 8004b34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b3c:	f7fb fccc 	bl	80004d8 <__aeabi_dmul>
 8004b40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b44:	3601      	adds	r6, #1
 8004b46:	1064      	asrs	r4, r4, #1
 8004b48:	3508      	adds	r5, #8
 8004b4a:	e7e5      	b.n	8004b18 <_dtoa_r+0x338>
 8004b4c:	f000 80d2 	beq.w	8004cf4 <_dtoa_r+0x514>
 8004b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b54:	427c      	negs	r4, r7
 8004b56:	4b6a      	ldr	r3, [pc, #424]	@ (8004d00 <_dtoa_r+0x520>)
 8004b58:	f004 020f 	and.w	r2, r4, #15
 8004b5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	f7fb fcb8 	bl	80004d8 <__aeabi_dmul>
 8004b68:	2602      	movs	r6, #2
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b70:	4d64      	ldr	r5, [pc, #400]	@ (8004d04 <_dtoa_r+0x524>)
 8004b72:	1124      	asrs	r4, r4, #4
 8004b74:	2c00      	cmp	r4, #0
 8004b76:	f040 80b2 	bne.w	8004cde <_dtoa_r+0x4fe>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1d3      	bne.n	8004b26 <_dtoa_r+0x346>
 8004b7e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004b82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80b7 	beq.w	8004cf8 <_dtoa_r+0x518>
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	4629      	mov	r1, r5
 8004b90:	4b5d      	ldr	r3, [pc, #372]	@ (8004d08 <_dtoa_r+0x528>)
 8004b92:	f7fb ff13 	bl	80009bc <__aeabi_dcmplt>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	f000 80ae 	beq.w	8004cf8 <_dtoa_r+0x518>
 8004b9c:	9b07      	ldr	r3, [sp, #28]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80aa 	beq.w	8004cf8 <_dtoa_r+0x518>
 8004ba4:	9b08      	ldr	r3, [sp, #32]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	dd37      	ble.n	8004c1a <_dtoa_r+0x43a>
 8004baa:	1e7b      	subs	r3, r7, #1
 8004bac:	4620      	mov	r0, r4
 8004bae:	9304      	str	r3, [sp, #16]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	4b55      	ldr	r3, [pc, #340]	@ (8004d0c <_dtoa_r+0x52c>)
 8004bb6:	f7fb fc8f 	bl	80004d8 <__aeabi_dmul>
 8004bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bbe:	9c08      	ldr	r4, [sp, #32]
 8004bc0:	3601      	adds	r6, #1
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f7fb fc1e 	bl	8000404 <__aeabi_i2d>
 8004bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bcc:	f7fb fc84 	bl	80004d8 <__aeabi_dmul>
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8004d10 <_dtoa_r+0x530>)
 8004bd4:	f7fb faca 	bl	800016c <__adddf3>
 8004bd8:	4605      	mov	r5, r0
 8004bda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004bde:	2c00      	cmp	r4, #0
 8004be0:	f040 809a 	bne.w	8004d18 <_dtoa_r+0x538>
 8004be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004be8:	2200      	movs	r2, #0
 8004bea:	4b4a      	ldr	r3, [pc, #296]	@ (8004d14 <_dtoa_r+0x534>)
 8004bec:	f7fb fabc 	bl	8000168 <__aeabi_dsub>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004bf8:	462a      	mov	r2, r5
 8004bfa:	4633      	mov	r3, r6
 8004bfc:	f7fb fefc 	bl	80009f8 <__aeabi_dcmpgt>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	f040 828e 	bne.w	8005122 <_dtoa_r+0x942>
 8004c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c0a:	462a      	mov	r2, r5
 8004c0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004c10:	f7fb fed4 	bl	80009bc <__aeabi_dcmplt>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	f040 8127 	bne.w	8004e68 <_dtoa_r+0x688>
 8004c1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004c1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004c22:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f2c0 8163 	blt.w	8004ef0 <_dtoa_r+0x710>
 8004c2a:	2f0e      	cmp	r7, #14
 8004c2c:	f300 8160 	bgt.w	8004ef0 <_dtoa_r+0x710>
 8004c30:	4b33      	ldr	r3, [pc, #204]	@ (8004d00 <_dtoa_r+0x520>)
 8004c32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c3a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	da03      	bge.n	8004c4c <_dtoa_r+0x46c>
 8004c44:	9b07      	ldr	r3, [sp, #28]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f340 8100 	ble.w	8004e4c <_dtoa_r+0x66c>
 8004c4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004c50:	4656      	mov	r6, sl
 8004c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c56:	4620      	mov	r0, r4
 8004c58:	4629      	mov	r1, r5
 8004c5a:	f7fb fd67 	bl	800072c <__aeabi_ddiv>
 8004c5e:	f7fb feeb 	bl	8000a38 <__aeabi_d2iz>
 8004c62:	4680      	mov	r8, r0
 8004c64:	f7fb fbce 	bl	8000404 <__aeabi_i2d>
 8004c68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c6c:	f7fb fc34 	bl	80004d8 <__aeabi_dmul>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4620      	mov	r0, r4
 8004c76:	4629      	mov	r1, r5
 8004c78:	f7fb fa76 	bl	8000168 <__aeabi_dsub>
 8004c7c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004c80:	9d07      	ldr	r5, [sp, #28]
 8004c82:	f806 4b01 	strb.w	r4, [r6], #1
 8004c86:	eba6 040a 	sub.w	r4, r6, sl
 8004c8a:	42a5      	cmp	r5, r4
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	f040 8116 	bne.w	8004ec0 <_dtoa_r+0x6e0>
 8004c94:	f7fb fa6a 	bl	800016c <__adddf3>
 8004c98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	460d      	mov	r5, r1
 8004ca0:	f7fb feaa 	bl	80009f8 <__aeabi_dcmpgt>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	f040 80f8 	bne.w	8004e9a <_dtoa_r+0x6ba>
 8004caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cae:	4620      	mov	r0, r4
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	f7fb fe79 	bl	80009a8 <__aeabi_dcmpeq>
 8004cb6:	b118      	cbz	r0, 8004cc0 <_dtoa_r+0x4e0>
 8004cb8:	f018 0f01 	tst.w	r8, #1
 8004cbc:	f040 80ed 	bne.w	8004e9a <_dtoa_r+0x6ba>
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	4658      	mov	r0, fp
 8004cc4:	f000 fc92 	bl	80055ec <_Bfree>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	7033      	strb	r3, [r6, #0]
 8004ccc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004cce:	3701      	adds	r7, #1
 8004cd0:	601f      	str	r7, [r3, #0]
 8004cd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8320 	beq.w	800531a <_dtoa_r+0xb3a>
 8004cda:	601e      	str	r6, [r3, #0]
 8004cdc:	e31d      	b.n	800531a <_dtoa_r+0xb3a>
 8004cde:	07e2      	lsls	r2, r4, #31
 8004ce0:	d505      	bpl.n	8004cee <_dtoa_r+0x50e>
 8004ce2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ce6:	f7fb fbf7 	bl	80004d8 <__aeabi_dmul>
 8004cea:	2301      	movs	r3, #1
 8004cec:	3601      	adds	r6, #1
 8004cee:	1064      	asrs	r4, r4, #1
 8004cf0:	3508      	adds	r5, #8
 8004cf2:	e73f      	b.n	8004b74 <_dtoa_r+0x394>
 8004cf4:	2602      	movs	r6, #2
 8004cf6:	e742      	b.n	8004b7e <_dtoa_r+0x39e>
 8004cf8:	9c07      	ldr	r4, [sp, #28]
 8004cfa:	9704      	str	r7, [sp, #16]
 8004cfc:	e761      	b.n	8004bc2 <_dtoa_r+0x3e2>
 8004cfe:	bf00      	nop
 8004d00:	080067d0 	.word	0x080067d0
 8004d04:	080067a8 	.word	0x080067a8
 8004d08:	3ff00000 	.word	0x3ff00000
 8004d0c:	40240000 	.word	0x40240000
 8004d10:	401c0000 	.word	0x401c0000
 8004d14:	40140000 	.word	0x40140000
 8004d18:	4b70      	ldr	r3, [pc, #448]	@ (8004edc <_dtoa_r+0x6fc>)
 8004d1a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004d1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d24:	4454      	add	r4, sl
 8004d26:	2900      	cmp	r1, #0
 8004d28:	d045      	beq.n	8004db6 <_dtoa_r+0x5d6>
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	496c      	ldr	r1, [pc, #432]	@ (8004ee0 <_dtoa_r+0x700>)
 8004d2e:	f7fb fcfd 	bl	800072c <__aeabi_ddiv>
 8004d32:	4633      	mov	r3, r6
 8004d34:	462a      	mov	r2, r5
 8004d36:	f7fb fa17 	bl	8000168 <__aeabi_dsub>
 8004d3a:	4656      	mov	r6, sl
 8004d3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d44:	f7fb fe78 	bl	8000a38 <__aeabi_d2iz>
 8004d48:	4605      	mov	r5, r0
 8004d4a:	f7fb fb5b 	bl	8000404 <__aeabi_i2d>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d56:	f7fb fa07 	bl	8000168 <__aeabi_dsub>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	3530      	adds	r5, #48	@ 0x30
 8004d60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d68:	f806 5b01 	strb.w	r5, [r6], #1
 8004d6c:	f7fb fe26 	bl	80009bc <__aeabi_dcmplt>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d163      	bne.n	8004e3c <_dtoa_r+0x65c>
 8004d74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d78:	2000      	movs	r0, #0
 8004d7a:	495a      	ldr	r1, [pc, #360]	@ (8004ee4 <_dtoa_r+0x704>)
 8004d7c:	f7fb f9f4 	bl	8000168 <__aeabi_dsub>
 8004d80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d84:	f7fb fe1a 	bl	80009bc <__aeabi_dcmplt>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	f040 8087 	bne.w	8004e9c <_dtoa_r+0x6bc>
 8004d8e:	42a6      	cmp	r6, r4
 8004d90:	f43f af43 	beq.w	8004c1a <_dtoa_r+0x43a>
 8004d94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4b53      	ldr	r3, [pc, #332]	@ (8004ee8 <_dtoa_r+0x708>)
 8004d9c:	f7fb fb9c 	bl	80004d8 <__aeabi_dmul>
 8004da0:	2200      	movs	r2, #0
 8004da2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004da6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004daa:	4b4f      	ldr	r3, [pc, #316]	@ (8004ee8 <_dtoa_r+0x708>)
 8004dac:	f7fb fb94 	bl	80004d8 <__aeabi_dmul>
 8004db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004db4:	e7c4      	b.n	8004d40 <_dtoa_r+0x560>
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	f7fb fb8d 	bl	80004d8 <__aeabi_dmul>
 8004dbe:	4656      	mov	r6, sl
 8004dc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004dc4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dca:	f7fb fe35 	bl	8000a38 <__aeabi_d2iz>
 8004dce:	4605      	mov	r5, r0
 8004dd0:	f7fb fb18 	bl	8000404 <__aeabi_i2d>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ddc:	f7fb f9c4 	bl	8000168 <__aeabi_dsub>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	3530      	adds	r5, #48	@ 0x30
 8004de6:	f806 5b01 	strb.w	r5, [r6], #1
 8004dea:	42a6      	cmp	r6, r4
 8004dec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	d124      	bne.n	8004e40 <_dtoa_r+0x660>
 8004df6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004dfa:	4b39      	ldr	r3, [pc, #228]	@ (8004ee0 <_dtoa_r+0x700>)
 8004dfc:	f7fb f9b6 	bl	800016c <__adddf3>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e08:	f7fb fdf6 	bl	80009f8 <__aeabi_dcmpgt>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d145      	bne.n	8004e9c <_dtoa_r+0x6bc>
 8004e10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e14:	2000      	movs	r0, #0
 8004e16:	4932      	ldr	r1, [pc, #200]	@ (8004ee0 <_dtoa_r+0x700>)
 8004e18:	f7fb f9a6 	bl	8000168 <__aeabi_dsub>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e24:	f7fb fdca 	bl	80009bc <__aeabi_dcmplt>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	f43f aef6 	beq.w	8004c1a <_dtoa_r+0x43a>
 8004e2e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004e30:	1e73      	subs	r3, r6, #1
 8004e32:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004e34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004e38:	2b30      	cmp	r3, #48	@ 0x30
 8004e3a:	d0f8      	beq.n	8004e2e <_dtoa_r+0x64e>
 8004e3c:	9f04      	ldr	r7, [sp, #16]
 8004e3e:	e73f      	b.n	8004cc0 <_dtoa_r+0x4e0>
 8004e40:	4b29      	ldr	r3, [pc, #164]	@ (8004ee8 <_dtoa_r+0x708>)
 8004e42:	f7fb fb49 	bl	80004d8 <__aeabi_dmul>
 8004e46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e4a:	e7bc      	b.n	8004dc6 <_dtoa_r+0x5e6>
 8004e4c:	d10c      	bne.n	8004e68 <_dtoa_r+0x688>
 8004e4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e52:	2200      	movs	r2, #0
 8004e54:	4b25      	ldr	r3, [pc, #148]	@ (8004eec <_dtoa_r+0x70c>)
 8004e56:	f7fb fb3f 	bl	80004d8 <__aeabi_dmul>
 8004e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e5e:	f7fb fdc1 	bl	80009e4 <__aeabi_dcmpge>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	f000 815b 	beq.w	800511e <_dtoa_r+0x93e>
 8004e68:	2400      	movs	r4, #0
 8004e6a:	4625      	mov	r5, r4
 8004e6c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e6e:	4656      	mov	r6, sl
 8004e70:	43db      	mvns	r3, r3
 8004e72:	9304      	str	r3, [sp, #16]
 8004e74:	2700      	movs	r7, #0
 8004e76:	4621      	mov	r1, r4
 8004e78:	4658      	mov	r0, fp
 8004e7a:	f000 fbb7 	bl	80055ec <_Bfree>
 8004e7e:	2d00      	cmp	r5, #0
 8004e80:	d0dc      	beq.n	8004e3c <_dtoa_r+0x65c>
 8004e82:	b12f      	cbz	r7, 8004e90 <_dtoa_r+0x6b0>
 8004e84:	42af      	cmp	r7, r5
 8004e86:	d003      	beq.n	8004e90 <_dtoa_r+0x6b0>
 8004e88:	4639      	mov	r1, r7
 8004e8a:	4658      	mov	r0, fp
 8004e8c:	f000 fbae 	bl	80055ec <_Bfree>
 8004e90:	4629      	mov	r1, r5
 8004e92:	4658      	mov	r0, fp
 8004e94:	f000 fbaa 	bl	80055ec <_Bfree>
 8004e98:	e7d0      	b.n	8004e3c <_dtoa_r+0x65c>
 8004e9a:	9704      	str	r7, [sp, #16]
 8004e9c:	4633      	mov	r3, r6
 8004e9e:	461e      	mov	r6, r3
 8004ea0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ea4:	2a39      	cmp	r2, #57	@ 0x39
 8004ea6:	d107      	bne.n	8004eb8 <_dtoa_r+0x6d8>
 8004ea8:	459a      	cmp	sl, r3
 8004eaa:	d1f8      	bne.n	8004e9e <_dtoa_r+0x6be>
 8004eac:	9a04      	ldr	r2, [sp, #16]
 8004eae:	3201      	adds	r2, #1
 8004eb0:	9204      	str	r2, [sp, #16]
 8004eb2:	2230      	movs	r2, #48	@ 0x30
 8004eb4:	f88a 2000 	strb.w	r2, [sl]
 8004eb8:	781a      	ldrb	r2, [r3, #0]
 8004eba:	3201      	adds	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
 8004ebe:	e7bd      	b.n	8004e3c <_dtoa_r+0x65c>
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4b09      	ldr	r3, [pc, #36]	@ (8004ee8 <_dtoa_r+0x708>)
 8004ec4:	f7fb fb08 	bl	80004d8 <__aeabi_dmul>
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2300      	movs	r3, #0
 8004ecc:	4604      	mov	r4, r0
 8004ece:	460d      	mov	r5, r1
 8004ed0:	f7fb fd6a 	bl	80009a8 <__aeabi_dcmpeq>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	f43f aebc 	beq.w	8004c52 <_dtoa_r+0x472>
 8004eda:	e6f1      	b.n	8004cc0 <_dtoa_r+0x4e0>
 8004edc:	080067d0 	.word	0x080067d0
 8004ee0:	3fe00000 	.word	0x3fe00000
 8004ee4:	3ff00000 	.word	0x3ff00000
 8004ee8:	40240000 	.word	0x40240000
 8004eec:	40140000 	.word	0x40140000
 8004ef0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	f000 80db 	beq.w	80050ae <_dtoa_r+0x8ce>
 8004ef8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004efa:	2a01      	cmp	r2, #1
 8004efc:	f300 80bf 	bgt.w	800507e <_dtoa_r+0x89e>
 8004f00:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004f02:	2a00      	cmp	r2, #0
 8004f04:	f000 80b7 	beq.w	8005076 <_dtoa_r+0x896>
 8004f08:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004f0c:	4646      	mov	r6, r8
 8004f0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004f10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f12:	2101      	movs	r1, #1
 8004f14:	441a      	add	r2, r3
 8004f16:	4658      	mov	r0, fp
 8004f18:	4498      	add	r8, r3
 8004f1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f1c:	f000 fc1a 	bl	8005754 <__i2b>
 8004f20:	4605      	mov	r5, r0
 8004f22:	b15e      	cbz	r6, 8004f3c <_dtoa_r+0x75c>
 8004f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	dd08      	ble.n	8004f3c <_dtoa_r+0x75c>
 8004f2a:	42b3      	cmp	r3, r6
 8004f2c:	bfa8      	it	ge
 8004f2e:	4633      	movge	r3, r6
 8004f30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f32:	eba8 0803 	sub.w	r8, r8, r3
 8004f36:	1af6      	subs	r6, r6, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f3e:	b1f3      	cbz	r3, 8004f7e <_dtoa_r+0x79e>
 8004f40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 80b7 	beq.w	80050b6 <_dtoa_r+0x8d6>
 8004f48:	b18c      	cbz	r4, 8004f6e <_dtoa_r+0x78e>
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	4658      	mov	r0, fp
 8004f50:	f000 fcbe 	bl	80058d0 <__pow5mult>
 8004f54:	464a      	mov	r2, r9
 8004f56:	4601      	mov	r1, r0
 8004f58:	4605      	mov	r5, r0
 8004f5a:	4658      	mov	r0, fp
 8004f5c:	f000 fc10 	bl	8005780 <__multiply>
 8004f60:	4649      	mov	r1, r9
 8004f62:	9004      	str	r0, [sp, #16]
 8004f64:	4658      	mov	r0, fp
 8004f66:	f000 fb41 	bl	80055ec <_Bfree>
 8004f6a:	9b04      	ldr	r3, [sp, #16]
 8004f6c:	4699      	mov	r9, r3
 8004f6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f70:	1b1a      	subs	r2, r3, r4
 8004f72:	d004      	beq.n	8004f7e <_dtoa_r+0x79e>
 8004f74:	4649      	mov	r1, r9
 8004f76:	4658      	mov	r0, fp
 8004f78:	f000 fcaa 	bl	80058d0 <__pow5mult>
 8004f7c:	4681      	mov	r9, r0
 8004f7e:	2101      	movs	r1, #1
 8004f80:	4658      	mov	r0, fp
 8004f82:	f000 fbe7 	bl	8005754 <__i2b>
 8004f86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f88:	4604      	mov	r4, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 81c9 	beq.w	8005322 <_dtoa_r+0xb42>
 8004f90:	461a      	mov	r2, r3
 8004f92:	4601      	mov	r1, r0
 8004f94:	4658      	mov	r0, fp
 8004f96:	f000 fc9b 	bl	80058d0 <__pow5mult>
 8004f9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	f300 808f 	bgt.w	80050c2 <_dtoa_r+0x8e2>
 8004fa4:	9b02      	ldr	r3, [sp, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f040 8087 	bne.w	80050ba <_dtoa_r+0x8da>
 8004fac:	9b03      	ldr	r3, [sp, #12]
 8004fae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f040 8083 	bne.w	80050be <_dtoa_r+0x8de>
 8004fb8:	9b03      	ldr	r3, [sp, #12]
 8004fba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004fbe:	0d1b      	lsrs	r3, r3, #20
 8004fc0:	051b      	lsls	r3, r3, #20
 8004fc2:	b12b      	cbz	r3, 8004fd0 <_dtoa_r+0x7f0>
 8004fc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fc6:	f108 0801 	add.w	r8, r8, #1
 8004fca:	3301      	adds	r3, #1
 8004fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fce:	2301      	movs	r3, #1
 8004fd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 81aa 	beq.w	800532e <_dtoa_r+0xb4e>
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004fe0:	6918      	ldr	r0, [r3, #16]
 8004fe2:	f000 fb6b 	bl	80056bc <__hi0bits>
 8004fe6:	f1c0 0020 	rsb	r0, r0, #32
 8004fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fec:	4418      	add	r0, r3
 8004fee:	f010 001f 	ands.w	r0, r0, #31
 8004ff2:	d071      	beq.n	80050d8 <_dtoa_r+0x8f8>
 8004ff4:	f1c0 0320 	rsb	r3, r0, #32
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	dd65      	ble.n	80050c8 <_dtoa_r+0x8e8>
 8004ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ffe:	f1c0 001c 	rsb	r0, r0, #28
 8005002:	4403      	add	r3, r0
 8005004:	4480      	add	r8, r0
 8005006:	4406      	add	r6, r0
 8005008:	9309      	str	r3, [sp, #36]	@ 0x24
 800500a:	f1b8 0f00 	cmp.w	r8, #0
 800500e:	dd05      	ble.n	800501c <_dtoa_r+0x83c>
 8005010:	4649      	mov	r1, r9
 8005012:	4642      	mov	r2, r8
 8005014:	4658      	mov	r0, fp
 8005016:	f000 fcb5 	bl	8005984 <__lshift>
 800501a:	4681      	mov	r9, r0
 800501c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	dd05      	ble.n	800502e <_dtoa_r+0x84e>
 8005022:	4621      	mov	r1, r4
 8005024:	461a      	mov	r2, r3
 8005026:	4658      	mov	r0, fp
 8005028:	f000 fcac 	bl	8005984 <__lshift>
 800502c:	4604      	mov	r4, r0
 800502e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d053      	beq.n	80050dc <_dtoa_r+0x8fc>
 8005034:	4621      	mov	r1, r4
 8005036:	4648      	mov	r0, r9
 8005038:	f000 fd10 	bl	8005a5c <__mcmp>
 800503c:	2800      	cmp	r0, #0
 800503e:	da4d      	bge.n	80050dc <_dtoa_r+0x8fc>
 8005040:	1e7b      	subs	r3, r7, #1
 8005042:	4649      	mov	r1, r9
 8005044:	9304      	str	r3, [sp, #16]
 8005046:	220a      	movs	r2, #10
 8005048:	2300      	movs	r3, #0
 800504a:	4658      	mov	r0, fp
 800504c:	f000 faf0 	bl	8005630 <__multadd>
 8005050:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005052:	4681      	mov	r9, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 816c 	beq.w	8005332 <_dtoa_r+0xb52>
 800505a:	2300      	movs	r3, #0
 800505c:	4629      	mov	r1, r5
 800505e:	220a      	movs	r2, #10
 8005060:	4658      	mov	r0, fp
 8005062:	f000 fae5 	bl	8005630 <__multadd>
 8005066:	9b08      	ldr	r3, [sp, #32]
 8005068:	4605      	mov	r5, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	dc61      	bgt.n	8005132 <_dtoa_r+0x952>
 800506e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005070:	2b02      	cmp	r3, #2
 8005072:	dc3b      	bgt.n	80050ec <_dtoa_r+0x90c>
 8005074:	e05d      	b.n	8005132 <_dtoa_r+0x952>
 8005076:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005078:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800507c:	e746      	b.n	8004f0c <_dtoa_r+0x72c>
 800507e:	9b07      	ldr	r3, [sp, #28]
 8005080:	1e5c      	subs	r4, r3, #1
 8005082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005084:	42a3      	cmp	r3, r4
 8005086:	bfbf      	itttt	lt
 8005088:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800508a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800508c:	1ae3      	sublt	r3, r4, r3
 800508e:	18d2      	addlt	r2, r2, r3
 8005090:	bfa8      	it	ge
 8005092:	1b1c      	subge	r4, r3, r4
 8005094:	9b07      	ldr	r3, [sp, #28]
 8005096:	bfbe      	ittt	lt
 8005098:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800509a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800509c:	2400      	movlt	r4, #0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bfb5      	itete	lt
 80050a2:	eba8 0603 	sublt.w	r6, r8, r3
 80050a6:	4646      	movge	r6, r8
 80050a8:	2300      	movlt	r3, #0
 80050aa:	9b07      	ldrge	r3, [sp, #28]
 80050ac:	e730      	b.n	8004f10 <_dtoa_r+0x730>
 80050ae:	4646      	mov	r6, r8
 80050b0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80050b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80050b4:	e735      	b.n	8004f22 <_dtoa_r+0x742>
 80050b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050b8:	e75c      	b.n	8004f74 <_dtoa_r+0x794>
 80050ba:	2300      	movs	r3, #0
 80050bc:	e788      	b.n	8004fd0 <_dtoa_r+0x7f0>
 80050be:	9b02      	ldr	r3, [sp, #8]
 80050c0:	e786      	b.n	8004fd0 <_dtoa_r+0x7f0>
 80050c2:	2300      	movs	r3, #0
 80050c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80050c6:	e788      	b.n	8004fda <_dtoa_r+0x7fa>
 80050c8:	d09f      	beq.n	800500a <_dtoa_r+0x82a>
 80050ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050cc:	331c      	adds	r3, #28
 80050ce:	441a      	add	r2, r3
 80050d0:	4498      	add	r8, r3
 80050d2:	441e      	add	r6, r3
 80050d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80050d6:	e798      	b.n	800500a <_dtoa_r+0x82a>
 80050d8:	4603      	mov	r3, r0
 80050da:	e7f6      	b.n	80050ca <_dtoa_r+0x8ea>
 80050dc:	9b07      	ldr	r3, [sp, #28]
 80050de:	9704      	str	r7, [sp, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	dc20      	bgt.n	8005126 <_dtoa_r+0x946>
 80050e4:	9308      	str	r3, [sp, #32]
 80050e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	dd1e      	ble.n	800512a <_dtoa_r+0x94a>
 80050ec:	9b08      	ldr	r3, [sp, #32]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f47f aebc 	bne.w	8004e6c <_dtoa_r+0x68c>
 80050f4:	4621      	mov	r1, r4
 80050f6:	2205      	movs	r2, #5
 80050f8:	4658      	mov	r0, fp
 80050fa:	f000 fa99 	bl	8005630 <__multadd>
 80050fe:	4601      	mov	r1, r0
 8005100:	4604      	mov	r4, r0
 8005102:	4648      	mov	r0, r9
 8005104:	f000 fcaa 	bl	8005a5c <__mcmp>
 8005108:	2800      	cmp	r0, #0
 800510a:	f77f aeaf 	ble.w	8004e6c <_dtoa_r+0x68c>
 800510e:	2331      	movs	r3, #49	@ 0x31
 8005110:	4656      	mov	r6, sl
 8005112:	f806 3b01 	strb.w	r3, [r6], #1
 8005116:	9b04      	ldr	r3, [sp, #16]
 8005118:	3301      	adds	r3, #1
 800511a:	9304      	str	r3, [sp, #16]
 800511c:	e6aa      	b.n	8004e74 <_dtoa_r+0x694>
 800511e:	9c07      	ldr	r4, [sp, #28]
 8005120:	9704      	str	r7, [sp, #16]
 8005122:	4625      	mov	r5, r4
 8005124:	e7f3      	b.n	800510e <_dtoa_r+0x92e>
 8005126:	9b07      	ldr	r3, [sp, #28]
 8005128:	9308      	str	r3, [sp, #32]
 800512a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8104 	beq.w	800533a <_dtoa_r+0xb5a>
 8005132:	2e00      	cmp	r6, #0
 8005134:	dd05      	ble.n	8005142 <_dtoa_r+0x962>
 8005136:	4629      	mov	r1, r5
 8005138:	4632      	mov	r2, r6
 800513a:	4658      	mov	r0, fp
 800513c:	f000 fc22 	bl	8005984 <__lshift>
 8005140:	4605      	mov	r5, r0
 8005142:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005144:	2b00      	cmp	r3, #0
 8005146:	d05a      	beq.n	80051fe <_dtoa_r+0xa1e>
 8005148:	4658      	mov	r0, fp
 800514a:	6869      	ldr	r1, [r5, #4]
 800514c:	f000 fa0e 	bl	800556c <_Balloc>
 8005150:	4606      	mov	r6, r0
 8005152:	b928      	cbnz	r0, 8005160 <_dtoa_r+0x980>
 8005154:	4602      	mov	r2, r0
 8005156:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800515a:	4b83      	ldr	r3, [pc, #524]	@ (8005368 <_dtoa_r+0xb88>)
 800515c:	f7ff bb54 	b.w	8004808 <_dtoa_r+0x28>
 8005160:	692a      	ldr	r2, [r5, #16]
 8005162:	f105 010c 	add.w	r1, r5, #12
 8005166:	3202      	adds	r2, #2
 8005168:	0092      	lsls	r2, r2, #2
 800516a:	300c      	adds	r0, #12
 800516c:	f001 f80a 	bl	8006184 <memcpy>
 8005170:	2201      	movs	r2, #1
 8005172:	4631      	mov	r1, r6
 8005174:	4658      	mov	r0, fp
 8005176:	f000 fc05 	bl	8005984 <__lshift>
 800517a:	462f      	mov	r7, r5
 800517c:	4605      	mov	r5, r0
 800517e:	f10a 0301 	add.w	r3, sl, #1
 8005182:	9307      	str	r3, [sp, #28]
 8005184:	9b08      	ldr	r3, [sp, #32]
 8005186:	4453      	add	r3, sl
 8005188:	930b      	str	r3, [sp, #44]	@ 0x2c
 800518a:	9b02      	ldr	r3, [sp, #8]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	930a      	str	r3, [sp, #40]	@ 0x28
 8005192:	9b07      	ldr	r3, [sp, #28]
 8005194:	4621      	mov	r1, r4
 8005196:	3b01      	subs	r3, #1
 8005198:	4648      	mov	r0, r9
 800519a:	9302      	str	r3, [sp, #8]
 800519c:	f7ff fa95 	bl	80046ca <quorem>
 80051a0:	4639      	mov	r1, r7
 80051a2:	9008      	str	r0, [sp, #32]
 80051a4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80051a8:	4648      	mov	r0, r9
 80051aa:	f000 fc57 	bl	8005a5c <__mcmp>
 80051ae:	462a      	mov	r2, r5
 80051b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80051b2:	4621      	mov	r1, r4
 80051b4:	4658      	mov	r0, fp
 80051b6:	f000 fc6d 	bl	8005a94 <__mdiff>
 80051ba:	68c2      	ldr	r2, [r0, #12]
 80051bc:	4606      	mov	r6, r0
 80051be:	bb02      	cbnz	r2, 8005202 <_dtoa_r+0xa22>
 80051c0:	4601      	mov	r1, r0
 80051c2:	4648      	mov	r0, r9
 80051c4:	f000 fc4a 	bl	8005a5c <__mcmp>
 80051c8:	4602      	mov	r2, r0
 80051ca:	4631      	mov	r1, r6
 80051cc:	4658      	mov	r0, fp
 80051ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80051d0:	f000 fa0c 	bl	80055ec <_Bfree>
 80051d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80051d8:	9e07      	ldr	r6, [sp, #28]
 80051da:	ea43 0102 	orr.w	r1, r3, r2
 80051de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051e0:	4319      	orrs	r1, r3
 80051e2:	d110      	bne.n	8005206 <_dtoa_r+0xa26>
 80051e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80051e8:	d029      	beq.n	800523e <_dtoa_r+0xa5e>
 80051ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	dd02      	ble.n	80051f6 <_dtoa_r+0xa16>
 80051f0:	9b08      	ldr	r3, [sp, #32]
 80051f2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80051f6:	9b02      	ldr	r3, [sp, #8]
 80051f8:	f883 8000 	strb.w	r8, [r3]
 80051fc:	e63b      	b.n	8004e76 <_dtoa_r+0x696>
 80051fe:	4628      	mov	r0, r5
 8005200:	e7bb      	b.n	800517a <_dtoa_r+0x99a>
 8005202:	2201      	movs	r2, #1
 8005204:	e7e1      	b.n	80051ca <_dtoa_r+0x9ea>
 8005206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005208:	2b00      	cmp	r3, #0
 800520a:	db04      	blt.n	8005216 <_dtoa_r+0xa36>
 800520c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800520e:	430b      	orrs	r3, r1
 8005210:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005212:	430b      	orrs	r3, r1
 8005214:	d120      	bne.n	8005258 <_dtoa_r+0xa78>
 8005216:	2a00      	cmp	r2, #0
 8005218:	dded      	ble.n	80051f6 <_dtoa_r+0xa16>
 800521a:	4649      	mov	r1, r9
 800521c:	2201      	movs	r2, #1
 800521e:	4658      	mov	r0, fp
 8005220:	f000 fbb0 	bl	8005984 <__lshift>
 8005224:	4621      	mov	r1, r4
 8005226:	4681      	mov	r9, r0
 8005228:	f000 fc18 	bl	8005a5c <__mcmp>
 800522c:	2800      	cmp	r0, #0
 800522e:	dc03      	bgt.n	8005238 <_dtoa_r+0xa58>
 8005230:	d1e1      	bne.n	80051f6 <_dtoa_r+0xa16>
 8005232:	f018 0f01 	tst.w	r8, #1
 8005236:	d0de      	beq.n	80051f6 <_dtoa_r+0xa16>
 8005238:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800523c:	d1d8      	bne.n	80051f0 <_dtoa_r+0xa10>
 800523e:	2339      	movs	r3, #57	@ 0x39
 8005240:	9a02      	ldr	r2, [sp, #8]
 8005242:	7013      	strb	r3, [r2, #0]
 8005244:	4633      	mov	r3, r6
 8005246:	461e      	mov	r6, r3
 8005248:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800524c:	3b01      	subs	r3, #1
 800524e:	2a39      	cmp	r2, #57	@ 0x39
 8005250:	d052      	beq.n	80052f8 <_dtoa_r+0xb18>
 8005252:	3201      	adds	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	e60e      	b.n	8004e76 <_dtoa_r+0x696>
 8005258:	2a00      	cmp	r2, #0
 800525a:	dd07      	ble.n	800526c <_dtoa_r+0xa8c>
 800525c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005260:	d0ed      	beq.n	800523e <_dtoa_r+0xa5e>
 8005262:	9a02      	ldr	r2, [sp, #8]
 8005264:	f108 0301 	add.w	r3, r8, #1
 8005268:	7013      	strb	r3, [r2, #0]
 800526a:	e604      	b.n	8004e76 <_dtoa_r+0x696>
 800526c:	9b07      	ldr	r3, [sp, #28]
 800526e:	9a07      	ldr	r2, [sp, #28]
 8005270:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005276:	4293      	cmp	r3, r2
 8005278:	d028      	beq.n	80052cc <_dtoa_r+0xaec>
 800527a:	4649      	mov	r1, r9
 800527c:	2300      	movs	r3, #0
 800527e:	220a      	movs	r2, #10
 8005280:	4658      	mov	r0, fp
 8005282:	f000 f9d5 	bl	8005630 <__multadd>
 8005286:	42af      	cmp	r7, r5
 8005288:	4681      	mov	r9, r0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	f04f 020a 	mov.w	r2, #10
 8005292:	4639      	mov	r1, r7
 8005294:	4658      	mov	r0, fp
 8005296:	d107      	bne.n	80052a8 <_dtoa_r+0xac8>
 8005298:	f000 f9ca 	bl	8005630 <__multadd>
 800529c:	4607      	mov	r7, r0
 800529e:	4605      	mov	r5, r0
 80052a0:	9b07      	ldr	r3, [sp, #28]
 80052a2:	3301      	adds	r3, #1
 80052a4:	9307      	str	r3, [sp, #28]
 80052a6:	e774      	b.n	8005192 <_dtoa_r+0x9b2>
 80052a8:	f000 f9c2 	bl	8005630 <__multadd>
 80052ac:	4629      	mov	r1, r5
 80052ae:	4607      	mov	r7, r0
 80052b0:	2300      	movs	r3, #0
 80052b2:	220a      	movs	r2, #10
 80052b4:	4658      	mov	r0, fp
 80052b6:	f000 f9bb 	bl	8005630 <__multadd>
 80052ba:	4605      	mov	r5, r0
 80052bc:	e7f0      	b.n	80052a0 <_dtoa_r+0xac0>
 80052be:	9b08      	ldr	r3, [sp, #32]
 80052c0:	2700      	movs	r7, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	bfcc      	ite	gt
 80052c6:	461e      	movgt	r6, r3
 80052c8:	2601      	movle	r6, #1
 80052ca:	4456      	add	r6, sl
 80052cc:	4649      	mov	r1, r9
 80052ce:	2201      	movs	r2, #1
 80052d0:	4658      	mov	r0, fp
 80052d2:	f000 fb57 	bl	8005984 <__lshift>
 80052d6:	4621      	mov	r1, r4
 80052d8:	4681      	mov	r9, r0
 80052da:	f000 fbbf 	bl	8005a5c <__mcmp>
 80052de:	2800      	cmp	r0, #0
 80052e0:	dcb0      	bgt.n	8005244 <_dtoa_r+0xa64>
 80052e2:	d102      	bne.n	80052ea <_dtoa_r+0xb0a>
 80052e4:	f018 0f01 	tst.w	r8, #1
 80052e8:	d1ac      	bne.n	8005244 <_dtoa_r+0xa64>
 80052ea:	4633      	mov	r3, r6
 80052ec:	461e      	mov	r6, r3
 80052ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052f2:	2a30      	cmp	r2, #48	@ 0x30
 80052f4:	d0fa      	beq.n	80052ec <_dtoa_r+0xb0c>
 80052f6:	e5be      	b.n	8004e76 <_dtoa_r+0x696>
 80052f8:	459a      	cmp	sl, r3
 80052fa:	d1a4      	bne.n	8005246 <_dtoa_r+0xa66>
 80052fc:	9b04      	ldr	r3, [sp, #16]
 80052fe:	3301      	adds	r3, #1
 8005300:	9304      	str	r3, [sp, #16]
 8005302:	2331      	movs	r3, #49	@ 0x31
 8005304:	f88a 3000 	strb.w	r3, [sl]
 8005308:	e5b5      	b.n	8004e76 <_dtoa_r+0x696>
 800530a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800530c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800536c <_dtoa_r+0xb8c>
 8005310:	b11b      	cbz	r3, 800531a <_dtoa_r+0xb3a>
 8005312:	f10a 0308 	add.w	r3, sl, #8
 8005316:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	4650      	mov	r0, sl
 800531c:	b017      	add	sp, #92	@ 0x5c
 800531e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005322:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005324:	2b01      	cmp	r3, #1
 8005326:	f77f ae3d 	ble.w	8004fa4 <_dtoa_r+0x7c4>
 800532a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800532c:	930a      	str	r3, [sp, #40]	@ 0x28
 800532e:	2001      	movs	r0, #1
 8005330:	e65b      	b.n	8004fea <_dtoa_r+0x80a>
 8005332:	9b08      	ldr	r3, [sp, #32]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f77f aed6 	ble.w	80050e6 <_dtoa_r+0x906>
 800533a:	4656      	mov	r6, sl
 800533c:	4621      	mov	r1, r4
 800533e:	4648      	mov	r0, r9
 8005340:	f7ff f9c3 	bl	80046ca <quorem>
 8005344:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005348:	9b08      	ldr	r3, [sp, #32]
 800534a:	f806 8b01 	strb.w	r8, [r6], #1
 800534e:	eba6 020a 	sub.w	r2, r6, sl
 8005352:	4293      	cmp	r3, r2
 8005354:	ddb3      	ble.n	80052be <_dtoa_r+0xade>
 8005356:	4649      	mov	r1, r9
 8005358:	2300      	movs	r3, #0
 800535a:	220a      	movs	r2, #10
 800535c:	4658      	mov	r0, fp
 800535e:	f000 f967 	bl	8005630 <__multadd>
 8005362:	4681      	mov	r9, r0
 8005364:	e7ea      	b.n	800533c <_dtoa_r+0xb5c>
 8005366:	bf00      	nop
 8005368:	08006732 	.word	0x08006732
 800536c:	080066b6 	.word	0x080066b6

08005370 <_free_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4605      	mov	r5, r0
 8005374:	2900      	cmp	r1, #0
 8005376:	d040      	beq.n	80053fa <_free_r+0x8a>
 8005378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800537c:	1f0c      	subs	r4, r1, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	bfb8      	it	lt
 8005382:	18e4      	addlt	r4, r4, r3
 8005384:	f000 f8e6 	bl	8005554 <__malloc_lock>
 8005388:	4a1c      	ldr	r2, [pc, #112]	@ (80053fc <_free_r+0x8c>)
 800538a:	6813      	ldr	r3, [r2, #0]
 800538c:	b933      	cbnz	r3, 800539c <_free_r+0x2c>
 800538e:	6063      	str	r3, [r4, #4]
 8005390:	6014      	str	r4, [r2, #0]
 8005392:	4628      	mov	r0, r5
 8005394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005398:	f000 b8e2 	b.w	8005560 <__malloc_unlock>
 800539c:	42a3      	cmp	r3, r4
 800539e:	d908      	bls.n	80053b2 <_free_r+0x42>
 80053a0:	6820      	ldr	r0, [r4, #0]
 80053a2:	1821      	adds	r1, r4, r0
 80053a4:	428b      	cmp	r3, r1
 80053a6:	bf01      	itttt	eq
 80053a8:	6819      	ldreq	r1, [r3, #0]
 80053aa:	685b      	ldreq	r3, [r3, #4]
 80053ac:	1809      	addeq	r1, r1, r0
 80053ae:	6021      	streq	r1, [r4, #0]
 80053b0:	e7ed      	b.n	800538e <_free_r+0x1e>
 80053b2:	461a      	mov	r2, r3
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	b10b      	cbz	r3, 80053bc <_free_r+0x4c>
 80053b8:	42a3      	cmp	r3, r4
 80053ba:	d9fa      	bls.n	80053b2 <_free_r+0x42>
 80053bc:	6811      	ldr	r1, [r2, #0]
 80053be:	1850      	adds	r0, r2, r1
 80053c0:	42a0      	cmp	r0, r4
 80053c2:	d10b      	bne.n	80053dc <_free_r+0x6c>
 80053c4:	6820      	ldr	r0, [r4, #0]
 80053c6:	4401      	add	r1, r0
 80053c8:	1850      	adds	r0, r2, r1
 80053ca:	4283      	cmp	r3, r0
 80053cc:	6011      	str	r1, [r2, #0]
 80053ce:	d1e0      	bne.n	8005392 <_free_r+0x22>
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4408      	add	r0, r1
 80053d6:	6010      	str	r0, [r2, #0]
 80053d8:	6053      	str	r3, [r2, #4]
 80053da:	e7da      	b.n	8005392 <_free_r+0x22>
 80053dc:	d902      	bls.n	80053e4 <_free_r+0x74>
 80053de:	230c      	movs	r3, #12
 80053e0:	602b      	str	r3, [r5, #0]
 80053e2:	e7d6      	b.n	8005392 <_free_r+0x22>
 80053e4:	6820      	ldr	r0, [r4, #0]
 80053e6:	1821      	adds	r1, r4, r0
 80053e8:	428b      	cmp	r3, r1
 80053ea:	bf01      	itttt	eq
 80053ec:	6819      	ldreq	r1, [r3, #0]
 80053ee:	685b      	ldreq	r3, [r3, #4]
 80053f0:	1809      	addeq	r1, r1, r0
 80053f2:	6021      	streq	r1, [r4, #0]
 80053f4:	6063      	str	r3, [r4, #4]
 80053f6:	6054      	str	r4, [r2, #4]
 80053f8:	e7cb      	b.n	8005392 <_free_r+0x22>
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	20000418 	.word	0x20000418

08005400 <malloc>:
 8005400:	4b02      	ldr	r3, [pc, #8]	@ (800540c <malloc+0xc>)
 8005402:	4601      	mov	r1, r0
 8005404:	6818      	ldr	r0, [r3, #0]
 8005406:	f000 b825 	b.w	8005454 <_malloc_r>
 800540a:	bf00      	nop
 800540c:	20000018 	.word	0x20000018

08005410 <sbrk_aligned>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4e0f      	ldr	r6, [pc, #60]	@ (8005450 <sbrk_aligned+0x40>)
 8005414:	460c      	mov	r4, r1
 8005416:	6831      	ldr	r1, [r6, #0]
 8005418:	4605      	mov	r5, r0
 800541a:	b911      	cbnz	r1, 8005422 <sbrk_aligned+0x12>
 800541c:	f000 fea2 	bl	8006164 <_sbrk_r>
 8005420:	6030      	str	r0, [r6, #0]
 8005422:	4621      	mov	r1, r4
 8005424:	4628      	mov	r0, r5
 8005426:	f000 fe9d 	bl	8006164 <_sbrk_r>
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	d103      	bne.n	8005436 <sbrk_aligned+0x26>
 800542e:	f04f 34ff 	mov.w	r4, #4294967295
 8005432:	4620      	mov	r0, r4
 8005434:	bd70      	pop	{r4, r5, r6, pc}
 8005436:	1cc4      	adds	r4, r0, #3
 8005438:	f024 0403 	bic.w	r4, r4, #3
 800543c:	42a0      	cmp	r0, r4
 800543e:	d0f8      	beq.n	8005432 <sbrk_aligned+0x22>
 8005440:	1a21      	subs	r1, r4, r0
 8005442:	4628      	mov	r0, r5
 8005444:	f000 fe8e 	bl	8006164 <_sbrk_r>
 8005448:	3001      	adds	r0, #1
 800544a:	d1f2      	bne.n	8005432 <sbrk_aligned+0x22>
 800544c:	e7ef      	b.n	800542e <sbrk_aligned+0x1e>
 800544e:	bf00      	nop
 8005450:	20000414 	.word	0x20000414

08005454 <_malloc_r>:
 8005454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005458:	1ccd      	adds	r5, r1, #3
 800545a:	f025 0503 	bic.w	r5, r5, #3
 800545e:	3508      	adds	r5, #8
 8005460:	2d0c      	cmp	r5, #12
 8005462:	bf38      	it	cc
 8005464:	250c      	movcc	r5, #12
 8005466:	2d00      	cmp	r5, #0
 8005468:	4606      	mov	r6, r0
 800546a:	db01      	blt.n	8005470 <_malloc_r+0x1c>
 800546c:	42a9      	cmp	r1, r5
 800546e:	d904      	bls.n	800547a <_malloc_r+0x26>
 8005470:	230c      	movs	r3, #12
 8005472:	6033      	str	r3, [r6, #0]
 8005474:	2000      	movs	r0, #0
 8005476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800547a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005550 <_malloc_r+0xfc>
 800547e:	f000 f869 	bl	8005554 <__malloc_lock>
 8005482:	f8d8 3000 	ldr.w	r3, [r8]
 8005486:	461c      	mov	r4, r3
 8005488:	bb44      	cbnz	r4, 80054dc <_malloc_r+0x88>
 800548a:	4629      	mov	r1, r5
 800548c:	4630      	mov	r0, r6
 800548e:	f7ff ffbf 	bl	8005410 <sbrk_aligned>
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	4604      	mov	r4, r0
 8005496:	d158      	bne.n	800554a <_malloc_r+0xf6>
 8005498:	f8d8 4000 	ldr.w	r4, [r8]
 800549c:	4627      	mov	r7, r4
 800549e:	2f00      	cmp	r7, #0
 80054a0:	d143      	bne.n	800552a <_malloc_r+0xd6>
 80054a2:	2c00      	cmp	r4, #0
 80054a4:	d04b      	beq.n	800553e <_malloc_r+0xea>
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	4639      	mov	r1, r7
 80054aa:	4630      	mov	r0, r6
 80054ac:	eb04 0903 	add.w	r9, r4, r3
 80054b0:	f000 fe58 	bl	8006164 <_sbrk_r>
 80054b4:	4581      	cmp	r9, r0
 80054b6:	d142      	bne.n	800553e <_malloc_r+0xea>
 80054b8:	6821      	ldr	r1, [r4, #0]
 80054ba:	4630      	mov	r0, r6
 80054bc:	1a6d      	subs	r5, r5, r1
 80054be:	4629      	mov	r1, r5
 80054c0:	f7ff ffa6 	bl	8005410 <sbrk_aligned>
 80054c4:	3001      	adds	r0, #1
 80054c6:	d03a      	beq.n	800553e <_malloc_r+0xea>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	442b      	add	r3, r5
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	f8d8 3000 	ldr.w	r3, [r8]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	bb62      	cbnz	r2, 8005530 <_malloc_r+0xdc>
 80054d6:	f8c8 7000 	str.w	r7, [r8]
 80054da:	e00f      	b.n	80054fc <_malloc_r+0xa8>
 80054dc:	6822      	ldr	r2, [r4, #0]
 80054de:	1b52      	subs	r2, r2, r5
 80054e0:	d420      	bmi.n	8005524 <_malloc_r+0xd0>
 80054e2:	2a0b      	cmp	r2, #11
 80054e4:	d917      	bls.n	8005516 <_malloc_r+0xc2>
 80054e6:	1961      	adds	r1, r4, r5
 80054e8:	42a3      	cmp	r3, r4
 80054ea:	6025      	str	r5, [r4, #0]
 80054ec:	bf18      	it	ne
 80054ee:	6059      	strne	r1, [r3, #4]
 80054f0:	6863      	ldr	r3, [r4, #4]
 80054f2:	bf08      	it	eq
 80054f4:	f8c8 1000 	streq.w	r1, [r8]
 80054f8:	5162      	str	r2, [r4, r5]
 80054fa:	604b      	str	r3, [r1, #4]
 80054fc:	4630      	mov	r0, r6
 80054fe:	f000 f82f 	bl	8005560 <__malloc_unlock>
 8005502:	f104 000b 	add.w	r0, r4, #11
 8005506:	1d23      	adds	r3, r4, #4
 8005508:	f020 0007 	bic.w	r0, r0, #7
 800550c:	1ac2      	subs	r2, r0, r3
 800550e:	bf1c      	itt	ne
 8005510:	1a1b      	subne	r3, r3, r0
 8005512:	50a3      	strne	r3, [r4, r2]
 8005514:	e7af      	b.n	8005476 <_malloc_r+0x22>
 8005516:	6862      	ldr	r2, [r4, #4]
 8005518:	42a3      	cmp	r3, r4
 800551a:	bf0c      	ite	eq
 800551c:	f8c8 2000 	streq.w	r2, [r8]
 8005520:	605a      	strne	r2, [r3, #4]
 8005522:	e7eb      	b.n	80054fc <_malloc_r+0xa8>
 8005524:	4623      	mov	r3, r4
 8005526:	6864      	ldr	r4, [r4, #4]
 8005528:	e7ae      	b.n	8005488 <_malloc_r+0x34>
 800552a:	463c      	mov	r4, r7
 800552c:	687f      	ldr	r7, [r7, #4]
 800552e:	e7b6      	b.n	800549e <_malloc_r+0x4a>
 8005530:	461a      	mov	r2, r3
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	42a3      	cmp	r3, r4
 8005536:	d1fb      	bne.n	8005530 <_malloc_r+0xdc>
 8005538:	2300      	movs	r3, #0
 800553a:	6053      	str	r3, [r2, #4]
 800553c:	e7de      	b.n	80054fc <_malloc_r+0xa8>
 800553e:	230c      	movs	r3, #12
 8005540:	4630      	mov	r0, r6
 8005542:	6033      	str	r3, [r6, #0]
 8005544:	f000 f80c 	bl	8005560 <__malloc_unlock>
 8005548:	e794      	b.n	8005474 <_malloc_r+0x20>
 800554a:	6005      	str	r5, [r0, #0]
 800554c:	e7d6      	b.n	80054fc <_malloc_r+0xa8>
 800554e:	bf00      	nop
 8005550:	20000418 	.word	0x20000418

08005554 <__malloc_lock>:
 8005554:	4801      	ldr	r0, [pc, #4]	@ (800555c <__malloc_lock+0x8>)
 8005556:	f7ff b8a8 	b.w	80046aa <__retarget_lock_acquire_recursive>
 800555a:	bf00      	nop
 800555c:	20000410 	.word	0x20000410

08005560 <__malloc_unlock>:
 8005560:	4801      	ldr	r0, [pc, #4]	@ (8005568 <__malloc_unlock+0x8>)
 8005562:	f7ff b8a3 	b.w	80046ac <__retarget_lock_release_recursive>
 8005566:	bf00      	nop
 8005568:	20000410 	.word	0x20000410

0800556c <_Balloc>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	69c6      	ldr	r6, [r0, #28]
 8005570:	4604      	mov	r4, r0
 8005572:	460d      	mov	r5, r1
 8005574:	b976      	cbnz	r6, 8005594 <_Balloc+0x28>
 8005576:	2010      	movs	r0, #16
 8005578:	f7ff ff42 	bl	8005400 <malloc>
 800557c:	4602      	mov	r2, r0
 800557e:	61e0      	str	r0, [r4, #28]
 8005580:	b920      	cbnz	r0, 800558c <_Balloc+0x20>
 8005582:	216b      	movs	r1, #107	@ 0x6b
 8005584:	4b17      	ldr	r3, [pc, #92]	@ (80055e4 <_Balloc+0x78>)
 8005586:	4818      	ldr	r0, [pc, #96]	@ (80055e8 <_Balloc+0x7c>)
 8005588:	f000 fe0a 	bl	80061a0 <__assert_func>
 800558c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005590:	6006      	str	r6, [r0, #0]
 8005592:	60c6      	str	r6, [r0, #12]
 8005594:	69e6      	ldr	r6, [r4, #28]
 8005596:	68f3      	ldr	r3, [r6, #12]
 8005598:	b183      	cbz	r3, 80055bc <_Balloc+0x50>
 800559a:	69e3      	ldr	r3, [r4, #28]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055a2:	b9b8      	cbnz	r0, 80055d4 <_Balloc+0x68>
 80055a4:	2101      	movs	r1, #1
 80055a6:	fa01 f605 	lsl.w	r6, r1, r5
 80055aa:	1d72      	adds	r2, r6, #5
 80055ac:	4620      	mov	r0, r4
 80055ae:	0092      	lsls	r2, r2, #2
 80055b0:	f000 fe14 	bl	80061dc <_calloc_r>
 80055b4:	b160      	cbz	r0, 80055d0 <_Balloc+0x64>
 80055b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80055ba:	e00e      	b.n	80055da <_Balloc+0x6e>
 80055bc:	2221      	movs	r2, #33	@ 0x21
 80055be:	2104      	movs	r1, #4
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fe0b 	bl	80061dc <_calloc_r>
 80055c6:	69e3      	ldr	r3, [r4, #28]
 80055c8:	60f0      	str	r0, [r6, #12]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e4      	bne.n	800559a <_Balloc+0x2e>
 80055d0:	2000      	movs	r0, #0
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	6802      	ldr	r2, [r0, #0]
 80055d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055da:	2300      	movs	r3, #0
 80055dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055e0:	e7f7      	b.n	80055d2 <_Balloc+0x66>
 80055e2:	bf00      	nop
 80055e4:	080066c3 	.word	0x080066c3
 80055e8:	08006743 	.word	0x08006743

080055ec <_Bfree>:
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	69c6      	ldr	r6, [r0, #28]
 80055f0:	4605      	mov	r5, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	b976      	cbnz	r6, 8005614 <_Bfree+0x28>
 80055f6:	2010      	movs	r0, #16
 80055f8:	f7ff ff02 	bl	8005400 <malloc>
 80055fc:	4602      	mov	r2, r0
 80055fe:	61e8      	str	r0, [r5, #28]
 8005600:	b920      	cbnz	r0, 800560c <_Bfree+0x20>
 8005602:	218f      	movs	r1, #143	@ 0x8f
 8005604:	4b08      	ldr	r3, [pc, #32]	@ (8005628 <_Bfree+0x3c>)
 8005606:	4809      	ldr	r0, [pc, #36]	@ (800562c <_Bfree+0x40>)
 8005608:	f000 fdca 	bl	80061a0 <__assert_func>
 800560c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005610:	6006      	str	r6, [r0, #0]
 8005612:	60c6      	str	r6, [r0, #12]
 8005614:	b13c      	cbz	r4, 8005626 <_Bfree+0x3a>
 8005616:	69eb      	ldr	r3, [r5, #28]
 8005618:	6862      	ldr	r2, [r4, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005620:	6021      	str	r1, [r4, #0]
 8005622:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005626:	bd70      	pop	{r4, r5, r6, pc}
 8005628:	080066c3 	.word	0x080066c3
 800562c:	08006743 	.word	0x08006743

08005630 <__multadd>:
 8005630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005634:	4607      	mov	r7, r0
 8005636:	460c      	mov	r4, r1
 8005638:	461e      	mov	r6, r3
 800563a:	2000      	movs	r0, #0
 800563c:	690d      	ldr	r5, [r1, #16]
 800563e:	f101 0c14 	add.w	ip, r1, #20
 8005642:	f8dc 3000 	ldr.w	r3, [ip]
 8005646:	3001      	adds	r0, #1
 8005648:	b299      	uxth	r1, r3
 800564a:	fb02 6101 	mla	r1, r2, r1, r6
 800564e:	0c1e      	lsrs	r6, r3, #16
 8005650:	0c0b      	lsrs	r3, r1, #16
 8005652:	fb02 3306 	mla	r3, r2, r6, r3
 8005656:	b289      	uxth	r1, r1
 8005658:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800565c:	4285      	cmp	r5, r0
 800565e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005662:	f84c 1b04 	str.w	r1, [ip], #4
 8005666:	dcec      	bgt.n	8005642 <__multadd+0x12>
 8005668:	b30e      	cbz	r6, 80056ae <__multadd+0x7e>
 800566a:	68a3      	ldr	r3, [r4, #8]
 800566c:	42ab      	cmp	r3, r5
 800566e:	dc19      	bgt.n	80056a4 <__multadd+0x74>
 8005670:	6861      	ldr	r1, [r4, #4]
 8005672:	4638      	mov	r0, r7
 8005674:	3101      	adds	r1, #1
 8005676:	f7ff ff79 	bl	800556c <_Balloc>
 800567a:	4680      	mov	r8, r0
 800567c:	b928      	cbnz	r0, 800568a <__multadd+0x5a>
 800567e:	4602      	mov	r2, r0
 8005680:	21ba      	movs	r1, #186	@ 0xba
 8005682:	4b0c      	ldr	r3, [pc, #48]	@ (80056b4 <__multadd+0x84>)
 8005684:	480c      	ldr	r0, [pc, #48]	@ (80056b8 <__multadd+0x88>)
 8005686:	f000 fd8b 	bl	80061a0 <__assert_func>
 800568a:	6922      	ldr	r2, [r4, #16]
 800568c:	f104 010c 	add.w	r1, r4, #12
 8005690:	3202      	adds	r2, #2
 8005692:	0092      	lsls	r2, r2, #2
 8005694:	300c      	adds	r0, #12
 8005696:	f000 fd75 	bl	8006184 <memcpy>
 800569a:	4621      	mov	r1, r4
 800569c:	4638      	mov	r0, r7
 800569e:	f7ff ffa5 	bl	80055ec <_Bfree>
 80056a2:	4644      	mov	r4, r8
 80056a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80056a8:	3501      	adds	r5, #1
 80056aa:	615e      	str	r6, [r3, #20]
 80056ac:	6125      	str	r5, [r4, #16]
 80056ae:	4620      	mov	r0, r4
 80056b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b4:	08006732 	.word	0x08006732
 80056b8:	08006743 	.word	0x08006743

080056bc <__hi0bits>:
 80056bc:	4603      	mov	r3, r0
 80056be:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80056c2:	bf3a      	itte	cc
 80056c4:	0403      	lslcc	r3, r0, #16
 80056c6:	2010      	movcc	r0, #16
 80056c8:	2000      	movcs	r0, #0
 80056ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056ce:	bf3c      	itt	cc
 80056d0:	021b      	lslcc	r3, r3, #8
 80056d2:	3008      	addcc	r0, #8
 80056d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056d8:	bf3c      	itt	cc
 80056da:	011b      	lslcc	r3, r3, #4
 80056dc:	3004      	addcc	r0, #4
 80056de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e2:	bf3c      	itt	cc
 80056e4:	009b      	lslcc	r3, r3, #2
 80056e6:	3002      	addcc	r0, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	db05      	blt.n	80056f8 <__hi0bits+0x3c>
 80056ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80056f0:	f100 0001 	add.w	r0, r0, #1
 80056f4:	bf08      	it	eq
 80056f6:	2020      	moveq	r0, #32
 80056f8:	4770      	bx	lr

080056fa <__lo0bits>:
 80056fa:	6803      	ldr	r3, [r0, #0]
 80056fc:	4602      	mov	r2, r0
 80056fe:	f013 0007 	ands.w	r0, r3, #7
 8005702:	d00b      	beq.n	800571c <__lo0bits+0x22>
 8005704:	07d9      	lsls	r1, r3, #31
 8005706:	d421      	bmi.n	800574c <__lo0bits+0x52>
 8005708:	0798      	lsls	r0, r3, #30
 800570a:	bf49      	itett	mi
 800570c:	085b      	lsrmi	r3, r3, #1
 800570e:	089b      	lsrpl	r3, r3, #2
 8005710:	2001      	movmi	r0, #1
 8005712:	6013      	strmi	r3, [r2, #0]
 8005714:	bf5c      	itt	pl
 8005716:	2002      	movpl	r0, #2
 8005718:	6013      	strpl	r3, [r2, #0]
 800571a:	4770      	bx	lr
 800571c:	b299      	uxth	r1, r3
 800571e:	b909      	cbnz	r1, 8005724 <__lo0bits+0x2a>
 8005720:	2010      	movs	r0, #16
 8005722:	0c1b      	lsrs	r3, r3, #16
 8005724:	b2d9      	uxtb	r1, r3
 8005726:	b909      	cbnz	r1, 800572c <__lo0bits+0x32>
 8005728:	3008      	adds	r0, #8
 800572a:	0a1b      	lsrs	r3, r3, #8
 800572c:	0719      	lsls	r1, r3, #28
 800572e:	bf04      	itt	eq
 8005730:	091b      	lsreq	r3, r3, #4
 8005732:	3004      	addeq	r0, #4
 8005734:	0799      	lsls	r1, r3, #30
 8005736:	bf04      	itt	eq
 8005738:	089b      	lsreq	r3, r3, #2
 800573a:	3002      	addeq	r0, #2
 800573c:	07d9      	lsls	r1, r3, #31
 800573e:	d403      	bmi.n	8005748 <__lo0bits+0x4e>
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	f100 0001 	add.w	r0, r0, #1
 8005746:	d003      	beq.n	8005750 <__lo0bits+0x56>
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	4770      	bx	lr
 800574c:	2000      	movs	r0, #0
 800574e:	4770      	bx	lr
 8005750:	2020      	movs	r0, #32
 8005752:	4770      	bx	lr

08005754 <__i2b>:
 8005754:	b510      	push	{r4, lr}
 8005756:	460c      	mov	r4, r1
 8005758:	2101      	movs	r1, #1
 800575a:	f7ff ff07 	bl	800556c <_Balloc>
 800575e:	4602      	mov	r2, r0
 8005760:	b928      	cbnz	r0, 800576e <__i2b+0x1a>
 8005762:	f240 1145 	movw	r1, #325	@ 0x145
 8005766:	4b04      	ldr	r3, [pc, #16]	@ (8005778 <__i2b+0x24>)
 8005768:	4804      	ldr	r0, [pc, #16]	@ (800577c <__i2b+0x28>)
 800576a:	f000 fd19 	bl	80061a0 <__assert_func>
 800576e:	2301      	movs	r3, #1
 8005770:	6144      	str	r4, [r0, #20]
 8005772:	6103      	str	r3, [r0, #16]
 8005774:	bd10      	pop	{r4, pc}
 8005776:	bf00      	nop
 8005778:	08006732 	.word	0x08006732
 800577c:	08006743 	.word	0x08006743

08005780 <__multiply>:
 8005780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	4614      	mov	r4, r2
 8005786:	690a      	ldr	r2, [r1, #16]
 8005788:	6923      	ldr	r3, [r4, #16]
 800578a:	460f      	mov	r7, r1
 800578c:	429a      	cmp	r2, r3
 800578e:	bfa2      	ittt	ge
 8005790:	4623      	movge	r3, r4
 8005792:	460c      	movge	r4, r1
 8005794:	461f      	movge	r7, r3
 8005796:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800579a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800579e:	68a3      	ldr	r3, [r4, #8]
 80057a0:	6861      	ldr	r1, [r4, #4]
 80057a2:	eb0a 0609 	add.w	r6, sl, r9
 80057a6:	42b3      	cmp	r3, r6
 80057a8:	b085      	sub	sp, #20
 80057aa:	bfb8      	it	lt
 80057ac:	3101      	addlt	r1, #1
 80057ae:	f7ff fedd 	bl	800556c <_Balloc>
 80057b2:	b930      	cbnz	r0, 80057c2 <__multiply+0x42>
 80057b4:	4602      	mov	r2, r0
 80057b6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80057ba:	4b43      	ldr	r3, [pc, #268]	@ (80058c8 <__multiply+0x148>)
 80057bc:	4843      	ldr	r0, [pc, #268]	@ (80058cc <__multiply+0x14c>)
 80057be:	f000 fcef 	bl	80061a0 <__assert_func>
 80057c2:	f100 0514 	add.w	r5, r0, #20
 80057c6:	462b      	mov	r3, r5
 80057c8:	2200      	movs	r2, #0
 80057ca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80057ce:	4543      	cmp	r3, r8
 80057d0:	d321      	bcc.n	8005816 <__multiply+0x96>
 80057d2:	f107 0114 	add.w	r1, r7, #20
 80057d6:	f104 0214 	add.w	r2, r4, #20
 80057da:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80057de:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80057e2:	9302      	str	r3, [sp, #8]
 80057e4:	1b13      	subs	r3, r2, r4
 80057e6:	3b15      	subs	r3, #21
 80057e8:	f023 0303 	bic.w	r3, r3, #3
 80057ec:	3304      	adds	r3, #4
 80057ee:	f104 0715 	add.w	r7, r4, #21
 80057f2:	42ba      	cmp	r2, r7
 80057f4:	bf38      	it	cc
 80057f6:	2304      	movcc	r3, #4
 80057f8:	9301      	str	r3, [sp, #4]
 80057fa:	9b02      	ldr	r3, [sp, #8]
 80057fc:	9103      	str	r1, [sp, #12]
 80057fe:	428b      	cmp	r3, r1
 8005800:	d80c      	bhi.n	800581c <__multiply+0x9c>
 8005802:	2e00      	cmp	r6, #0
 8005804:	dd03      	ble.n	800580e <__multiply+0x8e>
 8005806:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800580a:	2b00      	cmp	r3, #0
 800580c:	d05a      	beq.n	80058c4 <__multiply+0x144>
 800580e:	6106      	str	r6, [r0, #16]
 8005810:	b005      	add	sp, #20
 8005812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005816:	f843 2b04 	str.w	r2, [r3], #4
 800581a:	e7d8      	b.n	80057ce <__multiply+0x4e>
 800581c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005820:	f1ba 0f00 	cmp.w	sl, #0
 8005824:	d023      	beq.n	800586e <__multiply+0xee>
 8005826:	46a9      	mov	r9, r5
 8005828:	f04f 0c00 	mov.w	ip, #0
 800582c:	f104 0e14 	add.w	lr, r4, #20
 8005830:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005834:	f8d9 3000 	ldr.w	r3, [r9]
 8005838:	fa1f fb87 	uxth.w	fp, r7
 800583c:	b29b      	uxth	r3, r3
 800583e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005842:	4463      	add	r3, ip
 8005844:	f8d9 c000 	ldr.w	ip, [r9]
 8005848:	0c3f      	lsrs	r7, r7, #16
 800584a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800584e:	fb0a c707 	mla	r7, sl, r7, ip
 8005852:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005856:	b29b      	uxth	r3, r3
 8005858:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800585c:	4572      	cmp	r2, lr
 800585e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005862:	f849 3b04 	str.w	r3, [r9], #4
 8005866:	d8e3      	bhi.n	8005830 <__multiply+0xb0>
 8005868:	9b01      	ldr	r3, [sp, #4]
 800586a:	f845 c003 	str.w	ip, [r5, r3]
 800586e:	9b03      	ldr	r3, [sp, #12]
 8005870:	3104      	adds	r1, #4
 8005872:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005876:	f1b9 0f00 	cmp.w	r9, #0
 800587a:	d021      	beq.n	80058c0 <__multiply+0x140>
 800587c:	46ae      	mov	lr, r5
 800587e:	f04f 0a00 	mov.w	sl, #0
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	f104 0c14 	add.w	ip, r4, #20
 8005888:	f8bc b000 	ldrh.w	fp, [ip]
 800588c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005890:	b29b      	uxth	r3, r3
 8005892:	fb09 770b 	mla	r7, r9, fp, r7
 8005896:	4457      	add	r7, sl
 8005898:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800589c:	f84e 3b04 	str.w	r3, [lr], #4
 80058a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80058a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058a8:	f8be 3000 	ldrh.w	r3, [lr]
 80058ac:	4562      	cmp	r2, ip
 80058ae:	fb09 330a 	mla	r3, r9, sl, r3
 80058b2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80058b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058ba:	d8e5      	bhi.n	8005888 <__multiply+0x108>
 80058bc:	9f01      	ldr	r7, [sp, #4]
 80058be:	51eb      	str	r3, [r5, r7]
 80058c0:	3504      	adds	r5, #4
 80058c2:	e79a      	b.n	80057fa <__multiply+0x7a>
 80058c4:	3e01      	subs	r6, #1
 80058c6:	e79c      	b.n	8005802 <__multiply+0x82>
 80058c8:	08006732 	.word	0x08006732
 80058cc:	08006743 	.word	0x08006743

080058d0 <__pow5mult>:
 80058d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d4:	4615      	mov	r5, r2
 80058d6:	f012 0203 	ands.w	r2, r2, #3
 80058da:	4607      	mov	r7, r0
 80058dc:	460e      	mov	r6, r1
 80058de:	d007      	beq.n	80058f0 <__pow5mult+0x20>
 80058e0:	4c25      	ldr	r4, [pc, #148]	@ (8005978 <__pow5mult+0xa8>)
 80058e2:	3a01      	subs	r2, #1
 80058e4:	2300      	movs	r3, #0
 80058e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058ea:	f7ff fea1 	bl	8005630 <__multadd>
 80058ee:	4606      	mov	r6, r0
 80058f0:	10ad      	asrs	r5, r5, #2
 80058f2:	d03d      	beq.n	8005970 <__pow5mult+0xa0>
 80058f4:	69fc      	ldr	r4, [r7, #28]
 80058f6:	b97c      	cbnz	r4, 8005918 <__pow5mult+0x48>
 80058f8:	2010      	movs	r0, #16
 80058fa:	f7ff fd81 	bl	8005400 <malloc>
 80058fe:	4602      	mov	r2, r0
 8005900:	61f8      	str	r0, [r7, #28]
 8005902:	b928      	cbnz	r0, 8005910 <__pow5mult+0x40>
 8005904:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005908:	4b1c      	ldr	r3, [pc, #112]	@ (800597c <__pow5mult+0xac>)
 800590a:	481d      	ldr	r0, [pc, #116]	@ (8005980 <__pow5mult+0xb0>)
 800590c:	f000 fc48 	bl	80061a0 <__assert_func>
 8005910:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005914:	6004      	str	r4, [r0, #0]
 8005916:	60c4      	str	r4, [r0, #12]
 8005918:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800591c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005920:	b94c      	cbnz	r4, 8005936 <__pow5mult+0x66>
 8005922:	f240 2171 	movw	r1, #625	@ 0x271
 8005926:	4638      	mov	r0, r7
 8005928:	f7ff ff14 	bl	8005754 <__i2b>
 800592c:	2300      	movs	r3, #0
 800592e:	4604      	mov	r4, r0
 8005930:	f8c8 0008 	str.w	r0, [r8, #8]
 8005934:	6003      	str	r3, [r0, #0]
 8005936:	f04f 0900 	mov.w	r9, #0
 800593a:	07eb      	lsls	r3, r5, #31
 800593c:	d50a      	bpl.n	8005954 <__pow5mult+0x84>
 800593e:	4631      	mov	r1, r6
 8005940:	4622      	mov	r2, r4
 8005942:	4638      	mov	r0, r7
 8005944:	f7ff ff1c 	bl	8005780 <__multiply>
 8005948:	4680      	mov	r8, r0
 800594a:	4631      	mov	r1, r6
 800594c:	4638      	mov	r0, r7
 800594e:	f7ff fe4d 	bl	80055ec <_Bfree>
 8005952:	4646      	mov	r6, r8
 8005954:	106d      	asrs	r5, r5, #1
 8005956:	d00b      	beq.n	8005970 <__pow5mult+0xa0>
 8005958:	6820      	ldr	r0, [r4, #0]
 800595a:	b938      	cbnz	r0, 800596c <__pow5mult+0x9c>
 800595c:	4622      	mov	r2, r4
 800595e:	4621      	mov	r1, r4
 8005960:	4638      	mov	r0, r7
 8005962:	f7ff ff0d 	bl	8005780 <__multiply>
 8005966:	6020      	str	r0, [r4, #0]
 8005968:	f8c0 9000 	str.w	r9, [r0]
 800596c:	4604      	mov	r4, r0
 800596e:	e7e4      	b.n	800593a <__pow5mult+0x6a>
 8005970:	4630      	mov	r0, r6
 8005972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005976:	bf00      	nop
 8005978:	0800679c 	.word	0x0800679c
 800597c:	080066c3 	.word	0x080066c3
 8005980:	08006743 	.word	0x08006743

08005984 <__lshift>:
 8005984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005988:	460c      	mov	r4, r1
 800598a:	4607      	mov	r7, r0
 800598c:	4691      	mov	r9, r2
 800598e:	6923      	ldr	r3, [r4, #16]
 8005990:	6849      	ldr	r1, [r1, #4]
 8005992:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005996:	68a3      	ldr	r3, [r4, #8]
 8005998:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800599c:	f108 0601 	add.w	r6, r8, #1
 80059a0:	42b3      	cmp	r3, r6
 80059a2:	db0b      	blt.n	80059bc <__lshift+0x38>
 80059a4:	4638      	mov	r0, r7
 80059a6:	f7ff fde1 	bl	800556c <_Balloc>
 80059aa:	4605      	mov	r5, r0
 80059ac:	b948      	cbnz	r0, 80059c2 <__lshift+0x3e>
 80059ae:	4602      	mov	r2, r0
 80059b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80059b4:	4b27      	ldr	r3, [pc, #156]	@ (8005a54 <__lshift+0xd0>)
 80059b6:	4828      	ldr	r0, [pc, #160]	@ (8005a58 <__lshift+0xd4>)
 80059b8:	f000 fbf2 	bl	80061a0 <__assert_func>
 80059bc:	3101      	adds	r1, #1
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	e7ee      	b.n	80059a0 <__lshift+0x1c>
 80059c2:	2300      	movs	r3, #0
 80059c4:	f100 0114 	add.w	r1, r0, #20
 80059c8:	f100 0210 	add.w	r2, r0, #16
 80059cc:	4618      	mov	r0, r3
 80059ce:	4553      	cmp	r3, sl
 80059d0:	db33      	blt.n	8005a3a <__lshift+0xb6>
 80059d2:	6920      	ldr	r0, [r4, #16]
 80059d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059d8:	f104 0314 	add.w	r3, r4, #20
 80059dc:	f019 091f 	ands.w	r9, r9, #31
 80059e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80059e8:	d02b      	beq.n	8005a42 <__lshift+0xbe>
 80059ea:	468a      	mov	sl, r1
 80059ec:	2200      	movs	r2, #0
 80059ee:	f1c9 0e20 	rsb	lr, r9, #32
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	fa00 f009 	lsl.w	r0, r0, r9
 80059f8:	4310      	orrs	r0, r2
 80059fa:	f84a 0b04 	str.w	r0, [sl], #4
 80059fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a02:	459c      	cmp	ip, r3
 8005a04:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a08:	d8f3      	bhi.n	80059f2 <__lshift+0x6e>
 8005a0a:	ebac 0304 	sub.w	r3, ip, r4
 8005a0e:	3b15      	subs	r3, #21
 8005a10:	f023 0303 	bic.w	r3, r3, #3
 8005a14:	3304      	adds	r3, #4
 8005a16:	f104 0015 	add.w	r0, r4, #21
 8005a1a:	4584      	cmp	ip, r0
 8005a1c:	bf38      	it	cc
 8005a1e:	2304      	movcc	r3, #4
 8005a20:	50ca      	str	r2, [r1, r3]
 8005a22:	b10a      	cbz	r2, 8005a28 <__lshift+0xa4>
 8005a24:	f108 0602 	add.w	r6, r8, #2
 8005a28:	3e01      	subs	r6, #1
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	612e      	str	r6, [r5, #16]
 8005a30:	f7ff fddc 	bl	80055ec <_Bfree>
 8005a34:	4628      	mov	r0, r5
 8005a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a3e:	3301      	adds	r3, #1
 8005a40:	e7c5      	b.n	80059ce <__lshift+0x4a>
 8005a42:	3904      	subs	r1, #4
 8005a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a48:	459c      	cmp	ip, r3
 8005a4a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a4e:	d8f9      	bhi.n	8005a44 <__lshift+0xc0>
 8005a50:	e7ea      	b.n	8005a28 <__lshift+0xa4>
 8005a52:	bf00      	nop
 8005a54:	08006732 	.word	0x08006732
 8005a58:	08006743 	.word	0x08006743

08005a5c <__mcmp>:
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	690a      	ldr	r2, [r1, #16]
 8005a60:	6900      	ldr	r0, [r0, #16]
 8005a62:	b530      	push	{r4, r5, lr}
 8005a64:	1a80      	subs	r0, r0, r2
 8005a66:	d10e      	bne.n	8005a86 <__mcmp+0x2a>
 8005a68:	3314      	adds	r3, #20
 8005a6a:	3114      	adds	r1, #20
 8005a6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a7c:	4295      	cmp	r5, r2
 8005a7e:	d003      	beq.n	8005a88 <__mcmp+0x2c>
 8005a80:	d205      	bcs.n	8005a8e <__mcmp+0x32>
 8005a82:	f04f 30ff 	mov.w	r0, #4294967295
 8005a86:	bd30      	pop	{r4, r5, pc}
 8005a88:	42a3      	cmp	r3, r4
 8005a8a:	d3f3      	bcc.n	8005a74 <__mcmp+0x18>
 8005a8c:	e7fb      	b.n	8005a86 <__mcmp+0x2a>
 8005a8e:	2001      	movs	r0, #1
 8005a90:	e7f9      	b.n	8005a86 <__mcmp+0x2a>
	...

08005a94 <__mdiff>:
 8005a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a98:	4689      	mov	r9, r1
 8005a9a:	4606      	mov	r6, r0
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4648      	mov	r0, r9
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	f7ff ffdb 	bl	8005a5c <__mcmp>
 8005aa6:	1e05      	subs	r5, r0, #0
 8005aa8:	d112      	bne.n	8005ad0 <__mdiff+0x3c>
 8005aaa:	4629      	mov	r1, r5
 8005aac:	4630      	mov	r0, r6
 8005aae:	f7ff fd5d 	bl	800556c <_Balloc>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	b928      	cbnz	r0, 8005ac2 <__mdiff+0x2e>
 8005ab6:	f240 2137 	movw	r1, #567	@ 0x237
 8005aba:	4b3e      	ldr	r3, [pc, #248]	@ (8005bb4 <__mdiff+0x120>)
 8005abc:	483e      	ldr	r0, [pc, #248]	@ (8005bb8 <__mdiff+0x124>)
 8005abe:	f000 fb6f 	bl	80061a0 <__assert_func>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ac8:	4610      	mov	r0, r2
 8005aca:	b003      	add	sp, #12
 8005acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad0:	bfbc      	itt	lt
 8005ad2:	464b      	movlt	r3, r9
 8005ad4:	46a1      	movlt	r9, r4
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005adc:	bfba      	itte	lt
 8005ade:	461c      	movlt	r4, r3
 8005ae0:	2501      	movlt	r5, #1
 8005ae2:	2500      	movge	r5, #0
 8005ae4:	f7ff fd42 	bl	800556c <_Balloc>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	b918      	cbnz	r0, 8005af4 <__mdiff+0x60>
 8005aec:	f240 2145 	movw	r1, #581	@ 0x245
 8005af0:	4b30      	ldr	r3, [pc, #192]	@ (8005bb4 <__mdiff+0x120>)
 8005af2:	e7e3      	b.n	8005abc <__mdiff+0x28>
 8005af4:	f100 0b14 	add.w	fp, r0, #20
 8005af8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005afc:	f109 0310 	add.w	r3, r9, #16
 8005b00:	60c5      	str	r5, [r0, #12]
 8005b02:	f04f 0c00 	mov.w	ip, #0
 8005b06:	f109 0514 	add.w	r5, r9, #20
 8005b0a:	46d9      	mov	r9, fp
 8005b0c:	6926      	ldr	r6, [r4, #16]
 8005b0e:	f104 0e14 	add.w	lr, r4, #20
 8005b12:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005b16:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005b1a:	9301      	str	r3, [sp, #4]
 8005b1c:	9b01      	ldr	r3, [sp, #4]
 8005b1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005b22:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005b26:	b281      	uxth	r1, r0
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	fa1f f38a 	uxth.w	r3, sl
 8005b2e:	1a5b      	subs	r3, r3, r1
 8005b30:	0c00      	lsrs	r0, r0, #16
 8005b32:	4463      	add	r3, ip
 8005b34:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005b38:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005b42:	4576      	cmp	r6, lr
 8005b44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b48:	f849 3b04 	str.w	r3, [r9], #4
 8005b4c:	d8e6      	bhi.n	8005b1c <__mdiff+0x88>
 8005b4e:	1b33      	subs	r3, r6, r4
 8005b50:	3b15      	subs	r3, #21
 8005b52:	f023 0303 	bic.w	r3, r3, #3
 8005b56:	3415      	adds	r4, #21
 8005b58:	3304      	adds	r3, #4
 8005b5a:	42a6      	cmp	r6, r4
 8005b5c:	bf38      	it	cc
 8005b5e:	2304      	movcc	r3, #4
 8005b60:	441d      	add	r5, r3
 8005b62:	445b      	add	r3, fp
 8005b64:	461e      	mov	r6, r3
 8005b66:	462c      	mov	r4, r5
 8005b68:	4544      	cmp	r4, r8
 8005b6a:	d30e      	bcc.n	8005b8a <__mdiff+0xf6>
 8005b6c:	f108 0103 	add.w	r1, r8, #3
 8005b70:	1b49      	subs	r1, r1, r5
 8005b72:	f021 0103 	bic.w	r1, r1, #3
 8005b76:	3d03      	subs	r5, #3
 8005b78:	45a8      	cmp	r8, r5
 8005b7a:	bf38      	it	cc
 8005b7c:	2100      	movcc	r1, #0
 8005b7e:	440b      	add	r3, r1
 8005b80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b84:	b199      	cbz	r1, 8005bae <__mdiff+0x11a>
 8005b86:	6117      	str	r7, [r2, #16]
 8005b88:	e79e      	b.n	8005ac8 <__mdiff+0x34>
 8005b8a:	46e6      	mov	lr, ip
 8005b8c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005b90:	fa1f fc81 	uxth.w	ip, r1
 8005b94:	44f4      	add	ip, lr
 8005b96:	0c08      	lsrs	r0, r1, #16
 8005b98:	4471      	add	r1, lr
 8005b9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005b9e:	b289      	uxth	r1, r1
 8005ba0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005ba4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ba8:	f846 1b04 	str.w	r1, [r6], #4
 8005bac:	e7dc      	b.n	8005b68 <__mdiff+0xd4>
 8005bae:	3f01      	subs	r7, #1
 8005bb0:	e7e6      	b.n	8005b80 <__mdiff+0xec>
 8005bb2:	bf00      	nop
 8005bb4:	08006732 	.word	0x08006732
 8005bb8:	08006743 	.word	0x08006743

08005bbc <__d2b>:
 8005bbc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	4690      	mov	r8, r2
 8005bc4:	4699      	mov	r9, r3
 8005bc6:	9e08      	ldr	r6, [sp, #32]
 8005bc8:	f7ff fcd0 	bl	800556c <_Balloc>
 8005bcc:	4604      	mov	r4, r0
 8005bce:	b930      	cbnz	r0, 8005bde <__d2b+0x22>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	f240 310f 	movw	r1, #783	@ 0x30f
 8005bd6:	4b23      	ldr	r3, [pc, #140]	@ (8005c64 <__d2b+0xa8>)
 8005bd8:	4823      	ldr	r0, [pc, #140]	@ (8005c68 <__d2b+0xac>)
 8005bda:	f000 fae1 	bl	80061a0 <__assert_func>
 8005bde:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005be2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005be6:	b10d      	cbz	r5, 8005bec <__d2b+0x30>
 8005be8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	f1b8 0300 	subs.w	r3, r8, #0
 8005bf2:	d024      	beq.n	8005c3e <__d2b+0x82>
 8005bf4:	4668      	mov	r0, sp
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	f7ff fd7f 	bl	80056fa <__lo0bits>
 8005bfc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c00:	b1d8      	cbz	r0, 8005c3a <__d2b+0x7e>
 8005c02:	f1c0 0320 	rsb	r3, r0, #32
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	40c2      	lsrs	r2, r0
 8005c0e:	6163      	str	r3, [r4, #20]
 8005c10:	9201      	str	r2, [sp, #4]
 8005c12:	9b01      	ldr	r3, [sp, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bf0c      	ite	eq
 8005c18:	2201      	moveq	r2, #1
 8005c1a:	2202      	movne	r2, #2
 8005c1c:	61a3      	str	r3, [r4, #24]
 8005c1e:	6122      	str	r2, [r4, #16]
 8005c20:	b1ad      	cbz	r5, 8005c4e <__d2b+0x92>
 8005c22:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005c26:	4405      	add	r5, r0
 8005c28:	6035      	str	r5, [r6, #0]
 8005c2a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c30:	6018      	str	r0, [r3, #0]
 8005c32:	4620      	mov	r0, r4
 8005c34:	b002      	add	sp, #8
 8005c36:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005c3a:	6161      	str	r1, [r4, #20]
 8005c3c:	e7e9      	b.n	8005c12 <__d2b+0x56>
 8005c3e:	a801      	add	r0, sp, #4
 8005c40:	f7ff fd5b 	bl	80056fa <__lo0bits>
 8005c44:	9b01      	ldr	r3, [sp, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	6163      	str	r3, [r4, #20]
 8005c4a:	3020      	adds	r0, #32
 8005c4c:	e7e7      	b.n	8005c1e <__d2b+0x62>
 8005c4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005c52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c56:	6030      	str	r0, [r6, #0]
 8005c58:	6918      	ldr	r0, [r3, #16]
 8005c5a:	f7ff fd2f 	bl	80056bc <__hi0bits>
 8005c5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c62:	e7e4      	b.n	8005c2e <__d2b+0x72>
 8005c64:	08006732 	.word	0x08006732
 8005c68:	08006743 	.word	0x08006743

08005c6c <__sfputc_r>:
 8005c6c:	6893      	ldr	r3, [r2, #8]
 8005c6e:	b410      	push	{r4}
 8005c70:	3b01      	subs	r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	6093      	str	r3, [r2, #8]
 8005c76:	da07      	bge.n	8005c88 <__sfputc_r+0x1c>
 8005c78:	6994      	ldr	r4, [r2, #24]
 8005c7a:	42a3      	cmp	r3, r4
 8005c7c:	db01      	blt.n	8005c82 <__sfputc_r+0x16>
 8005c7e:	290a      	cmp	r1, #10
 8005c80:	d102      	bne.n	8005c88 <__sfputc_r+0x1c>
 8005c82:	bc10      	pop	{r4}
 8005c84:	f000 b9da 	b.w	800603c <__swbuf_r>
 8005c88:	6813      	ldr	r3, [r2, #0]
 8005c8a:	1c58      	adds	r0, r3, #1
 8005c8c:	6010      	str	r0, [r2, #0]
 8005c8e:	7019      	strb	r1, [r3, #0]
 8005c90:	4608      	mov	r0, r1
 8005c92:	bc10      	pop	{r4}
 8005c94:	4770      	bx	lr

08005c96 <__sfputs_r>:
 8005c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c98:	4606      	mov	r6, r0
 8005c9a:	460f      	mov	r7, r1
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	18d5      	adds	r5, r2, r3
 8005ca0:	42ac      	cmp	r4, r5
 8005ca2:	d101      	bne.n	8005ca8 <__sfputs_r+0x12>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	e007      	b.n	8005cb8 <__sfputs_r+0x22>
 8005ca8:	463a      	mov	r2, r7
 8005caa:	4630      	mov	r0, r6
 8005cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb0:	f7ff ffdc 	bl	8005c6c <__sfputc_r>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d1f3      	bne.n	8005ca0 <__sfputs_r+0xa>
 8005cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cbc <_vfiprintf_r>:
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	460d      	mov	r5, r1
 8005cc2:	4614      	mov	r4, r2
 8005cc4:	4698      	mov	r8, r3
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	b09d      	sub	sp, #116	@ 0x74
 8005cca:	b118      	cbz	r0, 8005cd4 <_vfiprintf_r+0x18>
 8005ccc:	6a03      	ldr	r3, [r0, #32]
 8005cce:	b90b      	cbnz	r3, 8005cd4 <_vfiprintf_r+0x18>
 8005cd0:	f7fe fbe2 	bl	8004498 <__sinit>
 8005cd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cd6:	07d9      	lsls	r1, r3, #31
 8005cd8:	d405      	bmi.n	8005ce6 <_vfiprintf_r+0x2a>
 8005cda:	89ab      	ldrh	r3, [r5, #12]
 8005cdc:	059a      	lsls	r2, r3, #22
 8005cde:	d402      	bmi.n	8005ce6 <_vfiprintf_r+0x2a>
 8005ce0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ce2:	f7fe fce2 	bl	80046aa <__retarget_lock_acquire_recursive>
 8005ce6:	89ab      	ldrh	r3, [r5, #12]
 8005ce8:	071b      	lsls	r3, r3, #28
 8005cea:	d501      	bpl.n	8005cf0 <_vfiprintf_r+0x34>
 8005cec:	692b      	ldr	r3, [r5, #16]
 8005cee:	b99b      	cbnz	r3, 8005d18 <_vfiprintf_r+0x5c>
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f000 f9e0 	bl	80060b8 <__swsetup_r>
 8005cf8:	b170      	cbz	r0, 8005d18 <_vfiprintf_r+0x5c>
 8005cfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cfc:	07dc      	lsls	r4, r3, #31
 8005cfe:	d504      	bpl.n	8005d0a <_vfiprintf_r+0x4e>
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	b01d      	add	sp, #116	@ 0x74
 8005d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0a:	89ab      	ldrh	r3, [r5, #12]
 8005d0c:	0598      	lsls	r0, r3, #22
 8005d0e:	d4f7      	bmi.n	8005d00 <_vfiprintf_r+0x44>
 8005d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d12:	f7fe fccb 	bl	80046ac <__retarget_lock_release_recursive>
 8005d16:	e7f3      	b.n	8005d00 <_vfiprintf_r+0x44>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d1c:	2320      	movs	r3, #32
 8005d1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d22:	2330      	movs	r3, #48	@ 0x30
 8005d24:	f04f 0901 	mov.w	r9, #1
 8005d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d2c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005ed8 <_vfiprintf_r+0x21c>
 8005d30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d34:	4623      	mov	r3, r4
 8005d36:	469a      	mov	sl, r3
 8005d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d3c:	b10a      	cbz	r2, 8005d42 <_vfiprintf_r+0x86>
 8005d3e:	2a25      	cmp	r2, #37	@ 0x25
 8005d40:	d1f9      	bne.n	8005d36 <_vfiprintf_r+0x7a>
 8005d42:	ebba 0b04 	subs.w	fp, sl, r4
 8005d46:	d00b      	beq.n	8005d60 <_vfiprintf_r+0xa4>
 8005d48:	465b      	mov	r3, fp
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	4630      	mov	r0, r6
 8005d50:	f7ff ffa1 	bl	8005c96 <__sfputs_r>
 8005d54:	3001      	adds	r0, #1
 8005d56:	f000 80a7 	beq.w	8005ea8 <_vfiprintf_r+0x1ec>
 8005d5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d5c:	445a      	add	r2, fp
 8005d5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d60:	f89a 3000 	ldrb.w	r3, [sl]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 809f 	beq.w	8005ea8 <_vfiprintf_r+0x1ec>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d74:	f10a 0a01 	add.w	sl, sl, #1
 8005d78:	9304      	str	r3, [sp, #16]
 8005d7a:	9307      	str	r3, [sp, #28]
 8005d7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d80:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d82:	4654      	mov	r4, sl
 8005d84:	2205      	movs	r2, #5
 8005d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d8a:	4853      	ldr	r0, [pc, #332]	@ (8005ed8 <_vfiprintf_r+0x21c>)
 8005d8c:	f7fe fc8f 	bl	80046ae <memchr>
 8005d90:	9a04      	ldr	r2, [sp, #16]
 8005d92:	b9d8      	cbnz	r0, 8005dcc <_vfiprintf_r+0x110>
 8005d94:	06d1      	lsls	r1, r2, #27
 8005d96:	bf44      	itt	mi
 8005d98:	2320      	movmi	r3, #32
 8005d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d9e:	0713      	lsls	r3, r2, #28
 8005da0:	bf44      	itt	mi
 8005da2:	232b      	movmi	r3, #43	@ 0x2b
 8005da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005da8:	f89a 3000 	ldrb.w	r3, [sl]
 8005dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dae:	d015      	beq.n	8005ddc <_vfiprintf_r+0x120>
 8005db0:	4654      	mov	r4, sl
 8005db2:	2000      	movs	r0, #0
 8005db4:	f04f 0c0a 	mov.w	ip, #10
 8005db8:	9a07      	ldr	r2, [sp, #28]
 8005dba:	4621      	mov	r1, r4
 8005dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dc0:	3b30      	subs	r3, #48	@ 0x30
 8005dc2:	2b09      	cmp	r3, #9
 8005dc4:	d94b      	bls.n	8005e5e <_vfiprintf_r+0x1a2>
 8005dc6:	b1b0      	cbz	r0, 8005df6 <_vfiprintf_r+0x13a>
 8005dc8:	9207      	str	r2, [sp, #28]
 8005dca:	e014      	b.n	8005df6 <_vfiprintf_r+0x13a>
 8005dcc:	eba0 0308 	sub.w	r3, r0, r8
 8005dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	46a2      	mov	sl, r4
 8005dd8:	9304      	str	r3, [sp, #16]
 8005dda:	e7d2      	b.n	8005d82 <_vfiprintf_r+0xc6>
 8005ddc:	9b03      	ldr	r3, [sp, #12]
 8005dde:	1d19      	adds	r1, r3, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	9103      	str	r1, [sp, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	bfbb      	ittet	lt
 8005de8:	425b      	neglt	r3, r3
 8005dea:	f042 0202 	orrlt.w	r2, r2, #2
 8005dee:	9307      	strge	r3, [sp, #28]
 8005df0:	9307      	strlt	r3, [sp, #28]
 8005df2:	bfb8      	it	lt
 8005df4:	9204      	strlt	r2, [sp, #16]
 8005df6:	7823      	ldrb	r3, [r4, #0]
 8005df8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dfa:	d10a      	bne.n	8005e12 <_vfiprintf_r+0x156>
 8005dfc:	7863      	ldrb	r3, [r4, #1]
 8005dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e00:	d132      	bne.n	8005e68 <_vfiprintf_r+0x1ac>
 8005e02:	9b03      	ldr	r3, [sp, #12]
 8005e04:	3402      	adds	r4, #2
 8005e06:	1d1a      	adds	r2, r3, #4
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	9203      	str	r2, [sp, #12]
 8005e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e10:	9305      	str	r3, [sp, #20]
 8005e12:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005edc <_vfiprintf_r+0x220>
 8005e16:	2203      	movs	r2, #3
 8005e18:	4650      	mov	r0, sl
 8005e1a:	7821      	ldrb	r1, [r4, #0]
 8005e1c:	f7fe fc47 	bl	80046ae <memchr>
 8005e20:	b138      	cbz	r0, 8005e32 <_vfiprintf_r+0x176>
 8005e22:	2240      	movs	r2, #64	@ 0x40
 8005e24:	9b04      	ldr	r3, [sp, #16]
 8005e26:	eba0 000a 	sub.w	r0, r0, sl
 8005e2a:	4082      	lsls	r2, r0
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	3401      	adds	r4, #1
 8005e30:	9304      	str	r3, [sp, #16]
 8005e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e36:	2206      	movs	r2, #6
 8005e38:	4829      	ldr	r0, [pc, #164]	@ (8005ee0 <_vfiprintf_r+0x224>)
 8005e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e3e:	f7fe fc36 	bl	80046ae <memchr>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d03f      	beq.n	8005ec6 <_vfiprintf_r+0x20a>
 8005e46:	4b27      	ldr	r3, [pc, #156]	@ (8005ee4 <_vfiprintf_r+0x228>)
 8005e48:	bb1b      	cbnz	r3, 8005e92 <_vfiprintf_r+0x1d6>
 8005e4a:	9b03      	ldr	r3, [sp, #12]
 8005e4c:	3307      	adds	r3, #7
 8005e4e:	f023 0307 	bic.w	r3, r3, #7
 8005e52:	3308      	adds	r3, #8
 8005e54:	9303      	str	r3, [sp, #12]
 8005e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e58:	443b      	add	r3, r7
 8005e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e5c:	e76a      	b.n	8005d34 <_vfiprintf_r+0x78>
 8005e5e:	460c      	mov	r4, r1
 8005e60:	2001      	movs	r0, #1
 8005e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e66:	e7a8      	b.n	8005dba <_vfiprintf_r+0xfe>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f04f 0c0a 	mov.w	ip, #10
 8005e6e:	4619      	mov	r1, r3
 8005e70:	3401      	adds	r4, #1
 8005e72:	9305      	str	r3, [sp, #20]
 8005e74:	4620      	mov	r0, r4
 8005e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e7a:	3a30      	subs	r2, #48	@ 0x30
 8005e7c:	2a09      	cmp	r2, #9
 8005e7e:	d903      	bls.n	8005e88 <_vfiprintf_r+0x1cc>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0c6      	beq.n	8005e12 <_vfiprintf_r+0x156>
 8005e84:	9105      	str	r1, [sp, #20]
 8005e86:	e7c4      	b.n	8005e12 <_vfiprintf_r+0x156>
 8005e88:	4604      	mov	r4, r0
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e90:	e7f0      	b.n	8005e74 <_vfiprintf_r+0x1b8>
 8005e92:	ab03      	add	r3, sp, #12
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	462a      	mov	r2, r5
 8005e98:	4630      	mov	r0, r6
 8005e9a:	4b13      	ldr	r3, [pc, #76]	@ (8005ee8 <_vfiprintf_r+0x22c>)
 8005e9c:	a904      	add	r1, sp, #16
 8005e9e:	f7fd feb1 	bl	8003c04 <_printf_float>
 8005ea2:	4607      	mov	r7, r0
 8005ea4:	1c78      	adds	r0, r7, #1
 8005ea6:	d1d6      	bne.n	8005e56 <_vfiprintf_r+0x19a>
 8005ea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005eaa:	07d9      	lsls	r1, r3, #31
 8005eac:	d405      	bmi.n	8005eba <_vfiprintf_r+0x1fe>
 8005eae:	89ab      	ldrh	r3, [r5, #12]
 8005eb0:	059a      	lsls	r2, r3, #22
 8005eb2:	d402      	bmi.n	8005eba <_vfiprintf_r+0x1fe>
 8005eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005eb6:	f7fe fbf9 	bl	80046ac <__retarget_lock_release_recursive>
 8005eba:	89ab      	ldrh	r3, [r5, #12]
 8005ebc:	065b      	lsls	r3, r3, #25
 8005ebe:	f53f af1f 	bmi.w	8005d00 <_vfiprintf_r+0x44>
 8005ec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ec4:	e71e      	b.n	8005d04 <_vfiprintf_r+0x48>
 8005ec6:	ab03      	add	r3, sp, #12
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	462a      	mov	r2, r5
 8005ecc:	4630      	mov	r0, r6
 8005ece:	4b06      	ldr	r3, [pc, #24]	@ (8005ee8 <_vfiprintf_r+0x22c>)
 8005ed0:	a904      	add	r1, sp, #16
 8005ed2:	f7fe f935 	bl	8004140 <_printf_i>
 8005ed6:	e7e4      	b.n	8005ea2 <_vfiprintf_r+0x1e6>
 8005ed8:	08006898 	.word	0x08006898
 8005edc:	0800689e 	.word	0x0800689e
 8005ee0:	080068a2 	.word	0x080068a2
 8005ee4:	08003c05 	.word	0x08003c05
 8005ee8:	08005c97 	.word	0x08005c97

08005eec <__sflush_r>:
 8005eec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef2:	0716      	lsls	r6, r2, #28
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	d454      	bmi.n	8005fa4 <__sflush_r+0xb8>
 8005efa:	684b      	ldr	r3, [r1, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	dc02      	bgt.n	8005f06 <__sflush_r+0x1a>
 8005f00:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	dd48      	ble.n	8005f98 <__sflush_r+0xac>
 8005f06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f08:	2e00      	cmp	r6, #0
 8005f0a:	d045      	beq.n	8005f98 <__sflush_r+0xac>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f12:	682f      	ldr	r7, [r5, #0]
 8005f14:	6a21      	ldr	r1, [r4, #32]
 8005f16:	602b      	str	r3, [r5, #0]
 8005f18:	d030      	beq.n	8005f7c <__sflush_r+0x90>
 8005f1a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	0759      	lsls	r1, r3, #29
 8005f20:	d505      	bpl.n	8005f2e <__sflush_r+0x42>
 8005f22:	6863      	ldr	r3, [r4, #4]
 8005f24:	1ad2      	subs	r2, r2, r3
 8005f26:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f28:	b10b      	cbz	r3, 8005f2e <__sflush_r+0x42>
 8005f2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f2c:	1ad2      	subs	r2, r2, r3
 8005f2e:	2300      	movs	r3, #0
 8005f30:	4628      	mov	r0, r5
 8005f32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f34:	6a21      	ldr	r1, [r4, #32]
 8005f36:	47b0      	blx	r6
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	d106      	bne.n	8005f4c <__sflush_r+0x60>
 8005f3e:	6829      	ldr	r1, [r5, #0]
 8005f40:	291d      	cmp	r1, #29
 8005f42:	d82b      	bhi.n	8005f9c <__sflush_r+0xb0>
 8005f44:	4a28      	ldr	r2, [pc, #160]	@ (8005fe8 <__sflush_r+0xfc>)
 8005f46:	410a      	asrs	r2, r1
 8005f48:	07d6      	lsls	r6, r2, #31
 8005f4a:	d427      	bmi.n	8005f9c <__sflush_r+0xb0>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	6062      	str	r2, [r4, #4]
 8005f50:	6922      	ldr	r2, [r4, #16]
 8005f52:	04d9      	lsls	r1, r3, #19
 8005f54:	6022      	str	r2, [r4, #0]
 8005f56:	d504      	bpl.n	8005f62 <__sflush_r+0x76>
 8005f58:	1c42      	adds	r2, r0, #1
 8005f5a:	d101      	bne.n	8005f60 <__sflush_r+0x74>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	b903      	cbnz	r3, 8005f62 <__sflush_r+0x76>
 8005f60:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f64:	602f      	str	r7, [r5, #0]
 8005f66:	b1b9      	cbz	r1, 8005f98 <__sflush_r+0xac>
 8005f68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f6c:	4299      	cmp	r1, r3
 8005f6e:	d002      	beq.n	8005f76 <__sflush_r+0x8a>
 8005f70:	4628      	mov	r0, r5
 8005f72:	f7ff f9fd 	bl	8005370 <_free_r>
 8005f76:	2300      	movs	r3, #0
 8005f78:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f7a:	e00d      	b.n	8005f98 <__sflush_r+0xac>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4628      	mov	r0, r5
 8005f80:	47b0      	blx	r6
 8005f82:	4602      	mov	r2, r0
 8005f84:	1c50      	adds	r0, r2, #1
 8005f86:	d1c9      	bne.n	8005f1c <__sflush_r+0x30>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0c6      	beq.n	8005f1c <__sflush_r+0x30>
 8005f8e:	2b1d      	cmp	r3, #29
 8005f90:	d001      	beq.n	8005f96 <__sflush_r+0xaa>
 8005f92:	2b16      	cmp	r3, #22
 8005f94:	d11d      	bne.n	8005fd2 <__sflush_r+0xe6>
 8005f96:	602f      	str	r7, [r5, #0]
 8005f98:	2000      	movs	r0, #0
 8005f9a:	e021      	b.n	8005fe0 <__sflush_r+0xf4>
 8005f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fa0:	b21b      	sxth	r3, r3
 8005fa2:	e01a      	b.n	8005fda <__sflush_r+0xee>
 8005fa4:	690f      	ldr	r7, [r1, #16]
 8005fa6:	2f00      	cmp	r7, #0
 8005fa8:	d0f6      	beq.n	8005f98 <__sflush_r+0xac>
 8005faa:	0793      	lsls	r3, r2, #30
 8005fac:	bf18      	it	ne
 8005fae:	2300      	movne	r3, #0
 8005fb0:	680e      	ldr	r6, [r1, #0]
 8005fb2:	bf08      	it	eq
 8005fb4:	694b      	ldreq	r3, [r1, #20]
 8005fb6:	1bf6      	subs	r6, r6, r7
 8005fb8:	600f      	str	r7, [r1, #0]
 8005fba:	608b      	str	r3, [r1, #8]
 8005fbc:	2e00      	cmp	r6, #0
 8005fbe:	ddeb      	ble.n	8005f98 <__sflush_r+0xac>
 8005fc0:	4633      	mov	r3, r6
 8005fc2:	463a      	mov	r2, r7
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	6a21      	ldr	r1, [r4, #32]
 8005fc8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005fcc:	47e0      	blx	ip
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	dc07      	bgt.n	8005fe2 <__sflush_r+0xf6>
 8005fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fda:	f04f 30ff 	mov.w	r0, #4294967295
 8005fde:	81a3      	strh	r3, [r4, #12]
 8005fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fe2:	4407      	add	r7, r0
 8005fe4:	1a36      	subs	r6, r6, r0
 8005fe6:	e7e9      	b.n	8005fbc <__sflush_r+0xd0>
 8005fe8:	dfbffffe 	.word	0xdfbffffe

08005fec <_fflush_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	690b      	ldr	r3, [r1, #16]
 8005ff0:	4605      	mov	r5, r0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	b913      	cbnz	r3, 8005ffc <_fflush_r+0x10>
 8005ff6:	2500      	movs	r5, #0
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	bd38      	pop	{r3, r4, r5, pc}
 8005ffc:	b118      	cbz	r0, 8006006 <_fflush_r+0x1a>
 8005ffe:	6a03      	ldr	r3, [r0, #32]
 8006000:	b90b      	cbnz	r3, 8006006 <_fflush_r+0x1a>
 8006002:	f7fe fa49 	bl	8004498 <__sinit>
 8006006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f3      	beq.n	8005ff6 <_fflush_r+0xa>
 800600e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006010:	07d0      	lsls	r0, r2, #31
 8006012:	d404      	bmi.n	800601e <_fflush_r+0x32>
 8006014:	0599      	lsls	r1, r3, #22
 8006016:	d402      	bmi.n	800601e <_fflush_r+0x32>
 8006018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800601a:	f7fe fb46 	bl	80046aa <__retarget_lock_acquire_recursive>
 800601e:	4628      	mov	r0, r5
 8006020:	4621      	mov	r1, r4
 8006022:	f7ff ff63 	bl	8005eec <__sflush_r>
 8006026:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006028:	4605      	mov	r5, r0
 800602a:	07da      	lsls	r2, r3, #31
 800602c:	d4e4      	bmi.n	8005ff8 <_fflush_r+0xc>
 800602e:	89a3      	ldrh	r3, [r4, #12]
 8006030:	059b      	lsls	r3, r3, #22
 8006032:	d4e1      	bmi.n	8005ff8 <_fflush_r+0xc>
 8006034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006036:	f7fe fb39 	bl	80046ac <__retarget_lock_release_recursive>
 800603a:	e7dd      	b.n	8005ff8 <_fflush_r+0xc>

0800603c <__swbuf_r>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	460e      	mov	r6, r1
 8006040:	4614      	mov	r4, r2
 8006042:	4605      	mov	r5, r0
 8006044:	b118      	cbz	r0, 800604e <__swbuf_r+0x12>
 8006046:	6a03      	ldr	r3, [r0, #32]
 8006048:	b90b      	cbnz	r3, 800604e <__swbuf_r+0x12>
 800604a:	f7fe fa25 	bl	8004498 <__sinit>
 800604e:	69a3      	ldr	r3, [r4, #24]
 8006050:	60a3      	str	r3, [r4, #8]
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	071a      	lsls	r2, r3, #28
 8006056:	d501      	bpl.n	800605c <__swbuf_r+0x20>
 8006058:	6923      	ldr	r3, [r4, #16]
 800605a:	b943      	cbnz	r3, 800606e <__swbuf_r+0x32>
 800605c:	4621      	mov	r1, r4
 800605e:	4628      	mov	r0, r5
 8006060:	f000 f82a 	bl	80060b8 <__swsetup_r>
 8006064:	b118      	cbz	r0, 800606e <__swbuf_r+0x32>
 8006066:	f04f 37ff 	mov.w	r7, #4294967295
 800606a:	4638      	mov	r0, r7
 800606c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	6922      	ldr	r2, [r4, #16]
 8006072:	b2f6      	uxtb	r6, r6
 8006074:	1a98      	subs	r0, r3, r2
 8006076:	6963      	ldr	r3, [r4, #20]
 8006078:	4637      	mov	r7, r6
 800607a:	4283      	cmp	r3, r0
 800607c:	dc05      	bgt.n	800608a <__swbuf_r+0x4e>
 800607e:	4621      	mov	r1, r4
 8006080:	4628      	mov	r0, r5
 8006082:	f7ff ffb3 	bl	8005fec <_fflush_r>
 8006086:	2800      	cmp	r0, #0
 8006088:	d1ed      	bne.n	8006066 <__swbuf_r+0x2a>
 800608a:	68a3      	ldr	r3, [r4, #8]
 800608c:	3b01      	subs	r3, #1
 800608e:	60a3      	str	r3, [r4, #8]
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	6022      	str	r2, [r4, #0]
 8006096:	701e      	strb	r6, [r3, #0]
 8006098:	6962      	ldr	r2, [r4, #20]
 800609a:	1c43      	adds	r3, r0, #1
 800609c:	429a      	cmp	r2, r3
 800609e:	d004      	beq.n	80060aa <__swbuf_r+0x6e>
 80060a0:	89a3      	ldrh	r3, [r4, #12]
 80060a2:	07db      	lsls	r3, r3, #31
 80060a4:	d5e1      	bpl.n	800606a <__swbuf_r+0x2e>
 80060a6:	2e0a      	cmp	r6, #10
 80060a8:	d1df      	bne.n	800606a <__swbuf_r+0x2e>
 80060aa:	4621      	mov	r1, r4
 80060ac:	4628      	mov	r0, r5
 80060ae:	f7ff ff9d 	bl	8005fec <_fflush_r>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d0d9      	beq.n	800606a <__swbuf_r+0x2e>
 80060b6:	e7d6      	b.n	8006066 <__swbuf_r+0x2a>

080060b8 <__swsetup_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4b29      	ldr	r3, [pc, #164]	@ (8006160 <__swsetup_r+0xa8>)
 80060bc:	4605      	mov	r5, r0
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	460c      	mov	r4, r1
 80060c2:	b118      	cbz	r0, 80060cc <__swsetup_r+0x14>
 80060c4:	6a03      	ldr	r3, [r0, #32]
 80060c6:	b90b      	cbnz	r3, 80060cc <__swsetup_r+0x14>
 80060c8:	f7fe f9e6 	bl	8004498 <__sinit>
 80060cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d0:	0719      	lsls	r1, r3, #28
 80060d2:	d422      	bmi.n	800611a <__swsetup_r+0x62>
 80060d4:	06da      	lsls	r2, r3, #27
 80060d6:	d407      	bmi.n	80060e8 <__swsetup_r+0x30>
 80060d8:	2209      	movs	r2, #9
 80060da:	602a      	str	r2, [r5, #0]
 80060dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060e0:	f04f 30ff 	mov.w	r0, #4294967295
 80060e4:	81a3      	strh	r3, [r4, #12]
 80060e6:	e033      	b.n	8006150 <__swsetup_r+0x98>
 80060e8:	0758      	lsls	r0, r3, #29
 80060ea:	d512      	bpl.n	8006112 <__swsetup_r+0x5a>
 80060ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060ee:	b141      	cbz	r1, 8006102 <__swsetup_r+0x4a>
 80060f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060f4:	4299      	cmp	r1, r3
 80060f6:	d002      	beq.n	80060fe <__swsetup_r+0x46>
 80060f8:	4628      	mov	r0, r5
 80060fa:	f7ff f939 	bl	8005370 <_free_r>
 80060fe:	2300      	movs	r3, #0
 8006100:	6363      	str	r3, [r4, #52]	@ 0x34
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006108:	81a3      	strh	r3, [r4, #12]
 800610a:	2300      	movs	r3, #0
 800610c:	6063      	str	r3, [r4, #4]
 800610e:	6923      	ldr	r3, [r4, #16]
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	89a3      	ldrh	r3, [r4, #12]
 8006114:	f043 0308 	orr.w	r3, r3, #8
 8006118:	81a3      	strh	r3, [r4, #12]
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	b94b      	cbnz	r3, 8006132 <__swsetup_r+0x7a>
 800611e:	89a3      	ldrh	r3, [r4, #12]
 8006120:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006128:	d003      	beq.n	8006132 <__swsetup_r+0x7a>
 800612a:	4621      	mov	r1, r4
 800612c:	4628      	mov	r0, r5
 800612e:	f000 f8c0 	bl	80062b2 <__smakebuf_r>
 8006132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006136:	f013 0201 	ands.w	r2, r3, #1
 800613a:	d00a      	beq.n	8006152 <__swsetup_r+0x9a>
 800613c:	2200      	movs	r2, #0
 800613e:	60a2      	str	r2, [r4, #8]
 8006140:	6962      	ldr	r2, [r4, #20]
 8006142:	4252      	negs	r2, r2
 8006144:	61a2      	str	r2, [r4, #24]
 8006146:	6922      	ldr	r2, [r4, #16]
 8006148:	b942      	cbnz	r2, 800615c <__swsetup_r+0xa4>
 800614a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800614e:	d1c5      	bne.n	80060dc <__swsetup_r+0x24>
 8006150:	bd38      	pop	{r3, r4, r5, pc}
 8006152:	0799      	lsls	r1, r3, #30
 8006154:	bf58      	it	pl
 8006156:	6962      	ldrpl	r2, [r4, #20]
 8006158:	60a2      	str	r2, [r4, #8]
 800615a:	e7f4      	b.n	8006146 <__swsetup_r+0x8e>
 800615c:	2000      	movs	r0, #0
 800615e:	e7f7      	b.n	8006150 <__swsetup_r+0x98>
 8006160:	20000018 	.word	0x20000018

08006164 <_sbrk_r>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	2300      	movs	r3, #0
 8006168:	4d05      	ldr	r5, [pc, #20]	@ (8006180 <_sbrk_r+0x1c>)
 800616a:	4604      	mov	r4, r0
 800616c:	4608      	mov	r0, r1
 800616e:	602b      	str	r3, [r5, #0]
 8006170:	f7fb fc1c 	bl	80019ac <_sbrk>
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d102      	bne.n	800617e <_sbrk_r+0x1a>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	b103      	cbz	r3, 800617e <_sbrk_r+0x1a>
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	bd38      	pop	{r3, r4, r5, pc}
 8006180:	2000040c 	.word	0x2000040c

08006184 <memcpy>:
 8006184:	440a      	add	r2, r1
 8006186:	4291      	cmp	r1, r2
 8006188:	f100 33ff 	add.w	r3, r0, #4294967295
 800618c:	d100      	bne.n	8006190 <memcpy+0xc>
 800618e:	4770      	bx	lr
 8006190:	b510      	push	{r4, lr}
 8006192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006196:	4291      	cmp	r1, r2
 8006198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800619c:	d1f9      	bne.n	8006192 <memcpy+0xe>
 800619e:	bd10      	pop	{r4, pc}

080061a0 <__assert_func>:
 80061a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061a2:	4614      	mov	r4, r2
 80061a4:	461a      	mov	r2, r3
 80061a6:	4b09      	ldr	r3, [pc, #36]	@ (80061cc <__assert_func+0x2c>)
 80061a8:	4605      	mov	r5, r0
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68d8      	ldr	r0, [r3, #12]
 80061ae:	b954      	cbnz	r4, 80061c6 <__assert_func+0x26>
 80061b0:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <__assert_func+0x30>)
 80061b2:	461c      	mov	r4, r3
 80061b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061b8:	9100      	str	r1, [sp, #0]
 80061ba:	462b      	mov	r3, r5
 80061bc:	4905      	ldr	r1, [pc, #20]	@ (80061d4 <__assert_func+0x34>)
 80061be:	f000 f841 	bl	8006244 <fiprintf>
 80061c2:	f000 f8d5 	bl	8006370 <abort>
 80061c6:	4b04      	ldr	r3, [pc, #16]	@ (80061d8 <__assert_func+0x38>)
 80061c8:	e7f4      	b.n	80061b4 <__assert_func+0x14>
 80061ca:	bf00      	nop
 80061cc:	20000018 	.word	0x20000018
 80061d0:	080068ee 	.word	0x080068ee
 80061d4:	080068c0 	.word	0x080068c0
 80061d8:	080068b3 	.word	0x080068b3

080061dc <_calloc_r>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	fba1 5402 	umull	r5, r4, r1, r2
 80061e2:	b93c      	cbnz	r4, 80061f4 <_calloc_r+0x18>
 80061e4:	4629      	mov	r1, r5
 80061e6:	f7ff f935 	bl	8005454 <_malloc_r>
 80061ea:	4606      	mov	r6, r0
 80061ec:	b928      	cbnz	r0, 80061fa <_calloc_r+0x1e>
 80061ee:	2600      	movs	r6, #0
 80061f0:	4630      	mov	r0, r6
 80061f2:	bd70      	pop	{r4, r5, r6, pc}
 80061f4:	220c      	movs	r2, #12
 80061f6:	6002      	str	r2, [r0, #0]
 80061f8:	e7f9      	b.n	80061ee <_calloc_r+0x12>
 80061fa:	462a      	mov	r2, r5
 80061fc:	4621      	mov	r1, r4
 80061fe:	f7fe f9d6 	bl	80045ae <memset>
 8006202:	e7f5      	b.n	80061f0 <_calloc_r+0x14>

08006204 <__ascii_mbtowc>:
 8006204:	b082      	sub	sp, #8
 8006206:	b901      	cbnz	r1, 800620a <__ascii_mbtowc+0x6>
 8006208:	a901      	add	r1, sp, #4
 800620a:	b142      	cbz	r2, 800621e <__ascii_mbtowc+0x1a>
 800620c:	b14b      	cbz	r3, 8006222 <__ascii_mbtowc+0x1e>
 800620e:	7813      	ldrb	r3, [r2, #0]
 8006210:	600b      	str	r3, [r1, #0]
 8006212:	7812      	ldrb	r2, [r2, #0]
 8006214:	1e10      	subs	r0, r2, #0
 8006216:	bf18      	it	ne
 8006218:	2001      	movne	r0, #1
 800621a:	b002      	add	sp, #8
 800621c:	4770      	bx	lr
 800621e:	4610      	mov	r0, r2
 8006220:	e7fb      	b.n	800621a <__ascii_mbtowc+0x16>
 8006222:	f06f 0001 	mvn.w	r0, #1
 8006226:	e7f8      	b.n	800621a <__ascii_mbtowc+0x16>

08006228 <__ascii_wctomb>:
 8006228:	4603      	mov	r3, r0
 800622a:	4608      	mov	r0, r1
 800622c:	b141      	cbz	r1, 8006240 <__ascii_wctomb+0x18>
 800622e:	2aff      	cmp	r2, #255	@ 0xff
 8006230:	d904      	bls.n	800623c <__ascii_wctomb+0x14>
 8006232:	228a      	movs	r2, #138	@ 0x8a
 8006234:	f04f 30ff 	mov.w	r0, #4294967295
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	4770      	bx	lr
 800623c:	2001      	movs	r0, #1
 800623e:	700a      	strb	r2, [r1, #0]
 8006240:	4770      	bx	lr
	...

08006244 <fiprintf>:
 8006244:	b40e      	push	{r1, r2, r3}
 8006246:	b503      	push	{r0, r1, lr}
 8006248:	4601      	mov	r1, r0
 800624a:	ab03      	add	r3, sp, #12
 800624c:	4805      	ldr	r0, [pc, #20]	@ (8006264 <fiprintf+0x20>)
 800624e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006252:	6800      	ldr	r0, [r0, #0]
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	f7ff fd31 	bl	8005cbc <_vfiprintf_r>
 800625a:	b002      	add	sp, #8
 800625c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006260:	b003      	add	sp, #12
 8006262:	4770      	bx	lr
 8006264:	20000018 	.word	0x20000018

08006268 <__swhatbuf_r>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	460c      	mov	r4, r1
 800626c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006270:	4615      	mov	r5, r2
 8006272:	2900      	cmp	r1, #0
 8006274:	461e      	mov	r6, r3
 8006276:	b096      	sub	sp, #88	@ 0x58
 8006278:	da0c      	bge.n	8006294 <__swhatbuf_r+0x2c>
 800627a:	89a3      	ldrh	r3, [r4, #12]
 800627c:	2100      	movs	r1, #0
 800627e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006282:	bf14      	ite	ne
 8006284:	2340      	movne	r3, #64	@ 0x40
 8006286:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800628a:	2000      	movs	r0, #0
 800628c:	6031      	str	r1, [r6, #0]
 800628e:	602b      	str	r3, [r5, #0]
 8006290:	b016      	add	sp, #88	@ 0x58
 8006292:	bd70      	pop	{r4, r5, r6, pc}
 8006294:	466a      	mov	r2, sp
 8006296:	f000 f849 	bl	800632c <_fstat_r>
 800629a:	2800      	cmp	r0, #0
 800629c:	dbed      	blt.n	800627a <__swhatbuf_r+0x12>
 800629e:	9901      	ldr	r1, [sp, #4]
 80062a0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062a4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062a8:	4259      	negs	r1, r3
 80062aa:	4159      	adcs	r1, r3
 80062ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062b0:	e7eb      	b.n	800628a <__swhatbuf_r+0x22>

080062b2 <__smakebuf_r>:
 80062b2:	898b      	ldrh	r3, [r1, #12]
 80062b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062b6:	079d      	lsls	r5, r3, #30
 80062b8:	4606      	mov	r6, r0
 80062ba:	460c      	mov	r4, r1
 80062bc:	d507      	bpl.n	80062ce <__smakebuf_r+0x1c>
 80062be:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062c2:	6023      	str	r3, [r4, #0]
 80062c4:	6123      	str	r3, [r4, #16]
 80062c6:	2301      	movs	r3, #1
 80062c8:	6163      	str	r3, [r4, #20]
 80062ca:	b003      	add	sp, #12
 80062cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ce:	466a      	mov	r2, sp
 80062d0:	ab01      	add	r3, sp, #4
 80062d2:	f7ff ffc9 	bl	8006268 <__swhatbuf_r>
 80062d6:	9f00      	ldr	r7, [sp, #0]
 80062d8:	4605      	mov	r5, r0
 80062da:	4639      	mov	r1, r7
 80062dc:	4630      	mov	r0, r6
 80062de:	f7ff f8b9 	bl	8005454 <_malloc_r>
 80062e2:	b948      	cbnz	r0, 80062f8 <__smakebuf_r+0x46>
 80062e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e8:	059a      	lsls	r2, r3, #22
 80062ea:	d4ee      	bmi.n	80062ca <__smakebuf_r+0x18>
 80062ec:	f023 0303 	bic.w	r3, r3, #3
 80062f0:	f043 0302 	orr.w	r3, r3, #2
 80062f4:	81a3      	strh	r3, [r4, #12]
 80062f6:	e7e2      	b.n	80062be <__smakebuf_r+0xc>
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80062fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006302:	81a3      	strh	r3, [r4, #12]
 8006304:	9b01      	ldr	r3, [sp, #4]
 8006306:	6020      	str	r0, [r4, #0]
 8006308:	b15b      	cbz	r3, 8006322 <__smakebuf_r+0x70>
 800630a:	4630      	mov	r0, r6
 800630c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006310:	f000 f81e 	bl	8006350 <_isatty_r>
 8006314:	b128      	cbz	r0, 8006322 <__smakebuf_r+0x70>
 8006316:	89a3      	ldrh	r3, [r4, #12]
 8006318:	f023 0303 	bic.w	r3, r3, #3
 800631c:	f043 0301 	orr.w	r3, r3, #1
 8006320:	81a3      	strh	r3, [r4, #12]
 8006322:	89a3      	ldrh	r3, [r4, #12]
 8006324:	431d      	orrs	r5, r3
 8006326:	81a5      	strh	r5, [r4, #12]
 8006328:	e7cf      	b.n	80062ca <__smakebuf_r+0x18>
	...

0800632c <_fstat_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	2300      	movs	r3, #0
 8006330:	4d06      	ldr	r5, [pc, #24]	@ (800634c <_fstat_r+0x20>)
 8006332:	4604      	mov	r4, r0
 8006334:	4608      	mov	r0, r1
 8006336:	4611      	mov	r1, r2
 8006338:	602b      	str	r3, [r5, #0]
 800633a:	f7fb fb11 	bl	8001960 <_fstat>
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	d102      	bne.n	8006348 <_fstat_r+0x1c>
 8006342:	682b      	ldr	r3, [r5, #0]
 8006344:	b103      	cbz	r3, 8006348 <_fstat_r+0x1c>
 8006346:	6023      	str	r3, [r4, #0]
 8006348:	bd38      	pop	{r3, r4, r5, pc}
 800634a:	bf00      	nop
 800634c:	2000040c 	.word	0x2000040c

08006350 <_isatty_r>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	2300      	movs	r3, #0
 8006354:	4d05      	ldr	r5, [pc, #20]	@ (800636c <_isatty_r+0x1c>)
 8006356:	4604      	mov	r4, r0
 8006358:	4608      	mov	r0, r1
 800635a:	602b      	str	r3, [r5, #0]
 800635c:	f7fb fb0f 	bl	800197e <_isatty>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d102      	bne.n	800636a <_isatty_r+0x1a>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	b103      	cbz	r3, 800636a <_isatty_r+0x1a>
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	2000040c 	.word	0x2000040c

08006370 <abort>:
 8006370:	2006      	movs	r0, #6
 8006372:	b508      	push	{r3, lr}
 8006374:	f000 f82c 	bl	80063d0 <raise>
 8006378:	2001      	movs	r0, #1
 800637a:	f7fb fabe 	bl	80018fa <_exit>

0800637e <_raise_r>:
 800637e:	291f      	cmp	r1, #31
 8006380:	b538      	push	{r3, r4, r5, lr}
 8006382:	4605      	mov	r5, r0
 8006384:	460c      	mov	r4, r1
 8006386:	d904      	bls.n	8006392 <_raise_r+0x14>
 8006388:	2316      	movs	r3, #22
 800638a:	6003      	str	r3, [r0, #0]
 800638c:	f04f 30ff 	mov.w	r0, #4294967295
 8006390:	bd38      	pop	{r3, r4, r5, pc}
 8006392:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006394:	b112      	cbz	r2, 800639c <_raise_r+0x1e>
 8006396:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800639a:	b94b      	cbnz	r3, 80063b0 <_raise_r+0x32>
 800639c:	4628      	mov	r0, r5
 800639e:	f000 f831 	bl	8006404 <_getpid_r>
 80063a2:	4622      	mov	r2, r4
 80063a4:	4601      	mov	r1, r0
 80063a6:	4628      	mov	r0, r5
 80063a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063ac:	f000 b818 	b.w	80063e0 <_kill_r>
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d00a      	beq.n	80063ca <_raise_r+0x4c>
 80063b4:	1c59      	adds	r1, r3, #1
 80063b6:	d103      	bne.n	80063c0 <_raise_r+0x42>
 80063b8:	2316      	movs	r3, #22
 80063ba:	6003      	str	r3, [r0, #0]
 80063bc:	2001      	movs	r0, #1
 80063be:	e7e7      	b.n	8006390 <_raise_r+0x12>
 80063c0:	2100      	movs	r1, #0
 80063c2:	4620      	mov	r0, r4
 80063c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80063c8:	4798      	blx	r3
 80063ca:	2000      	movs	r0, #0
 80063cc:	e7e0      	b.n	8006390 <_raise_r+0x12>
	...

080063d0 <raise>:
 80063d0:	4b02      	ldr	r3, [pc, #8]	@ (80063dc <raise+0xc>)
 80063d2:	4601      	mov	r1, r0
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	f7ff bfd2 	b.w	800637e <_raise_r>
 80063da:	bf00      	nop
 80063dc:	20000018 	.word	0x20000018

080063e0 <_kill_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	2300      	movs	r3, #0
 80063e4:	4d06      	ldr	r5, [pc, #24]	@ (8006400 <_kill_r+0x20>)
 80063e6:	4604      	mov	r4, r0
 80063e8:	4608      	mov	r0, r1
 80063ea:	4611      	mov	r1, r2
 80063ec:	602b      	str	r3, [r5, #0]
 80063ee:	f7fb fa74 	bl	80018da <_kill>
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	d102      	bne.n	80063fc <_kill_r+0x1c>
 80063f6:	682b      	ldr	r3, [r5, #0]
 80063f8:	b103      	cbz	r3, 80063fc <_kill_r+0x1c>
 80063fa:	6023      	str	r3, [r4, #0]
 80063fc:	bd38      	pop	{r3, r4, r5, pc}
 80063fe:	bf00      	nop
 8006400:	2000040c 	.word	0x2000040c

08006404 <_getpid_r>:
 8006404:	f7fb ba62 	b.w	80018cc <_getpid>

08006408 <sqrt>:
 8006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640a:	4606      	mov	r6, r0
 800640c:	460f      	mov	r7, r1
 800640e:	f000 f81f 	bl	8006450 <__ieee754_sqrt>
 8006412:	4632      	mov	r2, r6
 8006414:	4604      	mov	r4, r0
 8006416:	460d      	mov	r5, r1
 8006418:	463b      	mov	r3, r7
 800641a:	4630      	mov	r0, r6
 800641c:	4639      	mov	r1, r7
 800641e:	f7fa faf5 	bl	8000a0c <__aeabi_dcmpun>
 8006422:	b990      	cbnz	r0, 800644a <sqrt+0x42>
 8006424:	2200      	movs	r2, #0
 8006426:	2300      	movs	r3, #0
 8006428:	4630      	mov	r0, r6
 800642a:	4639      	mov	r1, r7
 800642c:	f7fa fac6 	bl	80009bc <__aeabi_dcmplt>
 8006430:	b158      	cbz	r0, 800644a <sqrt+0x42>
 8006432:	f7fe f90f 	bl	8004654 <__errno>
 8006436:	2321      	movs	r3, #33	@ 0x21
 8006438:	2200      	movs	r2, #0
 800643a:	6003      	str	r3, [r0, #0]
 800643c:	2300      	movs	r3, #0
 800643e:	4610      	mov	r0, r2
 8006440:	4619      	mov	r1, r3
 8006442:	f7fa f973 	bl	800072c <__aeabi_ddiv>
 8006446:	4604      	mov	r4, r0
 8006448:	460d      	mov	r5, r1
 800644a:	4620      	mov	r0, r4
 800644c:	4629      	mov	r1, r5
 800644e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006450 <__ieee754_sqrt>:
 8006450:	4a67      	ldr	r2, [pc, #412]	@ (80065f0 <__ieee754_sqrt+0x1a0>)
 8006452:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006456:	438a      	bics	r2, r1
 8006458:	4606      	mov	r6, r0
 800645a:	460f      	mov	r7, r1
 800645c:	460b      	mov	r3, r1
 800645e:	4604      	mov	r4, r0
 8006460:	d10e      	bne.n	8006480 <__ieee754_sqrt+0x30>
 8006462:	4602      	mov	r2, r0
 8006464:	f7fa f838 	bl	80004d8 <__aeabi_dmul>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4630      	mov	r0, r6
 800646e:	4639      	mov	r1, r7
 8006470:	f7f9 fe7c 	bl	800016c <__adddf3>
 8006474:	4606      	mov	r6, r0
 8006476:	460f      	mov	r7, r1
 8006478:	4630      	mov	r0, r6
 800647a:	4639      	mov	r1, r7
 800647c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006480:	2900      	cmp	r1, #0
 8006482:	dc0c      	bgt.n	800649e <__ieee754_sqrt+0x4e>
 8006484:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006488:	4302      	orrs	r2, r0
 800648a:	d0f5      	beq.n	8006478 <__ieee754_sqrt+0x28>
 800648c:	b189      	cbz	r1, 80064b2 <__ieee754_sqrt+0x62>
 800648e:	4602      	mov	r2, r0
 8006490:	f7f9 fe6a 	bl	8000168 <__aeabi_dsub>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	f7fa f948 	bl	800072c <__aeabi_ddiv>
 800649c:	e7ea      	b.n	8006474 <__ieee754_sqrt+0x24>
 800649e:	150a      	asrs	r2, r1, #20
 80064a0:	d115      	bne.n	80064ce <__ieee754_sqrt+0x7e>
 80064a2:	2100      	movs	r1, #0
 80064a4:	e009      	b.n	80064ba <__ieee754_sqrt+0x6a>
 80064a6:	0ae3      	lsrs	r3, r4, #11
 80064a8:	3a15      	subs	r2, #21
 80064aa:	0564      	lsls	r4, r4, #21
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0fa      	beq.n	80064a6 <__ieee754_sqrt+0x56>
 80064b0:	e7f7      	b.n	80064a2 <__ieee754_sqrt+0x52>
 80064b2:	460a      	mov	r2, r1
 80064b4:	e7fa      	b.n	80064ac <__ieee754_sqrt+0x5c>
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	3101      	adds	r1, #1
 80064ba:	02d8      	lsls	r0, r3, #11
 80064bc:	d5fb      	bpl.n	80064b6 <__ieee754_sqrt+0x66>
 80064be:	1e48      	subs	r0, r1, #1
 80064c0:	1a12      	subs	r2, r2, r0
 80064c2:	f1c1 0020 	rsb	r0, r1, #32
 80064c6:	fa24 f000 	lsr.w	r0, r4, r0
 80064ca:	4303      	orrs	r3, r0
 80064cc:	408c      	lsls	r4, r1
 80064ce:	2600      	movs	r6, #0
 80064d0:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80064d4:	2116      	movs	r1, #22
 80064d6:	07d2      	lsls	r2, r2, #31
 80064d8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80064dc:	4632      	mov	r2, r6
 80064de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064e6:	bf5c      	itt	pl
 80064e8:	005b      	lslpl	r3, r3, #1
 80064ea:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80064ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80064f2:	bf58      	it	pl
 80064f4:	0064      	lslpl	r4, r4, #1
 80064f6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80064fa:	107f      	asrs	r7, r7, #1
 80064fc:	0064      	lsls	r4, r4, #1
 80064fe:	1815      	adds	r5, r2, r0
 8006500:	429d      	cmp	r5, r3
 8006502:	bfde      	ittt	le
 8006504:	182a      	addle	r2, r5, r0
 8006506:	1b5b      	suble	r3, r3, r5
 8006508:	1836      	addle	r6, r6, r0
 800650a:	0fe5      	lsrs	r5, r4, #31
 800650c:	3901      	subs	r1, #1
 800650e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006512:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006516:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800651a:	d1f0      	bne.n	80064fe <__ieee754_sqrt+0xae>
 800651c:	460d      	mov	r5, r1
 800651e:	f04f 0a20 	mov.w	sl, #32
 8006522:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006526:	429a      	cmp	r2, r3
 8006528:	eb01 0c00 	add.w	ip, r1, r0
 800652c:	db02      	blt.n	8006534 <__ieee754_sqrt+0xe4>
 800652e:	d113      	bne.n	8006558 <__ieee754_sqrt+0x108>
 8006530:	45a4      	cmp	ip, r4
 8006532:	d811      	bhi.n	8006558 <__ieee754_sqrt+0x108>
 8006534:	f1bc 0f00 	cmp.w	ip, #0
 8006538:	eb0c 0100 	add.w	r1, ip, r0
 800653c:	da42      	bge.n	80065c4 <__ieee754_sqrt+0x174>
 800653e:	2900      	cmp	r1, #0
 8006540:	db40      	blt.n	80065c4 <__ieee754_sqrt+0x174>
 8006542:	f102 0e01 	add.w	lr, r2, #1
 8006546:	1a9b      	subs	r3, r3, r2
 8006548:	4672      	mov	r2, lr
 800654a:	45a4      	cmp	ip, r4
 800654c:	bf88      	it	hi
 800654e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006552:	eba4 040c 	sub.w	r4, r4, ip
 8006556:	4405      	add	r5, r0
 8006558:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800655c:	f1ba 0a01 	subs.w	sl, sl, #1
 8006560:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006564:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006568:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800656c:	d1db      	bne.n	8006526 <__ieee754_sqrt+0xd6>
 800656e:	431c      	orrs	r4, r3
 8006570:	d01a      	beq.n	80065a8 <__ieee754_sqrt+0x158>
 8006572:	4c20      	ldr	r4, [pc, #128]	@ (80065f4 <__ieee754_sqrt+0x1a4>)
 8006574:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80065f8 <__ieee754_sqrt+0x1a8>
 8006578:	e9d4 0100 	ldrd	r0, r1, [r4]
 800657c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006580:	f7f9 fdf2 	bl	8000168 <__aeabi_dsub>
 8006584:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4640      	mov	r0, r8
 800658e:	4649      	mov	r1, r9
 8006590:	f7fa fa1e 	bl	80009d0 <__aeabi_dcmple>
 8006594:	b140      	cbz	r0, 80065a8 <__ieee754_sqrt+0x158>
 8006596:	e9d4 0100 	ldrd	r0, r1, [r4]
 800659a:	e9db 2300 	ldrd	r2, r3, [fp]
 800659e:	f1b5 3fff 	cmp.w	r5, #4294967295
 80065a2:	d111      	bne.n	80065c8 <__ieee754_sqrt+0x178>
 80065a4:	4655      	mov	r5, sl
 80065a6:	3601      	adds	r6, #1
 80065a8:	1072      	asrs	r2, r6, #1
 80065aa:	086b      	lsrs	r3, r5, #1
 80065ac:	07f1      	lsls	r1, r6, #31
 80065ae:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80065b2:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80065b6:	bf48      	it	mi
 80065b8:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80065bc:	4618      	mov	r0, r3
 80065be:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80065c2:	e757      	b.n	8006474 <__ieee754_sqrt+0x24>
 80065c4:	4696      	mov	lr, r2
 80065c6:	e7be      	b.n	8006546 <__ieee754_sqrt+0xf6>
 80065c8:	f7f9 fdd0 	bl	800016c <__adddf3>
 80065cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7fa f9f0 	bl	80009bc <__aeabi_dcmplt>
 80065dc:	b120      	cbz	r0, 80065e8 <__ieee754_sqrt+0x198>
 80065de:	1ca8      	adds	r0, r5, #2
 80065e0:	bf08      	it	eq
 80065e2:	3601      	addeq	r6, #1
 80065e4:	3502      	adds	r5, #2
 80065e6:	e7df      	b.n	80065a8 <__ieee754_sqrt+0x158>
 80065e8:	1c6b      	adds	r3, r5, #1
 80065ea:	f023 0501 	bic.w	r5, r3, #1
 80065ee:	e7db      	b.n	80065a8 <__ieee754_sqrt+0x158>
 80065f0:	7ff00000 	.word	0x7ff00000
 80065f4:	200001e0 	.word	0x200001e0
 80065f8:	200001d8 	.word	0x200001d8

080065fc <_init>:
 80065fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fe:	bf00      	nop
 8006600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006602:	bc08      	pop	{r3}
 8006604:	469e      	mov	lr, r3
 8006606:	4770      	bx	lr

08006608 <_fini>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	bf00      	nop
 800660c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660e:	bc08      	pop	{r3}
 8006610:	469e      	mov	lr, r3
 8006612:	4770      	bx	lr
