
MS4525DO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003874  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08003980  08003980  00004980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa8  08003aa8  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003aa8  08003aa8  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003aa8  08003aa8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa8  08003aa8  00004aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003aac  08003aac  00004aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003ab0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000068  08003b18  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08003b18  000052a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b873  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cef  00000000  00000000  00010904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  000125f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000887  00000000  00000000  000130f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001860c  00000000  00000000  0001397f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db56  00000000  00000000  0002bf8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000893f9  00000000  00000000  00039ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2eda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003538  00000000  00000000  000c2f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c6458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003968 	.word	0x08003968

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003968 	.word	0x08003968

0800014c <_write>:
#include "MS4525DO.h"

// Use the handle for the UART you configured (e.g., huart2)
extern UART_HandleTypeDef huart1;

int _write(int file, char *data, int len) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
    // Transmit data via UART
    HAL_UART_Transmit(&huart1, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	b29a      	uxth	r2, r3
 800015c:	f04f 33ff 	mov.w	r3, #4294967295
 8000160:	68b9      	ldr	r1, [r7, #8]
 8000162:	4804      	ldr	r0, [pc, #16]	@ (8000174 <_write+0x28>)
 8000164:	f002 fa94 	bl	8002690 <HAL_UART_Transmit>
    return len;
 8000168:	687b      	ldr	r3, [r7, #4]
}
 800016a:	4618      	mov	r0, r3
 800016c:	3710      	adds	r7, #16
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	20000104 	.word	0x20000104

08000178 <MS4525DO_assignI2C>:
I2C_HandleTypeDef *MS4525DO_i2c_port;

/**
 * Configures which i2c port MS4525DO is on
 */
void MS4525DO_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	MS4525DO_i2c_port = hi2c_device;
 8000180:	4a03      	ldr	r2, [pc, #12]	@ (8000190 <MS4525DO_assignI2C+0x18>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	6013      	str	r3, [r2, #0]
}
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000084 	.word	0x20000084

08000194 <read_MS4525DO>:
void read_MS4525DO(){
 8000194:	b580      	push	{r7, lr}
 8000196:	b086      	sub	sp, #24
 8000198:	af02      	add	r7, sp, #8
	uint8_t data_buffer[4]; //data buffer to store raw I2C data
	HAL_StatusTypeDef status=HAL_I2C_Master_Receive(MS4525DO_i2c_port, ADDRESS_I2C_MS4525DO << 1, data_buffer, sizeof(data_buffer), HAL_MAX_DELAY);
 800019a:	4b3a      	ldr	r3, [pc, #232]	@ (8000284 <read_MS4525DO+0xf0>)
 800019c:	6818      	ldr	r0, [r3, #0]
 800019e:	1d3a      	adds	r2, r7, #4
 80001a0:	f04f 33ff 	mov.w	r3, #4294967295
 80001a4:	9300      	str	r3, [sp, #0]
 80001a6:	2304      	movs	r3, #4
 80001a8:	218c      	movs	r1, #140	@ 0x8c
 80001aa:	f001 f953 	bl	8001454 <HAL_I2C_Master_Receive>
 80001ae:	4603      	mov	r3, r0
 80001b0:	73fb      	strb	r3, [r7, #15]
#ifdef VERBOSE_MODE_EN
    if (status == HAL_OK) {
 80001b2:	7bfb      	ldrb	r3, [r7, #15]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d103      	bne.n	80001c0 <read_MS4525DO+0x2c>
        printf("HAL_OK\r\n");
 80001b8:	4833      	ldr	r0, [pc, #204]	@ (8000288 <read_MS4525DO+0xf4>)
 80001ba:	f002 fd67 	bl	8002c8c <puts>
 80001be:	e013      	b.n	80001e8 <read_MS4525DO+0x54>
    } else if (status == HAL_ERROR) {
 80001c0:	7bfb      	ldrb	r3, [r7, #15]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d103      	bne.n	80001ce <read_MS4525DO+0x3a>
    	printf("HAL_ERROR\r\n");
 80001c6:	4831      	ldr	r0, [pc, #196]	@ (800028c <read_MS4525DO+0xf8>)
 80001c8:	f002 fd60 	bl	8002c8c <puts>
 80001cc:	e00c      	b.n	80001e8 <read_MS4525DO+0x54>
    } else if (status == HAL_BUSY) {
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	2b02      	cmp	r3, #2
 80001d2:	d103      	bne.n	80001dc <read_MS4525DO+0x48>
    	printf("HAL_BUSY\r\n");
 80001d4:	482e      	ldr	r0, [pc, #184]	@ (8000290 <read_MS4525DO+0xfc>)
 80001d6:	f002 fd59 	bl	8002c8c <puts>
 80001da:	e005      	b.n	80001e8 <read_MS4525DO+0x54>
    } else if (status == HAL_TIMEOUT) {
 80001dc:	7bfb      	ldrb	r3, [r7, #15]
 80001de:	2b03      	cmp	r3, #3
 80001e0:	d102      	bne.n	80001e8 <read_MS4525DO+0x54>
        printf("HAL_TIMEOUT\r\n");
 80001e2:	482c      	ldr	r0, [pc, #176]	@ (8000294 <read_MS4525DO+0x100>)
 80001e4:	f002 fd52 	bl	8002c8c <puts>
    }

    uint32_t error = HAL_I2C_GetError(MS4525DO_i2c_port);
 80001e8:	4b26      	ldr	r3, [pc, #152]	@ (8000284 <read_MS4525DO+0xf0>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4618      	mov	r0, r3
 80001ee:	f001 fb9d 	bl	800192c <HAL_I2C_GetError>
 80001f2:	60b8      	str	r0, [r7, #8]
    if (error == HAL_I2C_ERROR_NONE) {
 80001f4:	68bb      	ldr	r3, [r7, #8]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d103      	bne.n	8000202 <read_MS4525DO+0x6e>
      printf("no errors \r\n");
 80001fa:	4827      	ldr	r0, [pc, #156]	@ (8000298 <read_MS4525DO+0x104>)
 80001fc:	f002 fd46 	bl	8002c8c <puts>
 8000200:	e028      	b.n	8000254 <read_MS4525DO+0xc0>
    } else if (error == HAL_I2C_ERROR_BERR) {
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	2b01      	cmp	r3, #1
 8000206:	d103      	bne.n	8000210 <read_MS4525DO+0x7c>
      printf("HAL_I2C_ERROR_BERR\r\n");
 8000208:	4824      	ldr	r0, [pc, #144]	@ (800029c <read_MS4525DO+0x108>)
 800020a:	f002 fd3f 	bl	8002c8c <puts>
 800020e:	e021      	b.n	8000254 <read_MS4525DO+0xc0>
    } else if (error == HAL_I2C_ERROR_ARLO) {
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	2b02      	cmp	r3, #2
 8000214:	d103      	bne.n	800021e <read_MS4525DO+0x8a>
      printf("HAL_I2C_ERROR_ARLO\r\n");
 8000216:	4822      	ldr	r0, [pc, #136]	@ (80002a0 <read_MS4525DO+0x10c>)
 8000218:	f002 fd38 	bl	8002c8c <puts>
 800021c:	e01a      	b.n	8000254 <read_MS4525DO+0xc0>
    } else if (error == HAL_I2C_ERROR_AF) {
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	2b04      	cmp	r3, #4
 8000222:	d103      	bne.n	800022c <read_MS4525DO+0x98>
      printf("HAL_I2C_ERROR_AF\r\n");
 8000224:	481f      	ldr	r0, [pc, #124]	@ (80002a4 <read_MS4525DO+0x110>)
 8000226:	f002 fd31 	bl	8002c8c <puts>
 800022a:	e013      	b.n	8000254 <read_MS4525DO+0xc0>
    } else if (error == HAL_I2C_ERROR_OVR) {
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	2b08      	cmp	r3, #8
 8000230:	d103      	bne.n	800023a <read_MS4525DO+0xa6>
      printf("HAL_I2C_ERROR_OVR\r\n");
 8000232:	481d      	ldr	r0, [pc, #116]	@ (80002a8 <read_MS4525DO+0x114>)
 8000234:	f002 fd2a 	bl	8002c8c <puts>
 8000238:	e00c      	b.n	8000254 <read_MS4525DO+0xc0>
    } else if (error == HAL_I2C_ERROR_DMA) {
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	2b10      	cmp	r3, #16
 800023e:	d103      	bne.n	8000248 <read_MS4525DO+0xb4>
      printf("HAL_I2C_ERROR_DMA\r\n");
 8000240:	481a      	ldr	r0, [pc, #104]	@ (80002ac <read_MS4525DO+0x118>)
 8000242:	f002 fd23 	bl	8002c8c <puts>
 8000246:	e005      	b.n	8000254 <read_MS4525DO+0xc0>
    } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	2b20      	cmp	r3, #32
 800024c:	d102      	bne.n	8000254 <read_MS4525DO+0xc0>
      printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800024e:	4818      	ldr	r0, [pc, #96]	@ (80002b0 <read_MS4525DO+0x11c>)
 8000250:	f002 fd1c 	bl	8002c8c <puts>
    }
    printf("%u, ",data_buffer[0]);
 8000254:	793b      	ldrb	r3, [r7, #4]
 8000256:	4619      	mov	r1, r3
 8000258:	4816      	ldr	r0, [pc, #88]	@ (80002b4 <read_MS4525DO+0x120>)
 800025a:	f002 fcaf 	bl	8002bbc <iprintf>
    printf("%u, ",data_buffer[1]);
 800025e:	797b      	ldrb	r3, [r7, #5]
 8000260:	4619      	mov	r1, r3
 8000262:	4814      	ldr	r0, [pc, #80]	@ (80002b4 <read_MS4525DO+0x120>)
 8000264:	f002 fcaa 	bl	8002bbc <iprintf>
    printf("%u, ",data_buffer[2]);
 8000268:	79bb      	ldrb	r3, [r7, #6]
 800026a:	4619      	mov	r1, r3
 800026c:	4811      	ldr	r0, [pc, #68]	@ (80002b4 <read_MS4525DO+0x120>)
 800026e:	f002 fca5 	bl	8002bbc <iprintf>
    printf("%u \r\n",data_buffer[3]);
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	4619      	mov	r1, r3
 8000276:	4810      	ldr	r0, [pc, #64]	@ (80002b8 <read_MS4525DO+0x124>)
 8000278:	f002 fca0 	bl	8002bbc <iprintf>
#endif
}
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000084 	.word	0x20000084
 8000288:	08003980 	.word	0x08003980
 800028c:	08003988 	.word	0x08003988
 8000290:	08003994 	.word	0x08003994
 8000294:	080039a0 	.word	0x080039a0
 8000298:	080039b0 	.word	0x080039b0
 800029c:	080039bc 	.word	0x080039bc
 80002a0:	080039d0 	.word	0x080039d0
 80002a4:	080039e4 	.word	0x080039e4
 80002a8:	080039f8 	.word	0x080039f8
 80002ac:	08003a0c 	.word	0x08003a0c
 80002b0:	08003a20 	.word	0x08003a20
 80002b4:	08003a38 	.word	0x08003a38
 80002b8:	08003a40 	.word	0x08003a40

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c0:	f000 fb82 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c4:	f000 f812 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c8:	f000 f8d8 	bl	800047c <MX_GPIO_Init>
  MX_I2C1_Init();
 80002cc:	f000 f87e 	bl	80003cc <MX_I2C1_Init>
  MX_CAN_Init();
 80002d0:	f000 f848 	bl	8000364 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80002d4:	f000 f8a8 	bl	8000428 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  MS4525DO_assignI2C(&hi2c1);
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <main+0x2c>)
 80002da:	f7ff ff4d 	bl	8000178 <MS4525DO_assignI2C>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_MS4525DO();
 80002de:	f7ff ff59 	bl	8000194 <read_MS4525DO>
  {
 80002e2:	bf00      	nop
 80002e4:	e7fb      	b.n	80002de <main+0x22>
 80002e6:	bf00      	nop
 80002e8:	200000b0 	.word	0x200000b0

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b090      	sub	sp, #64	@ 0x40
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2228      	movs	r2, #40	@ 0x28
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fda6 	bl	8002e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030e:	2302      	movs	r3, #2
 8000310:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000312:	2301      	movs	r3, #1
 8000314:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000316:	2310      	movs	r3, #16
 8000318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031a:	2300      	movs	r3, #0
 800031c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031e:	f107 0318 	add.w	r3, r7, #24
 8000322:	4618      	mov	r0, r3
 8000324:	f001 fd54 	bl	8001dd0 <HAL_RCC_OscConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800032e:	f000 f94b 	bl	80005c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000332:	230f      	movs	r3, #15
 8000334:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000336:	2300      	movs	r3, #0
 8000338:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f001 ffc2 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000356:	f000 f937 	bl	80005c8 <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	3740      	adds	r7, #64	@ 0x40
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
	...

08000364 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000368:	4b16      	ldr	r3, [pc, #88]	@ (80003c4 <MX_CAN_Init+0x60>)
 800036a:	4a17      	ldr	r2, [pc, #92]	@ (80003c8 <MX_CAN_Init+0x64>)
 800036c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800036e:	4b15      	ldr	r3, [pc, #84]	@ (80003c4 <MX_CAN_Init+0x60>)
 8000370:	2210      	movs	r2, #16
 8000372:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000374:	4b13      	ldr	r3, [pc, #76]	@ (80003c4 <MX_CAN_Init+0x60>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800037a:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <MX_CAN_Init+0x60>)
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000380:	4b10      	ldr	r3, [pc, #64]	@ (80003c4 <MX_CAN_Init+0x60>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000386:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <MX_CAN_Init+0x60>)
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800038c:	4b0d      	ldr	r3, [pc, #52]	@ (80003c4 <MX_CAN_Init+0x60>)
 800038e:	2200      	movs	r2, #0
 8000390:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000392:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <MX_CAN_Init+0x60>)
 8000394:	2200      	movs	r2, #0
 8000396:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000398:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <MX_CAN_Init+0x60>)
 800039a:	2200      	movs	r2, #0
 800039c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800039e:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <MX_CAN_Init+0x60>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003a4:	4b07      	ldr	r3, [pc, #28]	@ (80003c4 <MX_CAN_Init+0x60>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003aa:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <MX_CAN_Init+0x60>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003b0:	4804      	ldr	r0, [pc, #16]	@ (80003c4 <MX_CAN_Init+0x60>)
 80003b2:	f000 fb8f 	bl	8000ad4 <HAL_CAN_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80003bc:	f000 f904 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000088 	.word	0x20000088
 80003c8:	40006400 	.word	0x40006400

080003cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003d0:	4b12      	ldr	r3, [pc, #72]	@ (800041c <MX_I2C1_Init+0x50>)
 80003d2:	4a13      	ldr	r2, [pc, #76]	@ (8000420 <MX_I2C1_Init+0x54>)
 80003d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003d6:	4b11      	ldr	r3, [pc, #68]	@ (800041c <MX_I2C1_Init+0x50>)
 80003d8:	4a12      	ldr	r2, [pc, #72]	@ (8000424 <MX_I2C1_Init+0x58>)
 80003da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <MX_I2C1_Init+0x50>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <MX_I2C1_Init+0x50>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <MX_I2C1_Init+0x50>)
 80003ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <MX_I2C1_Init+0x50>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003f6:	4b09      	ldr	r3, [pc, #36]	@ (800041c <MX_I2C1_Init+0x50>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003fc:	4b07      	ldr	r3, [pc, #28]	@ (800041c <MX_I2C1_Init+0x50>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000402:	4b06      	ldr	r3, [pc, #24]	@ (800041c <MX_I2C1_Init+0x50>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000408:	4804      	ldr	r0, [pc, #16]	@ (800041c <MX_I2C1_Init+0x50>)
 800040a:	f000 fedf 	bl	80011cc <HAL_I2C_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000414:	f000 f8d8 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	200000b0 	.word	0x200000b0
 8000420:	40005400 	.word	0x40005400
 8000424:	000186a0 	.word	0x000186a0

08000428 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800042c:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <MX_USART1_UART_Init+0x4c>)
 800042e:	4a12      	ldr	r2, [pc, #72]	@ (8000478 <MX_USART1_UART_Init+0x50>)
 8000430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000432:	4b10      	ldr	r3, [pc, #64]	@ (8000474 <MX_USART1_UART_Init+0x4c>)
 8000434:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800043a:	4b0e      	ldr	r3, [pc, #56]	@ (8000474 <MX_USART1_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000440:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <MX_USART1_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	@ (8000474 <MX_USART1_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800044c:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <MX_USART1_UART_Init+0x4c>)
 800044e:	220c      	movs	r2, #12
 8000450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000452:	4b08      	ldr	r3, [pc, #32]	@ (8000474 <MX_USART1_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000458:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <MX_USART1_UART_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800045e:	4805      	ldr	r0, [pc, #20]	@ (8000474 <MX_USART1_UART_Init+0x4c>)
 8000460:	f002 f8c6 	bl	80025f0 <HAL_UART_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800046a:	f000 f8ad 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000104 	.word	0x20000104
 8000478:	40013800 	.word	0x40013800

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000490:	4b49      	ldr	r3, [pc, #292]	@ (80005b8 <MX_GPIO_Init+0x13c>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a48      	ldr	r2, [pc, #288]	@ (80005b8 <MX_GPIO_Init+0x13c>)
 8000496:	f043 0310 	orr.w	r3, r3, #16
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b46      	ldr	r3, [pc, #280]	@ (80005b8 <MX_GPIO_Init+0x13c>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0310 	and.w	r3, r3, #16
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a8:	4b43      	ldr	r3, [pc, #268]	@ (80005b8 <MX_GPIO_Init+0x13c>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a42      	ldr	r2, [pc, #264]	@ (80005b8 <MX_GPIO_Init+0x13c>)
 80004ae:	f043 0320 	orr.w	r3, r3, #32
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b40      	ldr	r3, [pc, #256]	@ (80005b8 <MX_GPIO_Init+0x13c>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0320 	and.w	r3, r3, #32
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b3d      	ldr	r3, [pc, #244]	@ (80005b8 <MX_GPIO_Init+0x13c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a3c      	ldr	r2, [pc, #240]	@ (80005b8 <MX_GPIO_Init+0x13c>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b3a      	ldr	r3, [pc, #232]	@ (80005b8 <MX_GPIO_Init+0x13c>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b37      	ldr	r3, [pc, #220]	@ (80005b8 <MX_GPIO_Init+0x13c>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a36      	ldr	r2, [pc, #216]	@ (80005b8 <MX_GPIO_Init+0x13c>)
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b34      	ldr	r3, [pc, #208]	@ (80005b8 <MX_GPIO_Init+0x13c>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0308 	and.w	r3, r3, #8
 80004ec:	603b      	str	r3, [r7, #0]
 80004ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80004f6:	4831      	ldr	r0, [pc, #196]	@ (80005bc <MX_GPIO_Init+0x140>)
 80004f8:	f000 fe50 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000502:	482f      	ldr	r0, [pc, #188]	@ (80005c0 <MX_GPIO_Init+0x144>)
 8000504:	f000 fe4a 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2120      	movs	r1, #32
 800050c:	482d      	ldr	r0, [pc, #180]	@ (80005c4 <MX_GPIO_Init+0x148>)
 800050e:	f000 fe45 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000512:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	2301      	movs	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2302      	movs	r3, #2
 8000522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4824      	ldr	r0, [pc, #144]	@ (80005bc <MX_GPIO_Init+0x140>)
 800052c:	f000 fcb2 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000530:	2302      	movs	r3, #2
 8000532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000534:	2303      	movs	r3, #3
 8000536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	4820      	ldr	r0, [pc, #128]	@ (80005c0 <MX_GPIO_Init+0x144>)
 8000540:	f000 fca8 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000544:	2304      	movs	r3, #4
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4619      	mov	r1, r3
 8000556:	481a      	ldr	r0, [pc, #104]	@ (80005c0 <MX_GPIO_Init+0x144>)
 8000558:	f000 fc9c 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800055c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2302      	movs	r3, #2
 800056c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	4812      	ldr	r0, [pc, #72]	@ (80005c0 <MX_GPIO_Init+0x144>)
 8000576:	f000 fc8d 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB15 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3;
 800057a:	f24c 0309 	movw	r3, #49161	@ 0xc009
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	480d      	ldr	r0, [pc, #52]	@ (80005c4 <MX_GPIO_Init+0x148>)
 8000590:	f000 fc80 	bl	8000e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000594:	2320      	movs	r3, #32
 8000596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	4806      	ldr	r0, [pc, #24]	@ (80005c4 <MX_GPIO_Init+0x148>)
 80005ac:	f000 fc72 	bl	8000e94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b0:	bf00      	nop
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40011000 	.word	0x40011000
 80005c0:	40010800 	.word	0x40010800
 80005c4:	40010c00 	.word	0x40010c00

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2140      	movs	r1, #64	@ 0x40
 80005d4:	4809      	ldr	r0, [pc, #36]	@ (80005fc <Error_Handler+0x34>)
 80005d6:	f000 fde1 	bl	800119c <HAL_GPIO_WritePin>
	      HAL_Delay(500);
 80005da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005de:	f000 fa55 	bl	8000a8c <HAL_Delay>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2140      	movs	r1, #64	@ 0x40
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <Error_Handler+0x34>)
 80005e8:	f000 fdd8 	bl	800119c <HAL_GPIO_WritePin>
	      HAL_Delay(500);
 80005ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005f0:	f000 fa4c 	bl	8000a8c <HAL_Delay>
	 break;
 80005f4:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40010800 	.word	0x40010800

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000606:	4b15      	ldr	r3, [pc, #84]	@ (800065c <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a14      	ldr	r2, [pc, #80]	@ (800065c <HAL_MspInit+0x5c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b12      	ldr	r3, [pc, #72]	@ (800065c <HAL_MspInit+0x5c>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a0e      	ldr	r2, [pc, #56]	@ (800065c <HAL_MspInit+0x5c>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <HAL_MspInit+0x5c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <HAL_MspInit+0x60>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <HAL_MspInit+0x60>)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000
 8000660:	40010000 	.word	0x40010000

08000664 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a1c      	ldr	r2, [pc, #112]	@ (80006f0 <HAL_CAN_MspInit+0x8c>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d131      	bne.n	80006e8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <HAL_CAN_MspInit+0x90>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	4a1a      	ldr	r2, [pc, #104]	@ (80006f4 <HAL_CAN_MspInit+0x90>)
 800068a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800068e:	61d3      	str	r3, [r2, #28]
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <HAL_CAN_MspInit+0x90>)
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <HAL_CAN_MspInit+0x90>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a14      	ldr	r2, [pc, #80]	@ (80006f4 <HAL_CAN_MspInit+0x90>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <HAL_CAN_MspInit+0x90>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	4619      	mov	r1, r3
 80006c8:	480b      	ldr	r0, [pc, #44]	@ (80006f8 <HAL_CAN_MspInit+0x94>)
 80006ca:	f000 fbe3 	bl	8000e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d8:	2303      	movs	r3, #3
 80006da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <HAL_CAN_MspInit+0x94>)
 80006e4:	f000 fbd6 	bl	8000e94 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40006400 	.word	0x40006400
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010800 	.word	0x40010800

080006fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a15      	ldr	r2, [pc, #84]	@ (800076c <HAL_I2C_MspInit+0x70>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d123      	bne.n	8000764 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <HAL_I2C_MspInit+0x74>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a13      	ldr	r2, [pc, #76]	@ (8000770 <HAL_I2C_MspInit+0x74>)
 8000722:	f043 0308 	orr.w	r3, r3, #8
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <HAL_I2C_MspInit+0x74>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0308 	and.w	r3, r3, #8
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000734:	23c0      	movs	r3, #192	@ 0xc0
 8000736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000738:	2312      	movs	r3, #18
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	480b      	ldr	r0, [pc, #44]	@ (8000774 <HAL_I2C_MspInit+0x78>)
 8000748:	f000 fba4 	bl	8000e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074c:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <HAL_I2C_MspInit+0x74>)
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	4a07      	ldr	r2, [pc, #28]	@ (8000770 <HAL_I2C_MspInit+0x74>)
 8000752:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000756:	61d3      	str	r3, [r2, #28]
 8000758:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <HAL_I2C_MspInit+0x74>)
 800075a:	69db      	ldr	r3, [r3, #28]
 800075c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40005400 	.word	0x40005400
 8000770:	40021000 	.word	0x40021000
 8000774:	40010c00 	.word	0x40010c00

08000778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a1c      	ldr	r2, [pc, #112]	@ (8000804 <HAL_UART_MspInit+0x8c>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d131      	bne.n	80007fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <HAL_UART_MspInit+0x90>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a1a      	ldr	r2, [pc, #104]	@ (8000808 <HAL_UART_MspInit+0x90>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <HAL_UART_MspInit+0x90>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <HAL_UART_MspInit+0x90>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a14      	ldr	r2, [pc, #80]	@ (8000808 <HAL_UART_MspInit+0x90>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <HAL_UART_MspInit+0x90>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	4619      	mov	r1, r3
 80007dc:	480b      	ldr	r0, [pc, #44]	@ (800080c <HAL_UART_MspInit+0x94>)
 80007de:	f000 fb59 	bl	8000e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <HAL_UART_MspInit+0x94>)
 80007f8:	f000 fb4c 	bl	8000e94 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40013800 	.word	0x40013800
 8000808:	40021000 	.word	0x40021000
 800080c:	40010800 	.word	0x40010800

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <NMI_Handler+0x4>

08000818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <MemManage_Handler+0x4>

08000828 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <UsageFault_Handler+0x4>

08000838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000860:	f000 f8f8 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e00a      	b.n	8000890 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800087a:	f3af 8000 	nop.w
 800087e:	4601      	mov	r1, r0
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	60ba      	str	r2, [r7, #8]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3301      	adds	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbf0      	blt.n	800087a <_read+0x12>
  }

  return len;
 8000898:	687b      	ldr	r3, [r7, #4]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008c8:	605a      	str	r2, [r3, #4]
  return 0;
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr

080008d6 <_isatty>:

int _isatty(int file)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b085      	sub	sp, #20
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	60f8      	str	r0, [r7, #12]
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
	...

08000904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800090c:	4a14      	ldr	r2, [pc, #80]	@ (8000960 <_sbrk+0x5c>)
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <_sbrk+0x60>)
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000918:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <_sbrk+0x64>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d102      	bne.n	8000926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <_sbrk+0x64>)
 8000922:	4a12      	ldr	r2, [pc, #72]	@ (800096c <_sbrk+0x68>)
 8000924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000926:	4b10      	ldr	r3, [pc, #64]	@ (8000968 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	429a      	cmp	r2, r3
 8000932:	d207      	bcs.n	8000944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000934:	f002 fad8 	bl	8002ee8 <__errno>
 8000938:	4603      	mov	r3, r0
 800093a:	220c      	movs	r2, #12
 800093c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	e009      	b.n	8000958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094a:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	4a05      	ldr	r2, [pc, #20]	@ (8000968 <_sbrk+0x64>)
 8000954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20005000 	.word	0x20005000
 8000964:	00000400 	.word	0x00000400
 8000968:	2000014c 	.word	0x2000014c
 800096c:	200002a0 	.word	0x200002a0

08000970 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800097c:	f7ff fff8 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000982:	490c      	ldr	r1, [pc, #48]	@ (80009b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000984:	4a0c      	ldr	r2, [pc, #48]	@ (80009b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a09      	ldr	r2, [pc, #36]	@ (80009bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000998:	4c09      	ldr	r4, [pc, #36]	@ (80009c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a6:	f002 faa5 	bl	8002ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009aa:	f7ff fc87 	bl	80002bc <main>
  bx lr
 80009ae:	4770      	bx	lr
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009b8:	08003ab0 	.word	0x08003ab0
  ldr r2, =_sbss
 80009bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009c0:	200002a0 	.word	0x200002a0

080009c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_2_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_Init+0x28>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <HAL_Init+0x28>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 fa27 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009de:	200f      	movs	r0, #15
 80009e0:	f000 f808 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e4:	f7ff fe0c 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40022000 	.word	0x40022000

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_InitTick+0x54>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <HAL_InitTick+0x58>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fa31 	bl	8000e7a <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00e      	b.n	8000a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80a      	bhi.n	8000a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f000 fa07 	bl	8000e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4a06      	ldr	r2, [pc, #24]	@ (8000a50 <HAL_InitTick+0x5c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <HAL_IncTick+0x1c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <HAL_IncTick+0x20>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a03      	ldr	r2, [pc, #12]	@ (8000a74 <HAL_IncTick+0x20>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000150 	.word	0x20000150

08000a78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b02      	ldr	r3, [pc, #8]	@ (8000a88 <HAL_GetTick+0x10>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	20000150 	.word	0x20000150

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff fff0 	bl	8000a78 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ffe0 	bl	8000a78 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e0ed      	b.n	8000cc2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d102      	bne.n	8000af8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff fdb6 	bl	8000664 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f042 0201 	orr.w	r2, r2, #1
 8000b06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b08:	f7ff ffb6 	bl	8000a78 <HAL_GetTick>
 8000b0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b0e:	e012      	b.n	8000b36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b10:	f7ff ffb2 	bl	8000a78 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	2b0a      	cmp	r3, #10
 8000b1c:	d90b      	bls.n	8000b36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b22:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2205      	movs	r2, #5
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e0c5      	b.n	8000cc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d0e5      	beq.n	8000b10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 0202 	bic.w	r2, r2, #2
 8000b52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b54:	f7ff ff90 	bl	8000a78 <HAL_GetTick>
 8000b58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b5a:	e012      	b.n	8000b82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b5c:	f7ff ff8c 	bl	8000a78 <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	2b0a      	cmp	r3, #10
 8000b68:	d90b      	bls.n	8000b82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2205      	movs	r2, #5
 8000b7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e09f      	b.n	8000cc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d1e5      	bne.n	8000b5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7e1b      	ldrb	r3, [r3, #24]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d108      	bne.n	8000baa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	e007      	b.n	8000bba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7e5b      	ldrb	r3, [r3, #25]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d108      	bne.n	8000bd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	e007      	b.n	8000be4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000be2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7e9b      	ldrb	r3, [r3, #26]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d108      	bne.n	8000bfe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f042 0220 	orr.w	r2, r2, #32
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	e007      	b.n	8000c0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 0220 	bic.w	r2, r2, #32
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7edb      	ldrb	r3, [r3, #27]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d108      	bne.n	8000c28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 0210 	bic.w	r2, r2, #16
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	e007      	b.n	8000c38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f042 0210 	orr.w	r2, r2, #16
 8000c36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7f1b      	ldrb	r3, [r3, #28]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d108      	bne.n	8000c52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f042 0208 	orr.w	r2, r2, #8
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	e007      	b.n	8000c62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 0208 	bic.w	r2, r2, #8
 8000c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7f5b      	ldrb	r3, [r3, #29]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d108      	bne.n	8000c7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f042 0204 	orr.w	r2, r2, #4
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e007      	b.n	8000c8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f022 0204 	bic.w	r2, r2, #4
 8000c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	431a      	orrs	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	ea42 0103 	orr.w	r1, r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	1e5a      	subs	r2, r3, #1
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	@ (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	@ (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	@ (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	@ 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
         );
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	@ 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f7ff ff90 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff49 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff5e 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff90 	bl	8000d84 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5f 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffb0 	bl	8000de8 <SysTick_Config>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b08b      	sub	sp, #44	@ 0x2c
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea6:	e169      	b.n	800117c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	69fa      	ldr	r2, [r7, #28]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	f040 8158 	bne.w	8001176 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	4a9a      	ldr	r2, [pc, #616]	@ (8001134 <HAL_GPIO_Init+0x2a0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d05e      	beq.n	8000f8e <HAL_GPIO_Init+0xfa>
 8000ed0:	4a98      	ldr	r2, [pc, #608]	@ (8001134 <HAL_GPIO_Init+0x2a0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d875      	bhi.n	8000fc2 <HAL_GPIO_Init+0x12e>
 8000ed6:	4a98      	ldr	r2, [pc, #608]	@ (8001138 <HAL_GPIO_Init+0x2a4>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d058      	beq.n	8000f8e <HAL_GPIO_Init+0xfa>
 8000edc:	4a96      	ldr	r2, [pc, #600]	@ (8001138 <HAL_GPIO_Init+0x2a4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d86f      	bhi.n	8000fc2 <HAL_GPIO_Init+0x12e>
 8000ee2:	4a96      	ldr	r2, [pc, #600]	@ (800113c <HAL_GPIO_Init+0x2a8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d052      	beq.n	8000f8e <HAL_GPIO_Init+0xfa>
 8000ee8:	4a94      	ldr	r2, [pc, #592]	@ (800113c <HAL_GPIO_Init+0x2a8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d869      	bhi.n	8000fc2 <HAL_GPIO_Init+0x12e>
 8000eee:	4a94      	ldr	r2, [pc, #592]	@ (8001140 <HAL_GPIO_Init+0x2ac>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d04c      	beq.n	8000f8e <HAL_GPIO_Init+0xfa>
 8000ef4:	4a92      	ldr	r2, [pc, #584]	@ (8001140 <HAL_GPIO_Init+0x2ac>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d863      	bhi.n	8000fc2 <HAL_GPIO_Init+0x12e>
 8000efa:	4a92      	ldr	r2, [pc, #584]	@ (8001144 <HAL_GPIO_Init+0x2b0>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d046      	beq.n	8000f8e <HAL_GPIO_Init+0xfa>
 8000f00:	4a90      	ldr	r2, [pc, #576]	@ (8001144 <HAL_GPIO_Init+0x2b0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d85d      	bhi.n	8000fc2 <HAL_GPIO_Init+0x12e>
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d82a      	bhi.n	8000f60 <HAL_GPIO_Init+0xcc>
 8000f0a:	2b12      	cmp	r3, #18
 8000f0c:	d859      	bhi.n	8000fc2 <HAL_GPIO_Init+0x12e>
 8000f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f14 <HAL_GPIO_Init+0x80>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08000f8f 	.word	0x08000f8f
 8000f18:	08000f69 	.word	0x08000f69
 8000f1c:	08000f7b 	.word	0x08000f7b
 8000f20:	08000fbd 	.word	0x08000fbd
 8000f24:	08000fc3 	.word	0x08000fc3
 8000f28:	08000fc3 	.word	0x08000fc3
 8000f2c:	08000fc3 	.word	0x08000fc3
 8000f30:	08000fc3 	.word	0x08000fc3
 8000f34:	08000fc3 	.word	0x08000fc3
 8000f38:	08000fc3 	.word	0x08000fc3
 8000f3c:	08000fc3 	.word	0x08000fc3
 8000f40:	08000fc3 	.word	0x08000fc3
 8000f44:	08000fc3 	.word	0x08000fc3
 8000f48:	08000fc3 	.word	0x08000fc3
 8000f4c:	08000fc3 	.word	0x08000fc3
 8000f50:	08000fc3 	.word	0x08000fc3
 8000f54:	08000fc3 	.word	0x08000fc3
 8000f58:	08000f71 	.word	0x08000f71
 8000f5c:	08000f85 	.word	0x08000f85
 8000f60:	4a79      	ldr	r2, [pc, #484]	@ (8001148 <HAL_GPIO_Init+0x2b4>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f66:	e02c      	b.n	8000fc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	623b      	str	r3, [r7, #32]
          break;
 8000f6e:	e029      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	3304      	adds	r3, #4
 8000f76:	623b      	str	r3, [r7, #32]
          break;
 8000f78:	e024      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	3308      	adds	r3, #8
 8000f80:	623b      	str	r3, [r7, #32]
          break;
 8000f82:	e01f      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	330c      	adds	r3, #12
 8000f8a:	623b      	str	r3, [r7, #32]
          break;
 8000f8c:	e01a      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f96:	2304      	movs	r3, #4
 8000f98:	623b      	str	r3, [r7, #32]
          break;
 8000f9a:	e013      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d105      	bne.n	8000fb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	611a      	str	r2, [r3, #16]
          break;
 8000fae:	e009      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	615a      	str	r2, [r3, #20]
          break;
 8000fba:	e003      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
          break;
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x130>
          break;
 8000fc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2bff      	cmp	r3, #255	@ 0xff
 8000fc8:	d801      	bhi.n	8000fce <HAL_GPIO_Init+0x13a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	e001      	b.n	8000fd2 <HAL_GPIO_Init+0x13e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	2bff      	cmp	r3, #255	@ 0xff
 8000fd8:	d802      	bhi.n	8000fe0 <HAL_GPIO_Init+0x14c>
 8000fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	e002      	b.n	8000fe6 <HAL_GPIO_Init+0x152>
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe2:	3b08      	subs	r3, #8
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	210f      	movs	r1, #15
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	6a39      	ldr	r1, [r7, #32]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	431a      	orrs	r2, r3
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 80b1 	beq.w	8001176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001014:	4b4d      	ldr	r3, [pc, #308]	@ (800114c <HAL_GPIO_Init+0x2b8>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a4c      	ldr	r2, [pc, #304]	@ (800114c <HAL_GPIO_Init+0x2b8>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b4a      	ldr	r3, [pc, #296]	@ (800114c <HAL_GPIO_Init+0x2b8>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800102c:	4a48      	ldr	r2, [pc, #288]	@ (8001150 <HAL_GPIO_Init+0x2bc>)
 800102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001030:	089b      	lsrs	r3, r3, #2
 8001032:	3302      	adds	r3, #2
 8001034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001038:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	4013      	ands	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a40      	ldr	r2, [pc, #256]	@ (8001154 <HAL_GPIO_Init+0x2c0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d013      	beq.n	8001080 <HAL_GPIO_Init+0x1ec>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a3f      	ldr	r2, [pc, #252]	@ (8001158 <HAL_GPIO_Init+0x2c4>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d00d      	beq.n	800107c <HAL_GPIO_Init+0x1e8>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a3e      	ldr	r2, [pc, #248]	@ (800115c <HAL_GPIO_Init+0x2c8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d007      	beq.n	8001078 <HAL_GPIO_Init+0x1e4>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a3d      	ldr	r2, [pc, #244]	@ (8001160 <HAL_GPIO_Init+0x2cc>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d101      	bne.n	8001074 <HAL_GPIO_Init+0x1e0>
 8001070:	2303      	movs	r3, #3
 8001072:	e006      	b.n	8001082 <HAL_GPIO_Init+0x1ee>
 8001074:	2304      	movs	r3, #4
 8001076:	e004      	b.n	8001082 <HAL_GPIO_Init+0x1ee>
 8001078:	2302      	movs	r3, #2
 800107a:	e002      	b.n	8001082 <HAL_GPIO_Init+0x1ee>
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <HAL_GPIO_Init+0x1ee>
 8001080:	2300      	movs	r3, #0
 8001082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001084:	f002 0203 	and.w	r2, r2, #3
 8001088:	0092      	lsls	r2, r2, #2
 800108a:	4093      	lsls	r3, r2
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001092:	492f      	ldr	r1, [pc, #188]	@ (8001150 <HAL_GPIO_Init+0x2bc>)
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	492c      	ldr	r1, [pc, #176]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	608b      	str	r3, [r1, #8]
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4928      	ldr	r1, [pc, #160]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010d4:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	4922      	ldr	r1, [pc, #136]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	60cb      	str	r3, [r1, #12]
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010e2:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	491e      	ldr	r1, [pc, #120]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4918      	ldr	r1, [pc, #96]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800110a:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	43db      	mvns	r3, r3
 8001112:	4914      	ldr	r1, [pc, #80]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 8001114:	4013      	ands	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d021      	beq.n	8001168 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	490e      	ldr	r1, [pc, #56]	@ (8001164 <HAL_GPIO_Init+0x2d0>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	600b      	str	r3, [r1, #0]
 8001130:	e021      	b.n	8001176 <HAL_GPIO_Init+0x2e2>
 8001132:	bf00      	nop
 8001134:	10320000 	.word	0x10320000
 8001138:	10310000 	.word	0x10310000
 800113c:	10220000 	.word	0x10220000
 8001140:	10210000 	.word	0x10210000
 8001144:	10120000 	.word	0x10120000
 8001148:	10110000 	.word	0x10110000
 800114c:	40021000 	.word	0x40021000
 8001150:	40010000 	.word	0x40010000
 8001154:	40010800 	.word	0x40010800
 8001158:	40010c00 	.word	0x40010c00
 800115c:	40011000 	.word	0x40011000
 8001160:	40011400 	.word	0x40011400
 8001164:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <HAL_GPIO_Init+0x304>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	43db      	mvns	r3, r3
 8001170:	4909      	ldr	r1, [pc, #36]	@ (8001198 <HAL_GPIO_Init+0x304>)
 8001172:	4013      	ands	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	3301      	adds	r3, #1
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001182:	fa22 f303 	lsr.w	r3, r2, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	f47f ae8e 	bne.w	8000ea8 <HAL_GPIO_Init+0x14>
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	372c      	adds	r7, #44	@ 0x2c
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	40010400 	.word	0x40010400

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	611a      	str	r2, [r3, #16]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e12b      	b.n	8001436 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d106      	bne.n	80011f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fa82 	bl	80006fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2224      	movs	r2, #36	@ 0x24
 80011fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800121e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800122e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001230:	f001 f998 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8001234:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4a81      	ldr	r2, [pc, #516]	@ (8001440 <HAL_I2C_Init+0x274>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d807      	bhi.n	8001250 <HAL_I2C_Init+0x84>
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4a80      	ldr	r2, [pc, #512]	@ (8001444 <HAL_I2C_Init+0x278>)
 8001244:	4293      	cmp	r3, r2
 8001246:	bf94      	ite	ls
 8001248:	2301      	movls	r3, #1
 800124a:	2300      	movhi	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	e006      	b.n	800125e <HAL_I2C_Init+0x92>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4a7d      	ldr	r2, [pc, #500]	@ (8001448 <HAL_I2C_Init+0x27c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	bf94      	ite	ls
 8001258:	2301      	movls	r3, #1
 800125a:	2300      	movhi	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e0e7      	b.n	8001436 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4a78      	ldr	r2, [pc, #480]	@ (800144c <HAL_I2C_Init+0x280>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	0c9b      	lsrs	r3, r3, #18
 8001270:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	430a      	orrs	r2, r1
 8001284:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a6a      	ldr	r2, [pc, #424]	@ (8001440 <HAL_I2C_Init+0x274>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d802      	bhi.n	80012a0 <HAL_I2C_Init+0xd4>
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	3301      	adds	r3, #1
 800129e:	e009      	b.n	80012b4 <HAL_I2C_Init+0xe8>
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	4a69      	ldr	r2, [pc, #420]	@ (8001450 <HAL_I2C_Init+0x284>)
 80012ac:	fba2 2303 	umull	r2, r3, r2, r3
 80012b0:	099b      	lsrs	r3, r3, #6
 80012b2:	3301      	adds	r3, #1
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	430b      	orrs	r3, r1
 80012ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80012c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	495c      	ldr	r1, [pc, #368]	@ (8001440 <HAL_I2C_Init+0x274>)
 80012d0:	428b      	cmp	r3, r1
 80012d2:	d819      	bhi.n	8001308 <HAL_I2C_Init+0x13c>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	1e59      	subs	r1, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fbb1 f3f3 	udiv	r3, r1, r3
 80012e2:	1c59      	adds	r1, r3, #1
 80012e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80012e8:	400b      	ands	r3, r1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00a      	beq.n	8001304 <HAL_I2C_Init+0x138>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	1e59      	subs	r1, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012fc:	3301      	adds	r3, #1
 80012fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001302:	e051      	b.n	80013a8 <HAL_I2C_Init+0x1dc>
 8001304:	2304      	movs	r3, #4
 8001306:	e04f      	b.n	80013a8 <HAL_I2C_Init+0x1dc>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d111      	bne.n	8001334 <HAL_I2C_Init+0x168>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1e58      	subs	r0, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6859      	ldr	r1, [r3, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	440b      	add	r3, r1
 800131e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001322:	3301      	adds	r3, #1
 8001324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf0c      	ite	eq
 800132c:	2301      	moveq	r3, #1
 800132e:	2300      	movne	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	e012      	b.n	800135a <HAL_I2C_Init+0x18e>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	1e58      	subs	r0, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	0099      	lsls	r1, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	fbb0 f3f3 	udiv	r3, r0, r3
 800134a:	3301      	adds	r3, #1
 800134c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf0c      	ite	eq
 8001354:	2301      	moveq	r3, #1
 8001356:	2300      	movne	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_I2C_Init+0x196>
 800135e:	2301      	movs	r3, #1
 8001360:	e022      	b.n	80013a8 <HAL_I2C_Init+0x1dc>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10e      	bne.n	8001388 <HAL_I2C_Init+0x1bc>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1e58      	subs	r0, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6859      	ldr	r1, [r3, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	440b      	add	r3, r1
 8001378:	fbb0 f3f3 	udiv	r3, r0, r3
 800137c:	3301      	adds	r3, #1
 800137e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001386:	e00f      	b.n	80013a8 <HAL_I2C_Init+0x1dc>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	1e58      	subs	r0, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6859      	ldr	r1, [r3, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	0099      	lsls	r1, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	fbb0 f3f3 	udiv	r3, r0, r3
 800139e:	3301      	adds	r3, #1
 80013a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	6809      	ldr	r1, [r1, #0]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69da      	ldr	r2, [r3, #28]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80013d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6911      	ldr	r1, [r2, #16]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68d2      	ldr	r2, [r2, #12]
 80013e2:	4311      	orrs	r1, r2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	430b      	orrs	r3, r1
 80013ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	430a      	orrs	r2, r1
 8001406:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2220      	movs	r2, #32
 8001422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	000186a0 	.word	0x000186a0
 8001444:	001e847f 	.word	0x001e847f
 8001448:	003d08ff 	.word	0x003d08ff
 800144c:	431bde83 	.word	0x431bde83
 8001450:	10624dd3 	.word	0x10624dd3

08001454 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08c      	sub	sp, #48	@ 0x30
 8001458:	af02      	add	r7, sp, #8
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	461a      	mov	r2, r3
 8001460:	460b      	mov	r3, r1
 8001462:	817b      	strh	r3, [r7, #10]
 8001464:	4613      	mov	r3, r2
 8001466:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800146c:	f7ff fb04 	bl	8000a78 <HAL_GetTick>
 8001470:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b20      	cmp	r3, #32
 800147c:	f040 824b 	bne.w	8001916 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2319      	movs	r3, #25
 8001486:	2201      	movs	r2, #1
 8001488:	497f      	ldr	r1, [pc, #508]	@ (8001688 <HAL_I2C_Master_Receive+0x234>)
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f000 fb28 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001496:	2302      	movs	r3, #2
 8001498:	e23e      	b.n	8001918 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_I2C_Master_Receive+0x54>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e237      	b.n	8001918 <HAL_I2C_Master_Receive+0x4c4>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d007      	beq.n	80014ce <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f042 0201 	orr.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2222      	movs	r2, #34	@ 0x22
 80014e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2210      	movs	r2, #16
 80014ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	893a      	ldrh	r2, [r7, #8]
 80014fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001504:	b29a      	uxth	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4a5f      	ldr	r2, [pc, #380]	@ (800168c <HAL_I2C_Master_Receive+0x238>)
 800150e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001510:	8979      	ldrh	r1, [r7, #10]
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 fa14 	bl	8001944 <I2C_MasterRequestRead>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e1f8      	b.n	8001918 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800152a:	2b00      	cmp	r3, #0
 800152c:	d113      	bne.n	8001556 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e1cc      	b.n	80018f0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800155a:	2b01      	cmp	r3, #1
 800155c:	d11e      	bne.n	800159c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800156c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800156e:	b672      	cpsid	i
}
 8001570:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001596:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001598:	b662      	cpsie	i
}
 800159a:	e035      	b.n	8001608 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d11e      	bne.n	80015e2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015de:	b662      	cpsie	i
}
 80015e0:	e012      	b.n	8001608 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001608:	e172      	b.n	80018f0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800160e:	2b03      	cmp	r3, #3
 8001610:	f200 811f 	bhi.w	8001852 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001618:	2b01      	cmp	r3, #1
 800161a:	d123      	bne.n	8001664 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800161c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800161e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 fb77 	bl	8001d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e173      	b.n	8001918 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800164c:	3b01      	subs	r3, #1
 800164e:	b29a      	uxth	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001658:	b29b      	uxth	r3, r3
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001662:	e145      	b.n	80018f0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001668:	2b02      	cmp	r3, #2
 800166a:	d152      	bne.n	8001712 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001672:	2200      	movs	r2, #0
 8001674:	4906      	ldr	r1, [pc, #24]	@ (8001690 <HAL_I2C_Master_Receive+0x23c>)
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 fa32 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d008      	beq.n	8001694 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e148      	b.n	8001918 <HAL_I2C_Master_Receive+0x4c4>
 8001686:	bf00      	nop
 8001688:	00100002 	.word	0x00100002
 800168c:	ffff0000 	.word	0xffff0000
 8001690:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80016da:	b662      	cpsie	i
}
 80016dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001706:	b29b      	uxth	r3, r3
 8001708:	3b01      	subs	r3, #1
 800170a:	b29a      	uxth	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001710:	e0ee      	b.n	80018f0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001718:	2200      	movs	r2, #0
 800171a:	4981      	ldr	r1, [pc, #516]	@ (8001920 <HAL_I2C_Master_Receive+0x4cc>)
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 f9df 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0f5      	b.n	8001918 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800173a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800175c:	3b01      	subs	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001768:	b29b      	uxth	r3, r3
 800176a:	3b01      	subs	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001772:	4b6c      	ldr	r3, [pc, #432]	@ (8001924 <HAL_I2C_Master_Receive+0x4d0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	08db      	lsrs	r3, r3, #3
 8001778:	4a6b      	ldr	r2, [pc, #428]	@ (8001928 <HAL_I2C_Master_Receive+0x4d4>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	0a1a      	lsrs	r2, r3, #8
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	00da      	lsls	r2, r3, #3
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	3b01      	subs	r3, #1
 8001790:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d118      	bne.n	80017ca <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2220      	movs	r2, #32
 80017a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f043 0220 	orr.w	r2, r3, #32
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80017ba:	b662      	cpsie	i
}
 80017bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0a6      	b.n	8001918 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d1d9      	bne.n	800178c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001804:	3b01      	subs	r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800181a:	b662      	cpsie	i
}
 800181c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800183a:	3b01      	subs	r3, #1
 800183c:	b29a      	uxth	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001846:	b29b      	uxth	r3, r3
 8001848:	3b01      	subs	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001850:	e04e      	b.n	80018f0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001854:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 fa5c 	bl	8001d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e058      	b.n	8001918 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001882:	3b01      	subs	r3, #1
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800188e:	b29b      	uxth	r3, r3
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d124      	bne.n	80018f0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d107      	bne.n	80018be <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018bc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3b01      	subs	r3, #1
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f47f ae88 	bne.w	800160a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2220      	movs	r2, #32
 80018fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001916:	2302      	movs	r3, #2
  }
}
 8001918:	4618      	mov	r0, r3
 800191a:	3728      	adds	r7, #40	@ 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	00010004 	.word	0x00010004
 8001924:	20000000 	.word	0x20000000
 8001928:	14f8b589 	.word	0x14f8b589

0800192c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
	...

08001944 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	460b      	mov	r3, r1
 8001952:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001968:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b08      	cmp	r3, #8
 800196e:	d006      	beq.n	800197e <I2C_MasterRequestRead+0x3a>
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d003      	beq.n	800197e <I2C_MasterRequestRead+0x3a>
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800197c:	d108      	bne.n	8001990 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e00b      	b.n	80019a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001994:	2b11      	cmp	r3, #17
 8001996:	d107      	bne.n	80019a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 f893 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00d      	beq.n	80019dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019ce:	d103      	bne.n	80019d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e079      	b.n	8001ad0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019e4:	d108      	bne.n	80019f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80019e6:	897b      	ldrh	r3, [r7, #10]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	611a      	str	r2, [r3, #16]
 80019f6:	e05f      	b.n	8001ab8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019f8:	897b      	ldrh	r3, [r7, #10]
 80019fa:	11db      	asrs	r3, r3, #7
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f003 0306 	and.w	r3, r3, #6
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f063 030f 	orn	r3, r3, #15
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4930      	ldr	r1, [pc, #192]	@ (8001ad8 <I2C_MasterRequestRead+0x194>)
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f8dc 	bl	8001bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e054      	b.n	8001ad0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a26:	897b      	ldrh	r3, [r7, #10]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4929      	ldr	r1, [pc, #164]	@ (8001adc <I2C_MasterRequestRead+0x198>)
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 f8cc 	bl	8001bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e044      	b.n	8001ad0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 f831 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00d      	beq.n	8001aa0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a92:	d103      	bne.n	8001a9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a9a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e017      	b.n	8001ad0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001aa0:	897b      	ldrh	r3, [r7, #10]
 8001aa2:	11db      	asrs	r3, r3, #7
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f003 0306 	and.w	r3, r3, #6
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f063 030e 	orn	r3, r3, #14
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4907      	ldr	r1, [pc, #28]	@ (8001adc <I2C_MasterRequestRead+0x198>)
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f888 	bl	8001bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	00010008 	.word	0x00010008
 8001adc:	00010002 	.word	0x00010002

08001ae0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	4613      	mov	r3, r2
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af0:	e048      	b.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d044      	beq.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001afa:	f7fe ffbd 	bl	8000a78 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d302      	bcc.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d139      	bne.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	0c1b      	lsrs	r3, r3, #16
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d10d      	bne.n	8001b36 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	43da      	mvns	r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	4013      	ands	r3, r2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf0c      	ite	eq
 8001b2c:	2301      	moveq	r3, #1
 8001b2e:	2300      	movne	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	e00c      	b.n	8001b50 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	4013      	ands	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d116      	bne.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	f043 0220 	orr.w	r2, r3, #32
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e023      	b.n	8001bcc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	0c1b      	lsrs	r3, r3, #16
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d10d      	bne.n	8001baa <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	43da      	mvns	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf0c      	ite	eq
 8001ba0:	2301      	moveq	r3, #1
 8001ba2:	2300      	movne	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	e00c      	b.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d093      	beq.n	8001af2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001be2:	e071      	b.n	8001cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf2:	d123      	bne.n	8001c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	f043 0204 	orr.w	r2, r3, #4
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e067      	b.n	8001d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c42:	d041      	beq.n	8001cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c44:	f7fe ff18 	bl	8000a78 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d302      	bcc.n	8001c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d136      	bne.n	8001cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	0c1b      	lsrs	r3, r3, #16
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d10c      	bne.n	8001c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf14      	ite	ne
 8001c76:	2301      	movne	r3, #1
 8001c78:	2300      	moveq	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	e00b      	b.n	8001c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	43da      	mvns	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf14      	ite	ne
 8001c90:	2301      	movne	r3, #1
 8001c92:	2300      	moveq	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d016      	beq.n	8001cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	f043 0220 	orr.w	r2, r3, #32
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e021      	b.n	8001d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10c      	bne.n	8001cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	43da      	mvns	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf14      	ite	ne
 8001ce4:	2301      	movne	r3, #1
 8001ce6:	2300      	moveq	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e00b      	b.n	8001d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	bf14      	ite	ne
 8001cfe:	2301      	movne	r3, #1
 8001d00:	2300      	moveq	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f47f af6d 	bne.w	8001be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d20:	e049      	b.n	8001db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d119      	bne.n	8001d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0210 	mvn.w	r2, #16
 8001d38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e030      	b.n	8001dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d64:	f7fe fe88 	bl	8000a78 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d302      	bcc.n	8001d7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d11d      	bne.n	8001db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d84:	2b40      	cmp	r3, #64	@ 0x40
 8001d86:	d016      	beq.n	8001db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f043 0220 	orr.w	r2, r3, #32
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e007      	b.n	8001dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc0:	2b40      	cmp	r3, #64	@ 0x40
 8001dc2:	d1ae      	bne.n	8001d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e272      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8087 	beq.w	8001efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df0:	4b92      	ldr	r3, [pc, #584]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d00c      	beq.n	8001e16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dfc:	4b8f      	ldr	r3, [pc, #572]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d112      	bne.n	8001e2e <HAL_RCC_OscConfig+0x5e>
 8001e08:	4b8c      	ldr	r3, [pc, #560]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e14:	d10b      	bne.n	8001e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e16:	4b89      	ldr	r3, [pc, #548]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d06c      	beq.n	8001efc <HAL_RCC_OscConfig+0x12c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d168      	bne.n	8001efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e24c      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x76>
 8001e38:	4b80      	ldr	r3, [pc, #512]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a7f      	ldr	r2, [pc, #508]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	e02e      	b.n	8001ea4 <HAL_RCC_OscConfig+0xd4>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x98>
 8001e4e:	4b7b      	ldr	r3, [pc, #492]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a7a      	ldr	r2, [pc, #488]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b78      	ldr	r3, [pc, #480]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a77      	ldr	r2, [pc, #476]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e01d      	b.n	8001ea4 <HAL_RCC_OscConfig+0xd4>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0xbc>
 8001e72:	4b72      	ldr	r3, [pc, #456]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a71      	ldr	r2, [pc, #452]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a6e      	ldr	r2, [pc, #440]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0xd4>
 8001e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a6a      	ldr	r2, [pc, #424]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b68      	ldr	r3, [pc, #416]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a67      	ldr	r2, [pc, #412]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ea2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7fe fde4 	bl	8000a78 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7fe fde0 	bl	8000a78 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	@ 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e200      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0xe4>
 8001ed2:	e014      	b.n	8001efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fdd0 	bl	8000a78 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7fe fdcc 	bl	8000a78 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	@ 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e1ec      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	4b53      	ldr	r3, [pc, #332]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x10c>
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d063      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f16:	4b49      	ldr	r3, [pc, #292]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d11c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x18c>
 8001f22:	4b46      	ldr	r3, [pc, #280]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d116      	bne.n	8001f5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	4b43      	ldr	r3, [pc, #268]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_RCC_OscConfig+0x176>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e1c0      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	4b3d      	ldr	r3, [pc, #244]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4939      	ldr	r1, [pc, #228]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	e03a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d020      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f64:	4b36      	ldr	r3, [pc, #216]	@ (8002040 <HAL_RCC_OscConfig+0x270>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7fe fd85 	bl	8000a78 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f72:	f7fe fd81 	bl	8000a78 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e1a1      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f84:	4b2d      	ldr	r3, [pc, #180]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b2a      	ldr	r3, [pc, #168]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4927      	ldr	r1, [pc, #156]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
 8001fa4:	e015      	b.n	8001fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa6:	4b26      	ldr	r3, [pc, #152]	@ (8002040 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7fe fd64 	bl	8000a78 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb4:	f7fe fd60 	bl	8000a78 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e180      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d03a      	beq.n	8002054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d019      	beq.n	800201a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe6:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7fe fd44 	bl	8000a78 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7fe fd40 	bl	8000a78 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e160      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002006:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <HAL_RCC_OscConfig+0x26c>)
 8002008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002012:	2001      	movs	r0, #1
 8002014:	f000 face 	bl	80025b4 <RCC_Delay>
 8002018:	e01c      	b.n	8002054 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <HAL_RCC_OscConfig+0x274>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002020:	f7fe fd2a 	bl	8000a78 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002026:	e00f      	b.n	8002048 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002028:	f7fe fd26 	bl	8000a78 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d908      	bls.n	8002048 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e146      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	42420000 	.word	0x42420000
 8002044:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	4b92      	ldr	r3, [pc, #584]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1e9      	bne.n	8002028 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80a6 	beq.w	80021ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002066:	4b8b      	ldr	r3, [pc, #556]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10d      	bne.n	800208e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4b88      	ldr	r3, [pc, #544]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a87      	ldr	r2, [pc, #540]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207c:	61d3      	str	r3, [r2, #28]
 800207e:	4b85      	ldr	r3, [pc, #532]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208a:	2301      	movs	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208e:	4b82      	ldr	r3, [pc, #520]	@ (8002298 <HAL_RCC_OscConfig+0x4c8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d118      	bne.n	80020cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209a:	4b7f      	ldr	r3, [pc, #508]	@ (8002298 <HAL_RCC_OscConfig+0x4c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a7e      	ldr	r2, [pc, #504]	@ (8002298 <HAL_RCC_OscConfig+0x4c8>)
 80020a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a6:	f7fe fce7 	bl	8000a78 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ae:	f7fe fce3 	bl	8000a78 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b64      	cmp	r3, #100	@ 0x64
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e103      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <HAL_RCC_OscConfig+0x4c8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x312>
 80020d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a6e      	ldr	r2, [pc, #440]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	e02d      	b.n	800213e <HAL_RCC_OscConfig+0x36e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x334>
 80020ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4a69      	ldr	r2, [pc, #420]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	6213      	str	r3, [r2, #32]
 80020f6:	4b67      	ldr	r3, [pc, #412]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4a66      	ldr	r2, [pc, #408]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	f023 0304 	bic.w	r3, r3, #4
 8002100:	6213      	str	r3, [r2, #32]
 8002102:	e01c      	b.n	800213e <HAL_RCC_OscConfig+0x36e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b05      	cmp	r3, #5
 800210a:	d10c      	bne.n	8002126 <HAL_RCC_OscConfig+0x356>
 800210c:	4b61      	ldr	r3, [pc, #388]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a60      	ldr	r2, [pc, #384]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	6213      	str	r3, [r2, #32]
 8002118:	4b5e      	ldr	r3, [pc, #376]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a5d      	ldr	r2, [pc, #372]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	e00b      	b.n	800213e <HAL_RCC_OscConfig+0x36e>
 8002126:	4b5b      	ldr	r3, [pc, #364]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4a5a      	ldr	r2, [pc, #360]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	6213      	str	r3, [r2, #32]
 8002132:	4b58      	ldr	r3, [pc, #352]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a57      	ldr	r2, [pc, #348]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	f023 0304 	bic.w	r3, r3, #4
 800213c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d015      	beq.n	8002172 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7fe fc97 	bl	8000a78 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214e:	f7fe fc93 	bl	8000a78 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215c:	4293      	cmp	r3, r2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e0b1      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002164:	4b4b      	ldr	r3, [pc, #300]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ee      	beq.n	800214e <HAL_RCC_OscConfig+0x37e>
 8002170:	e014      	b.n	800219c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7fe fc81 	bl	8000a78 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7fe fc7d 	bl	8000a78 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e09b      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002190:	4b40      	ldr	r3, [pc, #256]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1ee      	bne.n	800217a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d105      	bne.n	80021ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8087 	beq.w	80022c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b8:	4b36      	ldr	r3, [pc, #216]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d061      	beq.n	8002288 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d146      	bne.n	800225a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	4b33      	ldr	r3, [pc, #204]	@ (800229c <HAL_RCC_OscConfig+0x4cc>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7fe fc51 	bl	8000a78 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe fc4d 	bl	8000a78 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e06d      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ec:	4b29      	ldr	r3, [pc, #164]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f0      	bne.n	80021da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002200:	d108      	bne.n	8002214 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002202:	4b24      	ldr	r3, [pc, #144]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4921      	ldr	r1, [pc, #132]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002214:	4b1f      	ldr	r3, [pc, #124]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a19      	ldr	r1, [r3, #32]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	430b      	orrs	r3, r1
 8002226:	491b      	ldr	r1, [pc, #108]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222c:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <HAL_RCC_OscConfig+0x4cc>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7fe fc21 	bl	8000a78 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223a:	f7fe fc1d 	bl	8000a78 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e03d      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x46a>
 8002258:	e035      	b.n	80022c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <HAL_RCC_OscConfig+0x4cc>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe fc0a 	bl	8000a78 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe fc06 	bl	8000a78 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e026      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227a:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x498>
 8002286:	e01e      	b.n	80022c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e019      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
 8002294:	40021000 	.word	0x40021000
 8002298:	40007000 	.word	0x40007000
 800229c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <HAL_RCC_OscConfig+0x500>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0d0      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d910      	bls.n	8002318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b67      	ldr	r3, [pc, #412]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 0207 	bic.w	r2, r3, #7
 80022fe:	4965      	ldr	r1, [pc, #404]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b63      	ldr	r3, [pc, #396]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0b8      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002330:	4b59      	ldr	r3, [pc, #356]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a58      	ldr	r2, [pc, #352]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800233a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002348:	4b53      	ldr	r3, [pc, #332]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a52      	ldr	r2, [pc, #328]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002352:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002354:	4b50      	ldr	r3, [pc, #320]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	494d      	ldr	r1, [pc, #308]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d040      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	4b47      	ldr	r3, [pc, #284]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d115      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e07f      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002392:	4b41      	ldr	r3, [pc, #260]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e073      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e06b      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b39      	ldr	r3, [pc, #228]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4936      	ldr	r1, [pc, #216]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7fe fb58 	bl	8000a78 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7fe fb54 	bl	8000a78 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e053      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b27      	ldr	r3, [pc, #156]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d210      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b24      	ldr	r3, [pc, #144]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 0207 	bic.w	r2, r3, #7
 800240a:	4922      	ldr	r1, [pc, #136]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e032      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002430:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4916      	ldr	r1, [pc, #88]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800244e:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	490e      	ldr	r1, [pc, #56]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002462:	f000 f821 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8002466:	4602      	mov	r2, r0
 8002468:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	490a      	ldr	r1, [pc, #40]	@ (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002474:	5ccb      	ldrb	r3, [r1, r3]
 8002476:	fa22 f303 	lsr.w	r3, r2, r3
 800247a:	4a09      	ldr	r2, [pc, #36]	@ (80024a0 <HAL_RCC_ClockConfig+0x1cc>)
 800247c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800247e:	4b09      	ldr	r3, [pc, #36]	@ (80024a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fab6 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40022000 	.word	0x40022000
 8002498:	40021000 	.word	0x40021000
 800249c:	08003a48 	.word	0x08003a48
 80024a0:	20000000 	.word	0x20000000
 80024a4:	20000004 	.word	0x20000004

080024a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024c2:	4b1e      	ldr	r3, [pc, #120]	@ (800253c <HAL_RCC_GetSysClockFreq+0x94>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d002      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x30>
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d003      	beq.n	80024de <HAL_RCC_GetSysClockFreq+0x36>
 80024d6:	e027      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d8:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x98>)
 80024da:	613b      	str	r3, [r7, #16]
      break;
 80024dc:	e027      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	0c9b      	lsrs	r3, r3, #18
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	4a17      	ldr	r2, [pc, #92]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d010      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024f6:	4b11      	ldr	r3, [pc, #68]	@ (800253c <HAL_RCC_GetSysClockFreq+0x94>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	0c5b      	lsrs	r3, r3, #17
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	4a11      	ldr	r2, [pc, #68]	@ (8002548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x98>)
 800250a:	fb03 f202 	mul.w	r2, r3, r2
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e004      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a0c      	ldr	r2, [pc, #48]	@ (800254c <HAL_RCC_GetSysClockFreq+0xa4>)
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	613b      	str	r3, [r7, #16]
      break;
 8002526:	e002      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002528:	4b05      	ldr	r3, [pc, #20]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x98>)
 800252a:	613b      	str	r3, [r7, #16]
      break;
 800252c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800252e:	693b      	ldr	r3, [r7, #16]
}
 8002530:	4618      	mov	r0, r3
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	007a1200 	.word	0x007a1200
 8002544:	08003a60 	.word	0x08003a60
 8002548:	08003a70 	.word	0x08003a70
 800254c:	003d0900 	.word	0x003d0900

08002550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002554:	4b02      	ldr	r3, [pc, #8]	@ (8002560 <HAL_RCC_GetHCLKFreq+0x10>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	20000000 	.word	0x20000000

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002568:	f7ff fff2 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	@ (8002588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40021000 	.word	0x40021000
 8002588:	08003a58 	.word	0x08003a58

0800258c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002590:	f7ff ffde 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002594:	4602      	mov	r2, r0
 8002596:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	0adb      	lsrs	r3, r3, #11
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	4903      	ldr	r1, [pc, #12]	@ (80025b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	08003a58 	.word	0x08003a58

080025b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025bc:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <RCC_Delay+0x34>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <RCC_Delay+0x38>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	0a5b      	lsrs	r3, r3, #9
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025d0:	bf00      	nop
  }
  while (Delay --);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1e5a      	subs	r2, r3, #1
 80025d6:	60fa      	str	r2, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f9      	bne.n	80025d0 <RCC_Delay+0x1c>
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	20000000 	.word	0x20000000
 80025ec:	10624dd3 	.word	0x10624dd3

080025f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e042      	b.n	8002688 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe f8ae 	bl	8000778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2224      	movs	r2, #36	@ 0x24
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f971 	bl	800291c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	@ 0x28
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d175      	bne.n	800279c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_UART_Transmit+0x2c>
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e06e      	b.n	800279e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2221      	movs	r2, #33	@ 0x21
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ce:	f7fe f9d3 	bl	8000a78 <HAL_GetTick>
 80026d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	88fa      	ldrh	r2, [r7, #6]
 80026d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026e8:	d108      	bne.n	80026fc <HAL_UART_Transmit+0x6c>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d104      	bne.n	80026fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	e003      	b.n	8002704 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002704:	e02e      	b.n	8002764 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	2180      	movs	r1, #128	@ 0x80
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f848 	bl	80027a6 <UART_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e03a      	b.n	800279e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10b      	bne.n	8002746 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800273c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	3302      	adds	r3, #2
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	e007      	b.n	8002756 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3301      	adds	r3, #1
 8002754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1cb      	bne.n	8002706 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2200      	movs	r2, #0
 8002776:	2140      	movs	r1, #64	@ 0x40
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f814 	bl	80027a6 <UART_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e006      	b.n	800279e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	e000      	b.n	800279e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800279c:	2302      	movs	r3, #2
  }
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	4613      	mov	r3, r2
 80027b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b6:	e03b      	b.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027be:	d037      	beq.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c0:	f7fe f95a 	bl	8000a78 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	6a3a      	ldr	r2, [r7, #32]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d302      	bcc.n	80027d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e03a      	b.n	8002850 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d023      	beq.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b80      	cmp	r3, #128	@ 0x80
 80027ec:	d020      	beq.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b40      	cmp	r3, #64	@ 0x40
 80027f2:	d01d      	beq.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d116      	bne.n	8002830 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f81d 	bl	8002858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2208      	movs	r2, #8
 8002822:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e00f      	b.n	8002850 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	4013      	ands	r3, r2
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	429a      	cmp	r2, r3
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	461a      	mov	r2, r3
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	429a      	cmp	r2, r3
 800284c:	d0b4      	beq.n	80027b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002858:	b480      	push	{r7}
 800285a:	b095      	sub	sp, #84	@ 0x54
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	330c      	adds	r3, #12
 8002866:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800286a:	e853 3f00 	ldrex	r3, [r3]
 800286e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002880:	643a      	str	r2, [r7, #64]	@ 0x40
 8002882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002884:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002886:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002888:	e841 2300 	strex	r3, r2, [r1]
 800288c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800288e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e5      	bne.n	8002860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	3314      	adds	r3, #20
 800289a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	e853 3f00 	ldrex	r3, [r3]
 80028a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3314      	adds	r3, #20
 80028b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028bc:	e841 2300 	strex	r3, r2, [r1]
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e5      	bne.n	8002894 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d119      	bne.n	8002904 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	e853 3f00 	ldrex	r3, [r3]
 80028de:	60bb      	str	r3, [r7, #8]
   return(result);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f023 0310 	bic.w	r3, r3, #16
 80028e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028f0:	61ba      	str	r2, [r7, #24]
 80028f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f4:	6979      	ldr	r1, [r7, #20]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	e841 2300 	strex	r3, r2, [r1]
 80028fc:	613b      	str	r3, [r7, #16]
   return(result);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1e5      	bne.n	80028d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002912:	bf00      	nop
 8002914:	3754      	adds	r7, #84	@ 0x54
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002956:	f023 030c 	bic.w	r3, r3, #12
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	430b      	orrs	r3, r1
 8002962:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a2c      	ldr	r2, [pc, #176]	@ (8002a30 <UART_SetConfig+0x114>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d103      	bne.n	800298c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002984:	f7ff fe02 	bl	800258c <HAL_RCC_GetPCLK2Freq>
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	e002      	b.n	8002992 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800298c:	f7ff fdea 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8002990:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	009a      	lsls	r2, r3, #2
 800299c:	441a      	add	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	4a22      	ldr	r2, [pc, #136]	@ (8002a34 <UART_SetConfig+0x118>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	0119      	lsls	r1, r3, #4
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	009a      	lsls	r2, r3, #2
 80029bc:	441a      	add	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a34 <UART_SetConfig+0x118>)
 80029ca:	fba3 0302 	umull	r0, r3, r3, r2
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	2064      	movs	r0, #100	@ 0x64
 80029d2:	fb00 f303 	mul.w	r3, r0, r3
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	3332      	adds	r3, #50	@ 0x32
 80029dc:	4a15      	ldr	r2, [pc, #84]	@ (8002a34 <UART_SetConfig+0x118>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029e8:	4419      	add	r1, r3
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	009a      	lsls	r2, r3, #2
 80029f4:	441a      	add	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a00:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <UART_SetConfig+0x118>)
 8002a02:	fba3 0302 	umull	r0, r3, r3, r2
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2064      	movs	r0, #100	@ 0x64
 8002a0a:	fb00 f303 	mul.w	r3, r0, r3
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	3332      	adds	r3, #50	@ 0x32
 8002a14:	4a07      	ldr	r2, [pc, #28]	@ (8002a34 <UART_SetConfig+0x118>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	f003 020f 	and.w	r2, r3, #15
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	440a      	add	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40013800 	.word	0x40013800
 8002a34:	51eb851f 	.word	0x51eb851f

08002a38 <std>:
 8002a38:	2300      	movs	r3, #0
 8002a3a:	b510      	push	{r4, lr}
 8002a3c:	4604      	mov	r4, r0
 8002a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8002a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a46:	6083      	str	r3, [r0, #8]
 8002a48:	8181      	strh	r1, [r0, #12]
 8002a4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002a4c:	81c2      	strh	r2, [r0, #14]
 8002a4e:	6183      	str	r3, [r0, #24]
 8002a50:	4619      	mov	r1, r3
 8002a52:	2208      	movs	r2, #8
 8002a54:	305c      	adds	r0, #92	@ 0x5c
 8002a56:	f000 f9f9 	bl	8002e4c <memset>
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a90 <std+0x58>)
 8002a5c:	6224      	str	r4, [r4, #32]
 8002a5e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <std+0x5c>)
 8002a62:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <std+0x60>)
 8002a66:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a68:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <std+0x64>)
 8002a6a:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <std+0x68>)
 8002a6e:	429c      	cmp	r4, r3
 8002a70:	d006      	beq.n	8002a80 <std+0x48>
 8002a72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a76:	4294      	cmp	r4, r2
 8002a78:	d002      	beq.n	8002a80 <std+0x48>
 8002a7a:	33d0      	adds	r3, #208	@ 0xd0
 8002a7c:	429c      	cmp	r4, r3
 8002a7e:	d105      	bne.n	8002a8c <std+0x54>
 8002a80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a88:	f000 ba58 	b.w	8002f3c <__retarget_lock_init_recursive>
 8002a8c:	bd10      	pop	{r4, pc}
 8002a8e:	bf00      	nop
 8002a90:	08002c9d 	.word	0x08002c9d
 8002a94:	08002cbf 	.word	0x08002cbf
 8002a98:	08002cf7 	.word	0x08002cf7
 8002a9c:	08002d1b 	.word	0x08002d1b
 8002aa0:	20000154 	.word	0x20000154

08002aa4 <stdio_exit_handler>:
 8002aa4:	4a02      	ldr	r2, [pc, #8]	@ (8002ab0 <stdio_exit_handler+0xc>)
 8002aa6:	4903      	ldr	r1, [pc, #12]	@ (8002ab4 <stdio_exit_handler+0x10>)
 8002aa8:	4803      	ldr	r0, [pc, #12]	@ (8002ab8 <stdio_exit_handler+0x14>)
 8002aaa:	f000 b869 	b.w	8002b80 <_fwalk_sglue>
 8002aae:	bf00      	nop
 8002ab0:	2000000c 	.word	0x2000000c
 8002ab4:	080037d5 	.word	0x080037d5
 8002ab8:	2000001c 	.word	0x2000001c

08002abc <cleanup_stdio>:
 8002abc:	6841      	ldr	r1, [r0, #4]
 8002abe:	4b0c      	ldr	r3, [pc, #48]	@ (8002af0 <cleanup_stdio+0x34>)
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	4299      	cmp	r1, r3
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	d001      	beq.n	8002acc <cleanup_stdio+0x10>
 8002ac8:	f000 fe84 	bl	80037d4 <_fflush_r>
 8002acc:	68a1      	ldr	r1, [r4, #8]
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <cleanup_stdio+0x38>)
 8002ad0:	4299      	cmp	r1, r3
 8002ad2:	d002      	beq.n	8002ada <cleanup_stdio+0x1e>
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f000 fe7d 	bl	80037d4 <_fflush_r>
 8002ada:	68e1      	ldr	r1, [r4, #12]
 8002adc:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <cleanup_stdio+0x3c>)
 8002ade:	4299      	cmp	r1, r3
 8002ae0:	d004      	beq.n	8002aec <cleanup_stdio+0x30>
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ae8:	f000 be74 	b.w	80037d4 <_fflush_r>
 8002aec:	bd10      	pop	{r4, pc}
 8002aee:	bf00      	nop
 8002af0:	20000154 	.word	0x20000154
 8002af4:	200001bc 	.word	0x200001bc
 8002af8:	20000224 	.word	0x20000224

08002afc <global_stdio_init.part.0>:
 8002afc:	b510      	push	{r4, lr}
 8002afe:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <global_stdio_init.part.0+0x30>)
 8002b00:	4c0b      	ldr	r4, [pc, #44]	@ (8002b30 <global_stdio_init.part.0+0x34>)
 8002b02:	4a0c      	ldr	r2, [pc, #48]	@ (8002b34 <global_stdio_init.part.0+0x38>)
 8002b04:	4620      	mov	r0, r4
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	2104      	movs	r1, #4
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f7ff ff94 	bl	8002a38 <std>
 8002b10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002b14:	2201      	movs	r2, #1
 8002b16:	2109      	movs	r1, #9
 8002b18:	f7ff ff8e 	bl	8002a38 <std>
 8002b1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002b20:	2202      	movs	r2, #2
 8002b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b26:	2112      	movs	r1, #18
 8002b28:	f7ff bf86 	b.w	8002a38 <std>
 8002b2c:	2000028c 	.word	0x2000028c
 8002b30:	20000154 	.word	0x20000154
 8002b34:	08002aa5 	.word	0x08002aa5

08002b38 <__sfp_lock_acquire>:
 8002b38:	4801      	ldr	r0, [pc, #4]	@ (8002b40 <__sfp_lock_acquire+0x8>)
 8002b3a:	f000 ba00 	b.w	8002f3e <__retarget_lock_acquire_recursive>
 8002b3e:	bf00      	nop
 8002b40:	20000295 	.word	0x20000295

08002b44 <__sfp_lock_release>:
 8002b44:	4801      	ldr	r0, [pc, #4]	@ (8002b4c <__sfp_lock_release+0x8>)
 8002b46:	f000 b9fb 	b.w	8002f40 <__retarget_lock_release_recursive>
 8002b4a:	bf00      	nop
 8002b4c:	20000295 	.word	0x20000295

08002b50 <__sinit>:
 8002b50:	b510      	push	{r4, lr}
 8002b52:	4604      	mov	r4, r0
 8002b54:	f7ff fff0 	bl	8002b38 <__sfp_lock_acquire>
 8002b58:	6a23      	ldr	r3, [r4, #32]
 8002b5a:	b11b      	cbz	r3, 8002b64 <__sinit+0x14>
 8002b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b60:	f7ff bff0 	b.w	8002b44 <__sfp_lock_release>
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <__sinit+0x28>)
 8002b66:	6223      	str	r3, [r4, #32]
 8002b68:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <__sinit+0x2c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f5      	bne.n	8002b5c <__sinit+0xc>
 8002b70:	f7ff ffc4 	bl	8002afc <global_stdio_init.part.0>
 8002b74:	e7f2      	b.n	8002b5c <__sinit+0xc>
 8002b76:	bf00      	nop
 8002b78:	08002abd 	.word	0x08002abd
 8002b7c:	2000028c 	.word	0x2000028c

08002b80 <_fwalk_sglue>:
 8002b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b84:	4607      	mov	r7, r0
 8002b86:	4688      	mov	r8, r1
 8002b88:	4614      	mov	r4, r2
 8002b8a:	2600      	movs	r6, #0
 8002b8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b90:	f1b9 0901 	subs.w	r9, r9, #1
 8002b94:	d505      	bpl.n	8002ba2 <_fwalk_sglue+0x22>
 8002b96:	6824      	ldr	r4, [r4, #0]
 8002b98:	2c00      	cmp	r4, #0
 8002b9a:	d1f7      	bne.n	8002b8c <_fwalk_sglue+0xc>
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ba2:	89ab      	ldrh	r3, [r5, #12]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d907      	bls.n	8002bb8 <_fwalk_sglue+0x38>
 8002ba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002bac:	3301      	adds	r3, #1
 8002bae:	d003      	beq.n	8002bb8 <_fwalk_sglue+0x38>
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	4638      	mov	r0, r7
 8002bb4:	47c0      	blx	r8
 8002bb6:	4306      	orrs	r6, r0
 8002bb8:	3568      	adds	r5, #104	@ 0x68
 8002bba:	e7e9      	b.n	8002b90 <_fwalk_sglue+0x10>

08002bbc <iprintf>:
 8002bbc:	b40f      	push	{r0, r1, r2, r3}
 8002bbe:	b507      	push	{r0, r1, r2, lr}
 8002bc0:	4906      	ldr	r1, [pc, #24]	@ (8002bdc <iprintf+0x20>)
 8002bc2:	ab04      	add	r3, sp, #16
 8002bc4:	6808      	ldr	r0, [r1, #0]
 8002bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bca:	6881      	ldr	r1, [r0, #8]
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	f000 fad7 	bl	8003180 <_vfiprintf_r>
 8002bd2:	b003      	add	sp, #12
 8002bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bd8:	b004      	add	sp, #16
 8002bda:	4770      	bx	lr
 8002bdc:	20000018 	.word	0x20000018

08002be0 <_puts_r>:
 8002be0:	6a03      	ldr	r3, [r0, #32]
 8002be2:	b570      	push	{r4, r5, r6, lr}
 8002be4:	4605      	mov	r5, r0
 8002be6:	460e      	mov	r6, r1
 8002be8:	6884      	ldr	r4, [r0, #8]
 8002bea:	b90b      	cbnz	r3, 8002bf0 <_puts_r+0x10>
 8002bec:	f7ff ffb0 	bl	8002b50 <__sinit>
 8002bf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002bf2:	07db      	lsls	r3, r3, #31
 8002bf4:	d405      	bmi.n	8002c02 <_puts_r+0x22>
 8002bf6:	89a3      	ldrh	r3, [r4, #12]
 8002bf8:	0598      	lsls	r0, r3, #22
 8002bfa:	d402      	bmi.n	8002c02 <_puts_r+0x22>
 8002bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bfe:	f000 f99e 	bl	8002f3e <__retarget_lock_acquire_recursive>
 8002c02:	89a3      	ldrh	r3, [r4, #12]
 8002c04:	0719      	lsls	r1, r3, #28
 8002c06:	d502      	bpl.n	8002c0e <_puts_r+0x2e>
 8002c08:	6923      	ldr	r3, [r4, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d135      	bne.n	8002c7a <_puts_r+0x9a>
 8002c0e:	4621      	mov	r1, r4
 8002c10:	4628      	mov	r0, r5
 8002c12:	f000 f8c5 	bl	8002da0 <__swsetup_r>
 8002c16:	b380      	cbz	r0, 8002c7a <_puts_r+0x9a>
 8002c18:	f04f 35ff 	mov.w	r5, #4294967295
 8002c1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c1e:	07da      	lsls	r2, r3, #31
 8002c20:	d405      	bmi.n	8002c2e <_puts_r+0x4e>
 8002c22:	89a3      	ldrh	r3, [r4, #12]
 8002c24:	059b      	lsls	r3, r3, #22
 8002c26:	d402      	bmi.n	8002c2e <_puts_r+0x4e>
 8002c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c2a:	f000 f989 	bl	8002f40 <__retarget_lock_release_recursive>
 8002c2e:	4628      	mov	r0, r5
 8002c30:	bd70      	pop	{r4, r5, r6, pc}
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	da04      	bge.n	8002c40 <_puts_r+0x60>
 8002c36:	69a2      	ldr	r2, [r4, #24]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	dc17      	bgt.n	8002c6c <_puts_r+0x8c>
 8002c3c:	290a      	cmp	r1, #10
 8002c3e:	d015      	beq.n	8002c6c <_puts_r+0x8c>
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	6022      	str	r2, [r4, #0]
 8002c46:	7019      	strb	r1, [r3, #0]
 8002c48:	68a3      	ldr	r3, [r4, #8]
 8002c4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	60a3      	str	r3, [r4, #8]
 8002c52:	2900      	cmp	r1, #0
 8002c54:	d1ed      	bne.n	8002c32 <_puts_r+0x52>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	da11      	bge.n	8002c7e <_puts_r+0x9e>
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	210a      	movs	r1, #10
 8002c5e:	4628      	mov	r0, r5
 8002c60:	f000 f85f 	bl	8002d22 <__swbuf_r>
 8002c64:	3001      	adds	r0, #1
 8002c66:	d0d7      	beq.n	8002c18 <_puts_r+0x38>
 8002c68:	250a      	movs	r5, #10
 8002c6a:	e7d7      	b.n	8002c1c <_puts_r+0x3c>
 8002c6c:	4622      	mov	r2, r4
 8002c6e:	4628      	mov	r0, r5
 8002c70:	f000 f857 	bl	8002d22 <__swbuf_r>
 8002c74:	3001      	adds	r0, #1
 8002c76:	d1e7      	bne.n	8002c48 <_puts_r+0x68>
 8002c78:	e7ce      	b.n	8002c18 <_puts_r+0x38>
 8002c7a:	3e01      	subs	r6, #1
 8002c7c:	e7e4      	b.n	8002c48 <_puts_r+0x68>
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	6022      	str	r2, [r4, #0]
 8002c84:	220a      	movs	r2, #10
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e7ee      	b.n	8002c68 <_puts_r+0x88>
	...

08002c8c <puts>:
 8002c8c:	4b02      	ldr	r3, [pc, #8]	@ (8002c98 <puts+0xc>)
 8002c8e:	4601      	mov	r1, r0
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	f7ff bfa5 	b.w	8002be0 <_puts_r>
 8002c96:	bf00      	nop
 8002c98:	20000018 	.word	0x20000018

08002c9c <__sread>:
 8002c9c:	b510      	push	{r4, lr}
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ca4:	f000 f8fc 	bl	8002ea0 <_read_r>
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	bfab      	itete	ge
 8002cac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002cae:	89a3      	ldrhlt	r3, [r4, #12]
 8002cb0:	181b      	addge	r3, r3, r0
 8002cb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002cb6:	bfac      	ite	ge
 8002cb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002cba:	81a3      	strhlt	r3, [r4, #12]
 8002cbc:	bd10      	pop	{r4, pc}

08002cbe <__swrite>:
 8002cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cc2:	461f      	mov	r7, r3
 8002cc4:	898b      	ldrh	r3, [r1, #12]
 8002cc6:	4605      	mov	r5, r0
 8002cc8:	05db      	lsls	r3, r3, #23
 8002cca:	460c      	mov	r4, r1
 8002ccc:	4616      	mov	r6, r2
 8002cce:	d505      	bpl.n	8002cdc <__swrite+0x1e>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cd8:	f000 f8d0 	bl	8002e7c <_lseek_r>
 8002cdc:	89a3      	ldrh	r3, [r4, #12]
 8002cde:	4632      	mov	r2, r6
 8002ce0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ce4:	81a3      	strh	r3, [r4, #12]
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	463b      	mov	r3, r7
 8002cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cf2:	f000 b8e7 	b.w	8002ec4 <_write_r>

08002cf6 <__sseek>:
 8002cf6:	b510      	push	{r4, lr}
 8002cf8:	460c      	mov	r4, r1
 8002cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cfe:	f000 f8bd 	bl	8002e7c <_lseek_r>
 8002d02:	1c43      	adds	r3, r0, #1
 8002d04:	89a3      	ldrh	r3, [r4, #12]
 8002d06:	bf15      	itete	ne
 8002d08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002d0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002d0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002d12:	81a3      	strheq	r3, [r4, #12]
 8002d14:	bf18      	it	ne
 8002d16:	81a3      	strhne	r3, [r4, #12]
 8002d18:	bd10      	pop	{r4, pc}

08002d1a <__sclose>:
 8002d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d1e:	f000 b89d 	b.w	8002e5c <_close_r>

08002d22 <__swbuf_r>:
 8002d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d24:	460e      	mov	r6, r1
 8002d26:	4614      	mov	r4, r2
 8002d28:	4605      	mov	r5, r0
 8002d2a:	b118      	cbz	r0, 8002d34 <__swbuf_r+0x12>
 8002d2c:	6a03      	ldr	r3, [r0, #32]
 8002d2e:	b90b      	cbnz	r3, 8002d34 <__swbuf_r+0x12>
 8002d30:	f7ff ff0e 	bl	8002b50 <__sinit>
 8002d34:	69a3      	ldr	r3, [r4, #24]
 8002d36:	60a3      	str	r3, [r4, #8]
 8002d38:	89a3      	ldrh	r3, [r4, #12]
 8002d3a:	071a      	lsls	r2, r3, #28
 8002d3c:	d501      	bpl.n	8002d42 <__swbuf_r+0x20>
 8002d3e:	6923      	ldr	r3, [r4, #16]
 8002d40:	b943      	cbnz	r3, 8002d54 <__swbuf_r+0x32>
 8002d42:	4621      	mov	r1, r4
 8002d44:	4628      	mov	r0, r5
 8002d46:	f000 f82b 	bl	8002da0 <__swsetup_r>
 8002d4a:	b118      	cbz	r0, 8002d54 <__swbuf_r+0x32>
 8002d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8002d50:	4638      	mov	r0, r7
 8002d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	6922      	ldr	r2, [r4, #16]
 8002d58:	b2f6      	uxtb	r6, r6
 8002d5a:	1a98      	subs	r0, r3, r2
 8002d5c:	6963      	ldr	r3, [r4, #20]
 8002d5e:	4637      	mov	r7, r6
 8002d60:	4283      	cmp	r3, r0
 8002d62:	dc05      	bgt.n	8002d70 <__swbuf_r+0x4e>
 8002d64:	4621      	mov	r1, r4
 8002d66:	4628      	mov	r0, r5
 8002d68:	f000 fd34 	bl	80037d4 <_fflush_r>
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d1ed      	bne.n	8002d4c <__swbuf_r+0x2a>
 8002d70:	68a3      	ldr	r3, [r4, #8]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	60a3      	str	r3, [r4, #8]
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	6022      	str	r2, [r4, #0]
 8002d7c:	701e      	strb	r6, [r3, #0]
 8002d7e:	6962      	ldr	r2, [r4, #20]
 8002d80:	1c43      	adds	r3, r0, #1
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d004      	beq.n	8002d90 <__swbuf_r+0x6e>
 8002d86:	89a3      	ldrh	r3, [r4, #12]
 8002d88:	07db      	lsls	r3, r3, #31
 8002d8a:	d5e1      	bpl.n	8002d50 <__swbuf_r+0x2e>
 8002d8c:	2e0a      	cmp	r6, #10
 8002d8e:	d1df      	bne.n	8002d50 <__swbuf_r+0x2e>
 8002d90:	4621      	mov	r1, r4
 8002d92:	4628      	mov	r0, r5
 8002d94:	f000 fd1e 	bl	80037d4 <_fflush_r>
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d0d9      	beq.n	8002d50 <__swbuf_r+0x2e>
 8002d9c:	e7d6      	b.n	8002d4c <__swbuf_r+0x2a>
	...

08002da0 <__swsetup_r>:
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	4b29      	ldr	r3, [pc, #164]	@ (8002e48 <__swsetup_r+0xa8>)
 8002da4:	4605      	mov	r5, r0
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	460c      	mov	r4, r1
 8002daa:	b118      	cbz	r0, 8002db4 <__swsetup_r+0x14>
 8002dac:	6a03      	ldr	r3, [r0, #32]
 8002dae:	b90b      	cbnz	r3, 8002db4 <__swsetup_r+0x14>
 8002db0:	f7ff fece 	bl	8002b50 <__sinit>
 8002db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002db8:	0719      	lsls	r1, r3, #28
 8002dba:	d422      	bmi.n	8002e02 <__swsetup_r+0x62>
 8002dbc:	06da      	lsls	r2, r3, #27
 8002dbe:	d407      	bmi.n	8002dd0 <__swsetup_r+0x30>
 8002dc0:	2209      	movs	r2, #9
 8002dc2:	602a      	str	r2, [r5, #0]
 8002dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dcc:	81a3      	strh	r3, [r4, #12]
 8002dce:	e033      	b.n	8002e38 <__swsetup_r+0x98>
 8002dd0:	0758      	lsls	r0, r3, #29
 8002dd2:	d512      	bpl.n	8002dfa <__swsetup_r+0x5a>
 8002dd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002dd6:	b141      	cbz	r1, 8002dea <__swsetup_r+0x4a>
 8002dd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ddc:	4299      	cmp	r1, r3
 8002dde:	d002      	beq.n	8002de6 <__swsetup_r+0x46>
 8002de0:	4628      	mov	r0, r5
 8002de2:	f000 f8af 	bl	8002f44 <_free_r>
 8002de6:	2300      	movs	r3, #0
 8002de8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002dea:	89a3      	ldrh	r3, [r4, #12]
 8002dec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002df0:	81a3      	strh	r3, [r4, #12]
 8002df2:	2300      	movs	r3, #0
 8002df4:	6063      	str	r3, [r4, #4]
 8002df6:	6923      	ldr	r3, [r4, #16]
 8002df8:	6023      	str	r3, [r4, #0]
 8002dfa:	89a3      	ldrh	r3, [r4, #12]
 8002dfc:	f043 0308 	orr.w	r3, r3, #8
 8002e00:	81a3      	strh	r3, [r4, #12]
 8002e02:	6923      	ldr	r3, [r4, #16]
 8002e04:	b94b      	cbnz	r3, 8002e1a <__swsetup_r+0x7a>
 8002e06:	89a3      	ldrh	r3, [r4, #12]
 8002e08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e10:	d003      	beq.n	8002e1a <__swsetup_r+0x7a>
 8002e12:	4621      	mov	r1, r4
 8002e14:	4628      	mov	r0, r5
 8002e16:	f000 fd2a 	bl	800386e <__smakebuf_r>
 8002e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e1e:	f013 0201 	ands.w	r2, r3, #1
 8002e22:	d00a      	beq.n	8002e3a <__swsetup_r+0x9a>
 8002e24:	2200      	movs	r2, #0
 8002e26:	60a2      	str	r2, [r4, #8]
 8002e28:	6962      	ldr	r2, [r4, #20]
 8002e2a:	4252      	negs	r2, r2
 8002e2c:	61a2      	str	r2, [r4, #24]
 8002e2e:	6922      	ldr	r2, [r4, #16]
 8002e30:	b942      	cbnz	r2, 8002e44 <__swsetup_r+0xa4>
 8002e32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002e36:	d1c5      	bne.n	8002dc4 <__swsetup_r+0x24>
 8002e38:	bd38      	pop	{r3, r4, r5, pc}
 8002e3a:	0799      	lsls	r1, r3, #30
 8002e3c:	bf58      	it	pl
 8002e3e:	6962      	ldrpl	r2, [r4, #20]
 8002e40:	60a2      	str	r2, [r4, #8]
 8002e42:	e7f4      	b.n	8002e2e <__swsetup_r+0x8e>
 8002e44:	2000      	movs	r0, #0
 8002e46:	e7f7      	b.n	8002e38 <__swsetup_r+0x98>
 8002e48:	20000018 	.word	0x20000018

08002e4c <memset>:
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4402      	add	r2, r0
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d100      	bne.n	8002e56 <memset+0xa>
 8002e54:	4770      	bx	lr
 8002e56:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5a:	e7f9      	b.n	8002e50 <memset+0x4>

08002e5c <_close_r>:
 8002e5c:	b538      	push	{r3, r4, r5, lr}
 8002e5e:	2300      	movs	r3, #0
 8002e60:	4d05      	ldr	r5, [pc, #20]	@ (8002e78 <_close_r+0x1c>)
 8002e62:	4604      	mov	r4, r0
 8002e64:	4608      	mov	r0, r1
 8002e66:	602b      	str	r3, [r5, #0]
 8002e68:	f7fd fd1b 	bl	80008a2 <_close>
 8002e6c:	1c43      	adds	r3, r0, #1
 8002e6e:	d102      	bne.n	8002e76 <_close_r+0x1a>
 8002e70:	682b      	ldr	r3, [r5, #0]
 8002e72:	b103      	cbz	r3, 8002e76 <_close_r+0x1a>
 8002e74:	6023      	str	r3, [r4, #0]
 8002e76:	bd38      	pop	{r3, r4, r5, pc}
 8002e78:	20000290 	.word	0x20000290

08002e7c <_lseek_r>:
 8002e7c:	b538      	push	{r3, r4, r5, lr}
 8002e7e:	4604      	mov	r4, r0
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	2200      	movs	r2, #0
 8002e86:	4d05      	ldr	r5, [pc, #20]	@ (8002e9c <_lseek_r+0x20>)
 8002e88:	602a      	str	r2, [r5, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f7fd fd2d 	bl	80008ea <_lseek>
 8002e90:	1c43      	adds	r3, r0, #1
 8002e92:	d102      	bne.n	8002e9a <_lseek_r+0x1e>
 8002e94:	682b      	ldr	r3, [r5, #0]
 8002e96:	b103      	cbz	r3, 8002e9a <_lseek_r+0x1e>
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	bd38      	pop	{r3, r4, r5, pc}
 8002e9c:	20000290 	.word	0x20000290

08002ea0 <_read_r>:
 8002ea0:	b538      	push	{r3, r4, r5, lr}
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4d05      	ldr	r5, [pc, #20]	@ (8002ec0 <_read_r+0x20>)
 8002eac:	602a      	str	r2, [r5, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f7fd fcda 	bl	8000868 <_read>
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d102      	bne.n	8002ebe <_read_r+0x1e>
 8002eb8:	682b      	ldr	r3, [r5, #0]
 8002eba:	b103      	cbz	r3, 8002ebe <_read_r+0x1e>
 8002ebc:	6023      	str	r3, [r4, #0]
 8002ebe:	bd38      	pop	{r3, r4, r5, pc}
 8002ec0:	20000290 	.word	0x20000290

08002ec4 <_write_r>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	4608      	mov	r0, r1
 8002eca:	4611      	mov	r1, r2
 8002ecc:	2200      	movs	r2, #0
 8002ece:	4d05      	ldr	r5, [pc, #20]	@ (8002ee4 <_write_r+0x20>)
 8002ed0:	602a      	str	r2, [r5, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f7fd f93a 	bl	800014c <_write>
 8002ed8:	1c43      	adds	r3, r0, #1
 8002eda:	d102      	bne.n	8002ee2 <_write_r+0x1e>
 8002edc:	682b      	ldr	r3, [r5, #0]
 8002ede:	b103      	cbz	r3, 8002ee2 <_write_r+0x1e>
 8002ee0:	6023      	str	r3, [r4, #0]
 8002ee2:	bd38      	pop	{r3, r4, r5, pc}
 8002ee4:	20000290 	.word	0x20000290

08002ee8 <__errno>:
 8002ee8:	4b01      	ldr	r3, [pc, #4]	@ (8002ef0 <__errno+0x8>)
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20000018 	.word	0x20000018

08002ef4 <__libc_init_array>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	4d0c      	ldr	r5, [pc, #48]	@ (8002f2c <__libc_init_array+0x38>)
 8002efa:	4c0d      	ldr	r4, [pc, #52]	@ (8002f30 <__libc_init_array+0x3c>)
 8002efc:	1b64      	subs	r4, r4, r5
 8002efe:	10a4      	asrs	r4, r4, #2
 8002f00:	42a6      	cmp	r6, r4
 8002f02:	d109      	bne.n	8002f18 <__libc_init_array+0x24>
 8002f04:	f000 fd30 	bl	8003968 <_init>
 8002f08:	2600      	movs	r6, #0
 8002f0a:	4d0a      	ldr	r5, [pc, #40]	@ (8002f34 <__libc_init_array+0x40>)
 8002f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f38 <__libc_init_array+0x44>)
 8002f0e:	1b64      	subs	r4, r4, r5
 8002f10:	10a4      	asrs	r4, r4, #2
 8002f12:	42a6      	cmp	r6, r4
 8002f14:	d105      	bne.n	8002f22 <__libc_init_array+0x2e>
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1c:	4798      	blx	r3
 8002f1e:	3601      	adds	r6, #1
 8002f20:	e7ee      	b.n	8002f00 <__libc_init_array+0xc>
 8002f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f26:	4798      	blx	r3
 8002f28:	3601      	adds	r6, #1
 8002f2a:	e7f2      	b.n	8002f12 <__libc_init_array+0x1e>
 8002f2c:	08003aa8 	.word	0x08003aa8
 8002f30:	08003aa8 	.word	0x08003aa8
 8002f34:	08003aa8 	.word	0x08003aa8
 8002f38:	08003aac 	.word	0x08003aac

08002f3c <__retarget_lock_init_recursive>:
 8002f3c:	4770      	bx	lr

08002f3e <__retarget_lock_acquire_recursive>:
 8002f3e:	4770      	bx	lr

08002f40 <__retarget_lock_release_recursive>:
 8002f40:	4770      	bx	lr
	...

08002f44 <_free_r>:
 8002f44:	b538      	push	{r3, r4, r5, lr}
 8002f46:	4605      	mov	r5, r0
 8002f48:	2900      	cmp	r1, #0
 8002f4a:	d040      	beq.n	8002fce <_free_r+0x8a>
 8002f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f50:	1f0c      	subs	r4, r1, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bfb8      	it	lt
 8002f56:	18e4      	addlt	r4, r4, r3
 8002f58:	f000 f8de 	bl	8003118 <__malloc_lock>
 8002f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd0 <_free_r+0x8c>)
 8002f5e:	6813      	ldr	r3, [r2, #0]
 8002f60:	b933      	cbnz	r3, 8002f70 <_free_r+0x2c>
 8002f62:	6063      	str	r3, [r4, #4]
 8002f64:	6014      	str	r4, [r2, #0]
 8002f66:	4628      	mov	r0, r5
 8002f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f6c:	f000 b8da 	b.w	8003124 <__malloc_unlock>
 8002f70:	42a3      	cmp	r3, r4
 8002f72:	d908      	bls.n	8002f86 <_free_r+0x42>
 8002f74:	6820      	ldr	r0, [r4, #0]
 8002f76:	1821      	adds	r1, r4, r0
 8002f78:	428b      	cmp	r3, r1
 8002f7a:	bf01      	itttt	eq
 8002f7c:	6819      	ldreq	r1, [r3, #0]
 8002f7e:	685b      	ldreq	r3, [r3, #4]
 8002f80:	1809      	addeq	r1, r1, r0
 8002f82:	6021      	streq	r1, [r4, #0]
 8002f84:	e7ed      	b.n	8002f62 <_free_r+0x1e>
 8002f86:	461a      	mov	r2, r3
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	b10b      	cbz	r3, 8002f90 <_free_r+0x4c>
 8002f8c:	42a3      	cmp	r3, r4
 8002f8e:	d9fa      	bls.n	8002f86 <_free_r+0x42>
 8002f90:	6811      	ldr	r1, [r2, #0]
 8002f92:	1850      	adds	r0, r2, r1
 8002f94:	42a0      	cmp	r0, r4
 8002f96:	d10b      	bne.n	8002fb0 <_free_r+0x6c>
 8002f98:	6820      	ldr	r0, [r4, #0]
 8002f9a:	4401      	add	r1, r0
 8002f9c:	1850      	adds	r0, r2, r1
 8002f9e:	4283      	cmp	r3, r0
 8002fa0:	6011      	str	r1, [r2, #0]
 8002fa2:	d1e0      	bne.n	8002f66 <_free_r+0x22>
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4408      	add	r0, r1
 8002faa:	6010      	str	r0, [r2, #0]
 8002fac:	6053      	str	r3, [r2, #4]
 8002fae:	e7da      	b.n	8002f66 <_free_r+0x22>
 8002fb0:	d902      	bls.n	8002fb8 <_free_r+0x74>
 8002fb2:	230c      	movs	r3, #12
 8002fb4:	602b      	str	r3, [r5, #0]
 8002fb6:	e7d6      	b.n	8002f66 <_free_r+0x22>
 8002fb8:	6820      	ldr	r0, [r4, #0]
 8002fba:	1821      	adds	r1, r4, r0
 8002fbc:	428b      	cmp	r3, r1
 8002fbe:	bf01      	itttt	eq
 8002fc0:	6819      	ldreq	r1, [r3, #0]
 8002fc2:	685b      	ldreq	r3, [r3, #4]
 8002fc4:	1809      	addeq	r1, r1, r0
 8002fc6:	6021      	streq	r1, [r4, #0]
 8002fc8:	6063      	str	r3, [r4, #4]
 8002fca:	6054      	str	r4, [r2, #4]
 8002fcc:	e7cb      	b.n	8002f66 <_free_r+0x22>
 8002fce:	bd38      	pop	{r3, r4, r5, pc}
 8002fd0:	2000029c 	.word	0x2000029c

08002fd4 <sbrk_aligned>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	4e0f      	ldr	r6, [pc, #60]	@ (8003014 <sbrk_aligned+0x40>)
 8002fd8:	460c      	mov	r4, r1
 8002fda:	6831      	ldr	r1, [r6, #0]
 8002fdc:	4605      	mov	r5, r0
 8002fde:	b911      	cbnz	r1, 8002fe6 <sbrk_aligned+0x12>
 8002fe0:	f000 fca4 	bl	800392c <_sbrk_r>
 8002fe4:	6030      	str	r0, [r6, #0]
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	4628      	mov	r0, r5
 8002fea:	f000 fc9f 	bl	800392c <_sbrk_r>
 8002fee:	1c43      	adds	r3, r0, #1
 8002ff0:	d103      	bne.n	8002ffa <sbrk_aligned+0x26>
 8002ff2:	f04f 34ff 	mov.w	r4, #4294967295
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	bd70      	pop	{r4, r5, r6, pc}
 8002ffa:	1cc4      	adds	r4, r0, #3
 8002ffc:	f024 0403 	bic.w	r4, r4, #3
 8003000:	42a0      	cmp	r0, r4
 8003002:	d0f8      	beq.n	8002ff6 <sbrk_aligned+0x22>
 8003004:	1a21      	subs	r1, r4, r0
 8003006:	4628      	mov	r0, r5
 8003008:	f000 fc90 	bl	800392c <_sbrk_r>
 800300c:	3001      	adds	r0, #1
 800300e:	d1f2      	bne.n	8002ff6 <sbrk_aligned+0x22>
 8003010:	e7ef      	b.n	8002ff2 <sbrk_aligned+0x1e>
 8003012:	bf00      	nop
 8003014:	20000298 	.word	0x20000298

08003018 <_malloc_r>:
 8003018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800301c:	1ccd      	adds	r5, r1, #3
 800301e:	f025 0503 	bic.w	r5, r5, #3
 8003022:	3508      	adds	r5, #8
 8003024:	2d0c      	cmp	r5, #12
 8003026:	bf38      	it	cc
 8003028:	250c      	movcc	r5, #12
 800302a:	2d00      	cmp	r5, #0
 800302c:	4606      	mov	r6, r0
 800302e:	db01      	blt.n	8003034 <_malloc_r+0x1c>
 8003030:	42a9      	cmp	r1, r5
 8003032:	d904      	bls.n	800303e <_malloc_r+0x26>
 8003034:	230c      	movs	r3, #12
 8003036:	6033      	str	r3, [r6, #0]
 8003038:	2000      	movs	r0, #0
 800303a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800303e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003114 <_malloc_r+0xfc>
 8003042:	f000 f869 	bl	8003118 <__malloc_lock>
 8003046:	f8d8 3000 	ldr.w	r3, [r8]
 800304a:	461c      	mov	r4, r3
 800304c:	bb44      	cbnz	r4, 80030a0 <_malloc_r+0x88>
 800304e:	4629      	mov	r1, r5
 8003050:	4630      	mov	r0, r6
 8003052:	f7ff ffbf 	bl	8002fd4 <sbrk_aligned>
 8003056:	1c43      	adds	r3, r0, #1
 8003058:	4604      	mov	r4, r0
 800305a:	d158      	bne.n	800310e <_malloc_r+0xf6>
 800305c:	f8d8 4000 	ldr.w	r4, [r8]
 8003060:	4627      	mov	r7, r4
 8003062:	2f00      	cmp	r7, #0
 8003064:	d143      	bne.n	80030ee <_malloc_r+0xd6>
 8003066:	2c00      	cmp	r4, #0
 8003068:	d04b      	beq.n	8003102 <_malloc_r+0xea>
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	4639      	mov	r1, r7
 800306e:	4630      	mov	r0, r6
 8003070:	eb04 0903 	add.w	r9, r4, r3
 8003074:	f000 fc5a 	bl	800392c <_sbrk_r>
 8003078:	4581      	cmp	r9, r0
 800307a:	d142      	bne.n	8003102 <_malloc_r+0xea>
 800307c:	6821      	ldr	r1, [r4, #0]
 800307e:	4630      	mov	r0, r6
 8003080:	1a6d      	subs	r5, r5, r1
 8003082:	4629      	mov	r1, r5
 8003084:	f7ff ffa6 	bl	8002fd4 <sbrk_aligned>
 8003088:	3001      	adds	r0, #1
 800308a:	d03a      	beq.n	8003102 <_malloc_r+0xea>
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	442b      	add	r3, r5
 8003090:	6023      	str	r3, [r4, #0]
 8003092:	f8d8 3000 	ldr.w	r3, [r8]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	bb62      	cbnz	r2, 80030f4 <_malloc_r+0xdc>
 800309a:	f8c8 7000 	str.w	r7, [r8]
 800309e:	e00f      	b.n	80030c0 <_malloc_r+0xa8>
 80030a0:	6822      	ldr	r2, [r4, #0]
 80030a2:	1b52      	subs	r2, r2, r5
 80030a4:	d420      	bmi.n	80030e8 <_malloc_r+0xd0>
 80030a6:	2a0b      	cmp	r2, #11
 80030a8:	d917      	bls.n	80030da <_malloc_r+0xc2>
 80030aa:	1961      	adds	r1, r4, r5
 80030ac:	42a3      	cmp	r3, r4
 80030ae:	6025      	str	r5, [r4, #0]
 80030b0:	bf18      	it	ne
 80030b2:	6059      	strne	r1, [r3, #4]
 80030b4:	6863      	ldr	r3, [r4, #4]
 80030b6:	bf08      	it	eq
 80030b8:	f8c8 1000 	streq.w	r1, [r8]
 80030bc:	5162      	str	r2, [r4, r5]
 80030be:	604b      	str	r3, [r1, #4]
 80030c0:	4630      	mov	r0, r6
 80030c2:	f000 f82f 	bl	8003124 <__malloc_unlock>
 80030c6:	f104 000b 	add.w	r0, r4, #11
 80030ca:	1d23      	adds	r3, r4, #4
 80030cc:	f020 0007 	bic.w	r0, r0, #7
 80030d0:	1ac2      	subs	r2, r0, r3
 80030d2:	bf1c      	itt	ne
 80030d4:	1a1b      	subne	r3, r3, r0
 80030d6:	50a3      	strne	r3, [r4, r2]
 80030d8:	e7af      	b.n	800303a <_malloc_r+0x22>
 80030da:	6862      	ldr	r2, [r4, #4]
 80030dc:	42a3      	cmp	r3, r4
 80030de:	bf0c      	ite	eq
 80030e0:	f8c8 2000 	streq.w	r2, [r8]
 80030e4:	605a      	strne	r2, [r3, #4]
 80030e6:	e7eb      	b.n	80030c0 <_malloc_r+0xa8>
 80030e8:	4623      	mov	r3, r4
 80030ea:	6864      	ldr	r4, [r4, #4]
 80030ec:	e7ae      	b.n	800304c <_malloc_r+0x34>
 80030ee:	463c      	mov	r4, r7
 80030f0:	687f      	ldr	r7, [r7, #4]
 80030f2:	e7b6      	b.n	8003062 <_malloc_r+0x4a>
 80030f4:	461a      	mov	r2, r3
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	42a3      	cmp	r3, r4
 80030fa:	d1fb      	bne.n	80030f4 <_malloc_r+0xdc>
 80030fc:	2300      	movs	r3, #0
 80030fe:	6053      	str	r3, [r2, #4]
 8003100:	e7de      	b.n	80030c0 <_malloc_r+0xa8>
 8003102:	230c      	movs	r3, #12
 8003104:	4630      	mov	r0, r6
 8003106:	6033      	str	r3, [r6, #0]
 8003108:	f000 f80c 	bl	8003124 <__malloc_unlock>
 800310c:	e794      	b.n	8003038 <_malloc_r+0x20>
 800310e:	6005      	str	r5, [r0, #0]
 8003110:	e7d6      	b.n	80030c0 <_malloc_r+0xa8>
 8003112:	bf00      	nop
 8003114:	2000029c 	.word	0x2000029c

08003118 <__malloc_lock>:
 8003118:	4801      	ldr	r0, [pc, #4]	@ (8003120 <__malloc_lock+0x8>)
 800311a:	f7ff bf10 	b.w	8002f3e <__retarget_lock_acquire_recursive>
 800311e:	bf00      	nop
 8003120:	20000294 	.word	0x20000294

08003124 <__malloc_unlock>:
 8003124:	4801      	ldr	r0, [pc, #4]	@ (800312c <__malloc_unlock+0x8>)
 8003126:	f7ff bf0b 	b.w	8002f40 <__retarget_lock_release_recursive>
 800312a:	bf00      	nop
 800312c:	20000294 	.word	0x20000294

08003130 <__sfputc_r>:
 8003130:	6893      	ldr	r3, [r2, #8]
 8003132:	b410      	push	{r4}
 8003134:	3b01      	subs	r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	6093      	str	r3, [r2, #8]
 800313a:	da07      	bge.n	800314c <__sfputc_r+0x1c>
 800313c:	6994      	ldr	r4, [r2, #24]
 800313e:	42a3      	cmp	r3, r4
 8003140:	db01      	blt.n	8003146 <__sfputc_r+0x16>
 8003142:	290a      	cmp	r1, #10
 8003144:	d102      	bne.n	800314c <__sfputc_r+0x1c>
 8003146:	bc10      	pop	{r4}
 8003148:	f7ff bdeb 	b.w	8002d22 <__swbuf_r>
 800314c:	6813      	ldr	r3, [r2, #0]
 800314e:	1c58      	adds	r0, r3, #1
 8003150:	6010      	str	r0, [r2, #0]
 8003152:	7019      	strb	r1, [r3, #0]
 8003154:	4608      	mov	r0, r1
 8003156:	bc10      	pop	{r4}
 8003158:	4770      	bx	lr

0800315a <__sfputs_r>:
 800315a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315c:	4606      	mov	r6, r0
 800315e:	460f      	mov	r7, r1
 8003160:	4614      	mov	r4, r2
 8003162:	18d5      	adds	r5, r2, r3
 8003164:	42ac      	cmp	r4, r5
 8003166:	d101      	bne.n	800316c <__sfputs_r+0x12>
 8003168:	2000      	movs	r0, #0
 800316a:	e007      	b.n	800317c <__sfputs_r+0x22>
 800316c:	463a      	mov	r2, r7
 800316e:	4630      	mov	r0, r6
 8003170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003174:	f7ff ffdc 	bl	8003130 <__sfputc_r>
 8003178:	1c43      	adds	r3, r0, #1
 800317a:	d1f3      	bne.n	8003164 <__sfputs_r+0xa>
 800317c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003180 <_vfiprintf_r>:
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003184:	460d      	mov	r5, r1
 8003186:	4614      	mov	r4, r2
 8003188:	4698      	mov	r8, r3
 800318a:	4606      	mov	r6, r0
 800318c:	b09d      	sub	sp, #116	@ 0x74
 800318e:	b118      	cbz	r0, 8003198 <_vfiprintf_r+0x18>
 8003190:	6a03      	ldr	r3, [r0, #32]
 8003192:	b90b      	cbnz	r3, 8003198 <_vfiprintf_r+0x18>
 8003194:	f7ff fcdc 	bl	8002b50 <__sinit>
 8003198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800319a:	07d9      	lsls	r1, r3, #31
 800319c:	d405      	bmi.n	80031aa <_vfiprintf_r+0x2a>
 800319e:	89ab      	ldrh	r3, [r5, #12]
 80031a0:	059a      	lsls	r2, r3, #22
 80031a2:	d402      	bmi.n	80031aa <_vfiprintf_r+0x2a>
 80031a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80031a6:	f7ff feca 	bl	8002f3e <__retarget_lock_acquire_recursive>
 80031aa:	89ab      	ldrh	r3, [r5, #12]
 80031ac:	071b      	lsls	r3, r3, #28
 80031ae:	d501      	bpl.n	80031b4 <_vfiprintf_r+0x34>
 80031b0:	692b      	ldr	r3, [r5, #16]
 80031b2:	b99b      	cbnz	r3, 80031dc <_vfiprintf_r+0x5c>
 80031b4:	4629      	mov	r1, r5
 80031b6:	4630      	mov	r0, r6
 80031b8:	f7ff fdf2 	bl	8002da0 <__swsetup_r>
 80031bc:	b170      	cbz	r0, 80031dc <_vfiprintf_r+0x5c>
 80031be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80031c0:	07dc      	lsls	r4, r3, #31
 80031c2:	d504      	bpl.n	80031ce <_vfiprintf_r+0x4e>
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
 80031c8:	b01d      	add	sp, #116	@ 0x74
 80031ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ce:	89ab      	ldrh	r3, [r5, #12]
 80031d0:	0598      	lsls	r0, r3, #22
 80031d2:	d4f7      	bmi.n	80031c4 <_vfiprintf_r+0x44>
 80031d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80031d6:	f7ff feb3 	bl	8002f40 <__retarget_lock_release_recursive>
 80031da:	e7f3      	b.n	80031c4 <_vfiprintf_r+0x44>
 80031dc:	2300      	movs	r3, #0
 80031de:	9309      	str	r3, [sp, #36]	@ 0x24
 80031e0:	2320      	movs	r3, #32
 80031e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80031e6:	2330      	movs	r3, #48	@ 0x30
 80031e8:	f04f 0901 	mov.w	r9, #1
 80031ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80031f0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800339c <_vfiprintf_r+0x21c>
 80031f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031f8:	4623      	mov	r3, r4
 80031fa:	469a      	mov	sl, r3
 80031fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003200:	b10a      	cbz	r2, 8003206 <_vfiprintf_r+0x86>
 8003202:	2a25      	cmp	r2, #37	@ 0x25
 8003204:	d1f9      	bne.n	80031fa <_vfiprintf_r+0x7a>
 8003206:	ebba 0b04 	subs.w	fp, sl, r4
 800320a:	d00b      	beq.n	8003224 <_vfiprintf_r+0xa4>
 800320c:	465b      	mov	r3, fp
 800320e:	4622      	mov	r2, r4
 8003210:	4629      	mov	r1, r5
 8003212:	4630      	mov	r0, r6
 8003214:	f7ff ffa1 	bl	800315a <__sfputs_r>
 8003218:	3001      	adds	r0, #1
 800321a:	f000 80a7 	beq.w	800336c <_vfiprintf_r+0x1ec>
 800321e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003220:	445a      	add	r2, fp
 8003222:	9209      	str	r2, [sp, #36]	@ 0x24
 8003224:	f89a 3000 	ldrb.w	r3, [sl]
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 809f 	beq.w	800336c <_vfiprintf_r+0x1ec>
 800322e:	2300      	movs	r3, #0
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003238:	f10a 0a01 	add.w	sl, sl, #1
 800323c:	9304      	str	r3, [sp, #16]
 800323e:	9307      	str	r3, [sp, #28]
 8003240:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003244:	931a      	str	r3, [sp, #104]	@ 0x68
 8003246:	4654      	mov	r4, sl
 8003248:	2205      	movs	r2, #5
 800324a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800324e:	4853      	ldr	r0, [pc, #332]	@ (800339c <_vfiprintf_r+0x21c>)
 8003250:	f000 fb7c 	bl	800394c <memchr>
 8003254:	9a04      	ldr	r2, [sp, #16]
 8003256:	b9d8      	cbnz	r0, 8003290 <_vfiprintf_r+0x110>
 8003258:	06d1      	lsls	r1, r2, #27
 800325a:	bf44      	itt	mi
 800325c:	2320      	movmi	r3, #32
 800325e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003262:	0713      	lsls	r3, r2, #28
 8003264:	bf44      	itt	mi
 8003266:	232b      	movmi	r3, #43	@ 0x2b
 8003268:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800326c:	f89a 3000 	ldrb.w	r3, [sl]
 8003270:	2b2a      	cmp	r3, #42	@ 0x2a
 8003272:	d015      	beq.n	80032a0 <_vfiprintf_r+0x120>
 8003274:	4654      	mov	r4, sl
 8003276:	2000      	movs	r0, #0
 8003278:	f04f 0c0a 	mov.w	ip, #10
 800327c:	9a07      	ldr	r2, [sp, #28]
 800327e:	4621      	mov	r1, r4
 8003280:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003284:	3b30      	subs	r3, #48	@ 0x30
 8003286:	2b09      	cmp	r3, #9
 8003288:	d94b      	bls.n	8003322 <_vfiprintf_r+0x1a2>
 800328a:	b1b0      	cbz	r0, 80032ba <_vfiprintf_r+0x13a>
 800328c:	9207      	str	r2, [sp, #28]
 800328e:	e014      	b.n	80032ba <_vfiprintf_r+0x13a>
 8003290:	eba0 0308 	sub.w	r3, r0, r8
 8003294:	fa09 f303 	lsl.w	r3, r9, r3
 8003298:	4313      	orrs	r3, r2
 800329a:	46a2      	mov	sl, r4
 800329c:	9304      	str	r3, [sp, #16]
 800329e:	e7d2      	b.n	8003246 <_vfiprintf_r+0xc6>
 80032a0:	9b03      	ldr	r3, [sp, #12]
 80032a2:	1d19      	adds	r1, r3, #4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	9103      	str	r1, [sp, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bfbb      	ittet	lt
 80032ac:	425b      	neglt	r3, r3
 80032ae:	f042 0202 	orrlt.w	r2, r2, #2
 80032b2:	9307      	strge	r3, [sp, #28]
 80032b4:	9307      	strlt	r3, [sp, #28]
 80032b6:	bfb8      	it	lt
 80032b8:	9204      	strlt	r2, [sp, #16]
 80032ba:	7823      	ldrb	r3, [r4, #0]
 80032bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80032be:	d10a      	bne.n	80032d6 <_vfiprintf_r+0x156>
 80032c0:	7863      	ldrb	r3, [r4, #1]
 80032c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80032c4:	d132      	bne.n	800332c <_vfiprintf_r+0x1ac>
 80032c6:	9b03      	ldr	r3, [sp, #12]
 80032c8:	3402      	adds	r4, #2
 80032ca:	1d1a      	adds	r2, r3, #4
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	9203      	str	r2, [sp, #12]
 80032d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032d4:	9305      	str	r3, [sp, #20]
 80032d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80033a0 <_vfiprintf_r+0x220>
 80032da:	2203      	movs	r2, #3
 80032dc:	4650      	mov	r0, sl
 80032de:	7821      	ldrb	r1, [r4, #0]
 80032e0:	f000 fb34 	bl	800394c <memchr>
 80032e4:	b138      	cbz	r0, 80032f6 <_vfiprintf_r+0x176>
 80032e6:	2240      	movs	r2, #64	@ 0x40
 80032e8:	9b04      	ldr	r3, [sp, #16]
 80032ea:	eba0 000a 	sub.w	r0, r0, sl
 80032ee:	4082      	lsls	r2, r0
 80032f0:	4313      	orrs	r3, r2
 80032f2:	3401      	adds	r4, #1
 80032f4:	9304      	str	r3, [sp, #16]
 80032f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032fa:	2206      	movs	r2, #6
 80032fc:	4829      	ldr	r0, [pc, #164]	@ (80033a4 <_vfiprintf_r+0x224>)
 80032fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003302:	f000 fb23 	bl	800394c <memchr>
 8003306:	2800      	cmp	r0, #0
 8003308:	d03f      	beq.n	800338a <_vfiprintf_r+0x20a>
 800330a:	4b27      	ldr	r3, [pc, #156]	@ (80033a8 <_vfiprintf_r+0x228>)
 800330c:	bb1b      	cbnz	r3, 8003356 <_vfiprintf_r+0x1d6>
 800330e:	9b03      	ldr	r3, [sp, #12]
 8003310:	3307      	adds	r3, #7
 8003312:	f023 0307 	bic.w	r3, r3, #7
 8003316:	3308      	adds	r3, #8
 8003318:	9303      	str	r3, [sp, #12]
 800331a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800331c:	443b      	add	r3, r7
 800331e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003320:	e76a      	b.n	80031f8 <_vfiprintf_r+0x78>
 8003322:	460c      	mov	r4, r1
 8003324:	2001      	movs	r0, #1
 8003326:	fb0c 3202 	mla	r2, ip, r2, r3
 800332a:	e7a8      	b.n	800327e <_vfiprintf_r+0xfe>
 800332c:	2300      	movs	r3, #0
 800332e:	f04f 0c0a 	mov.w	ip, #10
 8003332:	4619      	mov	r1, r3
 8003334:	3401      	adds	r4, #1
 8003336:	9305      	str	r3, [sp, #20]
 8003338:	4620      	mov	r0, r4
 800333a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800333e:	3a30      	subs	r2, #48	@ 0x30
 8003340:	2a09      	cmp	r2, #9
 8003342:	d903      	bls.n	800334c <_vfiprintf_r+0x1cc>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0c6      	beq.n	80032d6 <_vfiprintf_r+0x156>
 8003348:	9105      	str	r1, [sp, #20]
 800334a:	e7c4      	b.n	80032d6 <_vfiprintf_r+0x156>
 800334c:	4604      	mov	r4, r0
 800334e:	2301      	movs	r3, #1
 8003350:	fb0c 2101 	mla	r1, ip, r1, r2
 8003354:	e7f0      	b.n	8003338 <_vfiprintf_r+0x1b8>
 8003356:	ab03      	add	r3, sp, #12
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	462a      	mov	r2, r5
 800335c:	4630      	mov	r0, r6
 800335e:	4b13      	ldr	r3, [pc, #76]	@ (80033ac <_vfiprintf_r+0x22c>)
 8003360:	a904      	add	r1, sp, #16
 8003362:	f3af 8000 	nop.w
 8003366:	4607      	mov	r7, r0
 8003368:	1c78      	adds	r0, r7, #1
 800336a:	d1d6      	bne.n	800331a <_vfiprintf_r+0x19a>
 800336c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800336e:	07d9      	lsls	r1, r3, #31
 8003370:	d405      	bmi.n	800337e <_vfiprintf_r+0x1fe>
 8003372:	89ab      	ldrh	r3, [r5, #12]
 8003374:	059a      	lsls	r2, r3, #22
 8003376:	d402      	bmi.n	800337e <_vfiprintf_r+0x1fe>
 8003378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800337a:	f7ff fde1 	bl	8002f40 <__retarget_lock_release_recursive>
 800337e:	89ab      	ldrh	r3, [r5, #12]
 8003380:	065b      	lsls	r3, r3, #25
 8003382:	f53f af1f 	bmi.w	80031c4 <_vfiprintf_r+0x44>
 8003386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003388:	e71e      	b.n	80031c8 <_vfiprintf_r+0x48>
 800338a:	ab03      	add	r3, sp, #12
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	462a      	mov	r2, r5
 8003390:	4630      	mov	r0, r6
 8003392:	4b06      	ldr	r3, [pc, #24]	@ (80033ac <_vfiprintf_r+0x22c>)
 8003394:	a904      	add	r1, sp, #16
 8003396:	f000 f87d 	bl	8003494 <_printf_i>
 800339a:	e7e4      	b.n	8003366 <_vfiprintf_r+0x1e6>
 800339c:	08003a72 	.word	0x08003a72
 80033a0:	08003a78 	.word	0x08003a78
 80033a4:	08003a7c 	.word	0x08003a7c
 80033a8:	00000000 	.word	0x00000000
 80033ac:	0800315b 	.word	0x0800315b

080033b0 <_printf_common>:
 80033b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b4:	4616      	mov	r6, r2
 80033b6:	4698      	mov	r8, r3
 80033b8:	688a      	ldr	r2, [r1, #8]
 80033ba:	690b      	ldr	r3, [r1, #16]
 80033bc:	4607      	mov	r7, r0
 80033be:	4293      	cmp	r3, r2
 80033c0:	bfb8      	it	lt
 80033c2:	4613      	movlt	r3, r2
 80033c4:	6033      	str	r3, [r6, #0]
 80033c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033ca:	460c      	mov	r4, r1
 80033cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033d0:	b10a      	cbz	r2, 80033d6 <_printf_common+0x26>
 80033d2:	3301      	adds	r3, #1
 80033d4:	6033      	str	r3, [r6, #0]
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	0699      	lsls	r1, r3, #26
 80033da:	bf42      	ittt	mi
 80033dc:	6833      	ldrmi	r3, [r6, #0]
 80033de:	3302      	addmi	r3, #2
 80033e0:	6033      	strmi	r3, [r6, #0]
 80033e2:	6825      	ldr	r5, [r4, #0]
 80033e4:	f015 0506 	ands.w	r5, r5, #6
 80033e8:	d106      	bne.n	80033f8 <_printf_common+0x48>
 80033ea:	f104 0a19 	add.w	sl, r4, #25
 80033ee:	68e3      	ldr	r3, [r4, #12]
 80033f0:	6832      	ldr	r2, [r6, #0]
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	42ab      	cmp	r3, r5
 80033f6:	dc2b      	bgt.n	8003450 <_printf_common+0xa0>
 80033f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033fc:	6822      	ldr	r2, [r4, #0]
 80033fe:	3b00      	subs	r3, #0
 8003400:	bf18      	it	ne
 8003402:	2301      	movne	r3, #1
 8003404:	0692      	lsls	r2, r2, #26
 8003406:	d430      	bmi.n	800346a <_printf_common+0xba>
 8003408:	4641      	mov	r1, r8
 800340a:	4638      	mov	r0, r7
 800340c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003410:	47c8      	blx	r9
 8003412:	3001      	adds	r0, #1
 8003414:	d023      	beq.n	800345e <_printf_common+0xae>
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	6922      	ldr	r2, [r4, #16]
 800341a:	f003 0306 	and.w	r3, r3, #6
 800341e:	2b04      	cmp	r3, #4
 8003420:	bf14      	ite	ne
 8003422:	2500      	movne	r5, #0
 8003424:	6833      	ldreq	r3, [r6, #0]
 8003426:	f04f 0600 	mov.w	r6, #0
 800342a:	bf08      	it	eq
 800342c:	68e5      	ldreq	r5, [r4, #12]
 800342e:	f104 041a 	add.w	r4, r4, #26
 8003432:	bf08      	it	eq
 8003434:	1aed      	subeq	r5, r5, r3
 8003436:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800343a:	bf08      	it	eq
 800343c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003440:	4293      	cmp	r3, r2
 8003442:	bfc4      	itt	gt
 8003444:	1a9b      	subgt	r3, r3, r2
 8003446:	18ed      	addgt	r5, r5, r3
 8003448:	42b5      	cmp	r5, r6
 800344a:	d11a      	bne.n	8003482 <_printf_common+0xd2>
 800344c:	2000      	movs	r0, #0
 800344e:	e008      	b.n	8003462 <_printf_common+0xb2>
 8003450:	2301      	movs	r3, #1
 8003452:	4652      	mov	r2, sl
 8003454:	4641      	mov	r1, r8
 8003456:	4638      	mov	r0, r7
 8003458:	47c8      	blx	r9
 800345a:	3001      	adds	r0, #1
 800345c:	d103      	bne.n	8003466 <_printf_common+0xb6>
 800345e:	f04f 30ff 	mov.w	r0, #4294967295
 8003462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003466:	3501      	adds	r5, #1
 8003468:	e7c1      	b.n	80033ee <_printf_common+0x3e>
 800346a:	2030      	movs	r0, #48	@ 0x30
 800346c:	18e1      	adds	r1, r4, r3
 800346e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003478:	4422      	add	r2, r4
 800347a:	3302      	adds	r3, #2
 800347c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003480:	e7c2      	b.n	8003408 <_printf_common+0x58>
 8003482:	2301      	movs	r3, #1
 8003484:	4622      	mov	r2, r4
 8003486:	4641      	mov	r1, r8
 8003488:	4638      	mov	r0, r7
 800348a:	47c8      	blx	r9
 800348c:	3001      	adds	r0, #1
 800348e:	d0e6      	beq.n	800345e <_printf_common+0xae>
 8003490:	3601      	adds	r6, #1
 8003492:	e7d9      	b.n	8003448 <_printf_common+0x98>

08003494 <_printf_i>:
 8003494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003498:	7e0f      	ldrb	r7, [r1, #24]
 800349a:	4691      	mov	r9, r2
 800349c:	2f78      	cmp	r7, #120	@ 0x78
 800349e:	4680      	mov	r8, r0
 80034a0:	460c      	mov	r4, r1
 80034a2:	469a      	mov	sl, r3
 80034a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034aa:	d807      	bhi.n	80034bc <_printf_i+0x28>
 80034ac:	2f62      	cmp	r7, #98	@ 0x62
 80034ae:	d80a      	bhi.n	80034c6 <_printf_i+0x32>
 80034b0:	2f00      	cmp	r7, #0
 80034b2:	f000 80d3 	beq.w	800365c <_printf_i+0x1c8>
 80034b6:	2f58      	cmp	r7, #88	@ 0x58
 80034b8:	f000 80ba 	beq.w	8003630 <_printf_i+0x19c>
 80034bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034c4:	e03a      	b.n	800353c <_printf_i+0xa8>
 80034c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034ca:	2b15      	cmp	r3, #21
 80034cc:	d8f6      	bhi.n	80034bc <_printf_i+0x28>
 80034ce:	a101      	add	r1, pc, #4	@ (adr r1, 80034d4 <_printf_i+0x40>)
 80034d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034d4:	0800352d 	.word	0x0800352d
 80034d8:	08003541 	.word	0x08003541
 80034dc:	080034bd 	.word	0x080034bd
 80034e0:	080034bd 	.word	0x080034bd
 80034e4:	080034bd 	.word	0x080034bd
 80034e8:	080034bd 	.word	0x080034bd
 80034ec:	08003541 	.word	0x08003541
 80034f0:	080034bd 	.word	0x080034bd
 80034f4:	080034bd 	.word	0x080034bd
 80034f8:	080034bd 	.word	0x080034bd
 80034fc:	080034bd 	.word	0x080034bd
 8003500:	08003643 	.word	0x08003643
 8003504:	0800356b 	.word	0x0800356b
 8003508:	080035fd 	.word	0x080035fd
 800350c:	080034bd 	.word	0x080034bd
 8003510:	080034bd 	.word	0x080034bd
 8003514:	08003665 	.word	0x08003665
 8003518:	080034bd 	.word	0x080034bd
 800351c:	0800356b 	.word	0x0800356b
 8003520:	080034bd 	.word	0x080034bd
 8003524:	080034bd 	.word	0x080034bd
 8003528:	08003605 	.word	0x08003605
 800352c:	6833      	ldr	r3, [r6, #0]
 800352e:	1d1a      	adds	r2, r3, #4
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6032      	str	r2, [r6, #0]
 8003534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003538:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800353c:	2301      	movs	r3, #1
 800353e:	e09e      	b.n	800367e <_printf_i+0x1ea>
 8003540:	6833      	ldr	r3, [r6, #0]
 8003542:	6820      	ldr	r0, [r4, #0]
 8003544:	1d19      	adds	r1, r3, #4
 8003546:	6031      	str	r1, [r6, #0]
 8003548:	0606      	lsls	r6, r0, #24
 800354a:	d501      	bpl.n	8003550 <_printf_i+0xbc>
 800354c:	681d      	ldr	r5, [r3, #0]
 800354e:	e003      	b.n	8003558 <_printf_i+0xc4>
 8003550:	0645      	lsls	r5, r0, #25
 8003552:	d5fb      	bpl.n	800354c <_printf_i+0xb8>
 8003554:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003558:	2d00      	cmp	r5, #0
 800355a:	da03      	bge.n	8003564 <_printf_i+0xd0>
 800355c:	232d      	movs	r3, #45	@ 0x2d
 800355e:	426d      	negs	r5, r5
 8003560:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003564:	230a      	movs	r3, #10
 8003566:	4859      	ldr	r0, [pc, #356]	@ (80036cc <_printf_i+0x238>)
 8003568:	e011      	b.n	800358e <_printf_i+0xfa>
 800356a:	6821      	ldr	r1, [r4, #0]
 800356c:	6833      	ldr	r3, [r6, #0]
 800356e:	0608      	lsls	r0, r1, #24
 8003570:	f853 5b04 	ldr.w	r5, [r3], #4
 8003574:	d402      	bmi.n	800357c <_printf_i+0xe8>
 8003576:	0649      	lsls	r1, r1, #25
 8003578:	bf48      	it	mi
 800357a:	b2ad      	uxthmi	r5, r5
 800357c:	2f6f      	cmp	r7, #111	@ 0x6f
 800357e:	6033      	str	r3, [r6, #0]
 8003580:	bf14      	ite	ne
 8003582:	230a      	movne	r3, #10
 8003584:	2308      	moveq	r3, #8
 8003586:	4851      	ldr	r0, [pc, #324]	@ (80036cc <_printf_i+0x238>)
 8003588:	2100      	movs	r1, #0
 800358a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800358e:	6866      	ldr	r6, [r4, #4]
 8003590:	2e00      	cmp	r6, #0
 8003592:	bfa8      	it	ge
 8003594:	6821      	ldrge	r1, [r4, #0]
 8003596:	60a6      	str	r6, [r4, #8]
 8003598:	bfa4      	itt	ge
 800359a:	f021 0104 	bicge.w	r1, r1, #4
 800359e:	6021      	strge	r1, [r4, #0]
 80035a0:	b90d      	cbnz	r5, 80035a6 <_printf_i+0x112>
 80035a2:	2e00      	cmp	r6, #0
 80035a4:	d04b      	beq.n	800363e <_printf_i+0x1aa>
 80035a6:	4616      	mov	r6, r2
 80035a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80035ac:	fb03 5711 	mls	r7, r3, r1, r5
 80035b0:	5dc7      	ldrb	r7, [r0, r7]
 80035b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035b6:	462f      	mov	r7, r5
 80035b8:	42bb      	cmp	r3, r7
 80035ba:	460d      	mov	r5, r1
 80035bc:	d9f4      	bls.n	80035a8 <_printf_i+0x114>
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d10b      	bne.n	80035da <_printf_i+0x146>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	07df      	lsls	r7, r3, #31
 80035c6:	d508      	bpl.n	80035da <_printf_i+0x146>
 80035c8:	6923      	ldr	r3, [r4, #16]
 80035ca:	6861      	ldr	r1, [r4, #4]
 80035cc:	4299      	cmp	r1, r3
 80035ce:	bfde      	ittt	le
 80035d0:	2330      	movle	r3, #48	@ 0x30
 80035d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035da:	1b92      	subs	r2, r2, r6
 80035dc:	6122      	str	r2, [r4, #16]
 80035de:	464b      	mov	r3, r9
 80035e0:	4621      	mov	r1, r4
 80035e2:	4640      	mov	r0, r8
 80035e4:	f8cd a000 	str.w	sl, [sp]
 80035e8:	aa03      	add	r2, sp, #12
 80035ea:	f7ff fee1 	bl	80033b0 <_printf_common>
 80035ee:	3001      	adds	r0, #1
 80035f0:	d14a      	bne.n	8003688 <_printf_i+0x1f4>
 80035f2:	f04f 30ff 	mov.w	r0, #4294967295
 80035f6:	b004      	add	sp, #16
 80035f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	f043 0320 	orr.w	r3, r3, #32
 8003602:	6023      	str	r3, [r4, #0]
 8003604:	2778      	movs	r7, #120	@ 0x78
 8003606:	4832      	ldr	r0, [pc, #200]	@ (80036d0 <_printf_i+0x23c>)
 8003608:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	6831      	ldr	r1, [r6, #0]
 8003610:	061f      	lsls	r7, r3, #24
 8003612:	f851 5b04 	ldr.w	r5, [r1], #4
 8003616:	d402      	bmi.n	800361e <_printf_i+0x18a>
 8003618:	065f      	lsls	r7, r3, #25
 800361a:	bf48      	it	mi
 800361c:	b2ad      	uxthmi	r5, r5
 800361e:	6031      	str	r1, [r6, #0]
 8003620:	07d9      	lsls	r1, r3, #31
 8003622:	bf44      	itt	mi
 8003624:	f043 0320 	orrmi.w	r3, r3, #32
 8003628:	6023      	strmi	r3, [r4, #0]
 800362a:	b11d      	cbz	r5, 8003634 <_printf_i+0x1a0>
 800362c:	2310      	movs	r3, #16
 800362e:	e7ab      	b.n	8003588 <_printf_i+0xf4>
 8003630:	4826      	ldr	r0, [pc, #152]	@ (80036cc <_printf_i+0x238>)
 8003632:	e7e9      	b.n	8003608 <_printf_i+0x174>
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	f023 0320 	bic.w	r3, r3, #32
 800363a:	6023      	str	r3, [r4, #0]
 800363c:	e7f6      	b.n	800362c <_printf_i+0x198>
 800363e:	4616      	mov	r6, r2
 8003640:	e7bd      	b.n	80035be <_printf_i+0x12a>
 8003642:	6833      	ldr	r3, [r6, #0]
 8003644:	6825      	ldr	r5, [r4, #0]
 8003646:	1d18      	adds	r0, r3, #4
 8003648:	6961      	ldr	r1, [r4, #20]
 800364a:	6030      	str	r0, [r6, #0]
 800364c:	062e      	lsls	r6, r5, #24
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	d501      	bpl.n	8003656 <_printf_i+0x1c2>
 8003652:	6019      	str	r1, [r3, #0]
 8003654:	e002      	b.n	800365c <_printf_i+0x1c8>
 8003656:	0668      	lsls	r0, r5, #25
 8003658:	d5fb      	bpl.n	8003652 <_printf_i+0x1be>
 800365a:	8019      	strh	r1, [r3, #0]
 800365c:	2300      	movs	r3, #0
 800365e:	4616      	mov	r6, r2
 8003660:	6123      	str	r3, [r4, #16]
 8003662:	e7bc      	b.n	80035de <_printf_i+0x14a>
 8003664:	6833      	ldr	r3, [r6, #0]
 8003666:	2100      	movs	r1, #0
 8003668:	1d1a      	adds	r2, r3, #4
 800366a:	6032      	str	r2, [r6, #0]
 800366c:	681e      	ldr	r6, [r3, #0]
 800366e:	6862      	ldr	r2, [r4, #4]
 8003670:	4630      	mov	r0, r6
 8003672:	f000 f96b 	bl	800394c <memchr>
 8003676:	b108      	cbz	r0, 800367c <_printf_i+0x1e8>
 8003678:	1b80      	subs	r0, r0, r6
 800367a:	6060      	str	r0, [r4, #4]
 800367c:	6863      	ldr	r3, [r4, #4]
 800367e:	6123      	str	r3, [r4, #16]
 8003680:	2300      	movs	r3, #0
 8003682:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003686:	e7aa      	b.n	80035de <_printf_i+0x14a>
 8003688:	4632      	mov	r2, r6
 800368a:	4649      	mov	r1, r9
 800368c:	4640      	mov	r0, r8
 800368e:	6923      	ldr	r3, [r4, #16]
 8003690:	47d0      	blx	sl
 8003692:	3001      	adds	r0, #1
 8003694:	d0ad      	beq.n	80035f2 <_printf_i+0x15e>
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	079b      	lsls	r3, r3, #30
 800369a:	d413      	bmi.n	80036c4 <_printf_i+0x230>
 800369c:	68e0      	ldr	r0, [r4, #12]
 800369e:	9b03      	ldr	r3, [sp, #12]
 80036a0:	4298      	cmp	r0, r3
 80036a2:	bfb8      	it	lt
 80036a4:	4618      	movlt	r0, r3
 80036a6:	e7a6      	b.n	80035f6 <_printf_i+0x162>
 80036a8:	2301      	movs	r3, #1
 80036aa:	4632      	mov	r2, r6
 80036ac:	4649      	mov	r1, r9
 80036ae:	4640      	mov	r0, r8
 80036b0:	47d0      	blx	sl
 80036b2:	3001      	adds	r0, #1
 80036b4:	d09d      	beq.n	80035f2 <_printf_i+0x15e>
 80036b6:	3501      	adds	r5, #1
 80036b8:	68e3      	ldr	r3, [r4, #12]
 80036ba:	9903      	ldr	r1, [sp, #12]
 80036bc:	1a5b      	subs	r3, r3, r1
 80036be:	42ab      	cmp	r3, r5
 80036c0:	dcf2      	bgt.n	80036a8 <_printf_i+0x214>
 80036c2:	e7eb      	b.n	800369c <_printf_i+0x208>
 80036c4:	2500      	movs	r5, #0
 80036c6:	f104 0619 	add.w	r6, r4, #25
 80036ca:	e7f5      	b.n	80036b8 <_printf_i+0x224>
 80036cc:	08003a83 	.word	0x08003a83
 80036d0:	08003a94 	.word	0x08003a94

080036d4 <__sflush_r>:
 80036d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	0716      	lsls	r6, r2, #28
 80036dc:	4605      	mov	r5, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	d454      	bmi.n	800378c <__sflush_r+0xb8>
 80036e2:	684b      	ldr	r3, [r1, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	dc02      	bgt.n	80036ee <__sflush_r+0x1a>
 80036e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	dd48      	ble.n	8003780 <__sflush_r+0xac>
 80036ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036f0:	2e00      	cmp	r6, #0
 80036f2:	d045      	beq.n	8003780 <__sflush_r+0xac>
 80036f4:	2300      	movs	r3, #0
 80036f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80036fa:	682f      	ldr	r7, [r5, #0]
 80036fc:	6a21      	ldr	r1, [r4, #32]
 80036fe:	602b      	str	r3, [r5, #0]
 8003700:	d030      	beq.n	8003764 <__sflush_r+0x90>
 8003702:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003704:	89a3      	ldrh	r3, [r4, #12]
 8003706:	0759      	lsls	r1, r3, #29
 8003708:	d505      	bpl.n	8003716 <__sflush_r+0x42>
 800370a:	6863      	ldr	r3, [r4, #4]
 800370c:	1ad2      	subs	r2, r2, r3
 800370e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003710:	b10b      	cbz	r3, 8003716 <__sflush_r+0x42>
 8003712:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003714:	1ad2      	subs	r2, r2, r3
 8003716:	2300      	movs	r3, #0
 8003718:	4628      	mov	r0, r5
 800371a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800371c:	6a21      	ldr	r1, [r4, #32]
 800371e:	47b0      	blx	r6
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	89a3      	ldrh	r3, [r4, #12]
 8003724:	d106      	bne.n	8003734 <__sflush_r+0x60>
 8003726:	6829      	ldr	r1, [r5, #0]
 8003728:	291d      	cmp	r1, #29
 800372a:	d82b      	bhi.n	8003784 <__sflush_r+0xb0>
 800372c:	4a28      	ldr	r2, [pc, #160]	@ (80037d0 <__sflush_r+0xfc>)
 800372e:	410a      	asrs	r2, r1
 8003730:	07d6      	lsls	r6, r2, #31
 8003732:	d427      	bmi.n	8003784 <__sflush_r+0xb0>
 8003734:	2200      	movs	r2, #0
 8003736:	6062      	str	r2, [r4, #4]
 8003738:	6922      	ldr	r2, [r4, #16]
 800373a:	04d9      	lsls	r1, r3, #19
 800373c:	6022      	str	r2, [r4, #0]
 800373e:	d504      	bpl.n	800374a <__sflush_r+0x76>
 8003740:	1c42      	adds	r2, r0, #1
 8003742:	d101      	bne.n	8003748 <__sflush_r+0x74>
 8003744:	682b      	ldr	r3, [r5, #0]
 8003746:	b903      	cbnz	r3, 800374a <__sflush_r+0x76>
 8003748:	6560      	str	r0, [r4, #84]	@ 0x54
 800374a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800374c:	602f      	str	r7, [r5, #0]
 800374e:	b1b9      	cbz	r1, 8003780 <__sflush_r+0xac>
 8003750:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003754:	4299      	cmp	r1, r3
 8003756:	d002      	beq.n	800375e <__sflush_r+0x8a>
 8003758:	4628      	mov	r0, r5
 800375a:	f7ff fbf3 	bl	8002f44 <_free_r>
 800375e:	2300      	movs	r3, #0
 8003760:	6363      	str	r3, [r4, #52]	@ 0x34
 8003762:	e00d      	b.n	8003780 <__sflush_r+0xac>
 8003764:	2301      	movs	r3, #1
 8003766:	4628      	mov	r0, r5
 8003768:	47b0      	blx	r6
 800376a:	4602      	mov	r2, r0
 800376c:	1c50      	adds	r0, r2, #1
 800376e:	d1c9      	bne.n	8003704 <__sflush_r+0x30>
 8003770:	682b      	ldr	r3, [r5, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0c6      	beq.n	8003704 <__sflush_r+0x30>
 8003776:	2b1d      	cmp	r3, #29
 8003778:	d001      	beq.n	800377e <__sflush_r+0xaa>
 800377a:	2b16      	cmp	r3, #22
 800377c:	d11d      	bne.n	80037ba <__sflush_r+0xe6>
 800377e:	602f      	str	r7, [r5, #0]
 8003780:	2000      	movs	r0, #0
 8003782:	e021      	b.n	80037c8 <__sflush_r+0xf4>
 8003784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003788:	b21b      	sxth	r3, r3
 800378a:	e01a      	b.n	80037c2 <__sflush_r+0xee>
 800378c:	690f      	ldr	r7, [r1, #16]
 800378e:	2f00      	cmp	r7, #0
 8003790:	d0f6      	beq.n	8003780 <__sflush_r+0xac>
 8003792:	0793      	lsls	r3, r2, #30
 8003794:	bf18      	it	ne
 8003796:	2300      	movne	r3, #0
 8003798:	680e      	ldr	r6, [r1, #0]
 800379a:	bf08      	it	eq
 800379c:	694b      	ldreq	r3, [r1, #20]
 800379e:	1bf6      	subs	r6, r6, r7
 80037a0:	600f      	str	r7, [r1, #0]
 80037a2:	608b      	str	r3, [r1, #8]
 80037a4:	2e00      	cmp	r6, #0
 80037a6:	ddeb      	ble.n	8003780 <__sflush_r+0xac>
 80037a8:	4633      	mov	r3, r6
 80037aa:	463a      	mov	r2, r7
 80037ac:	4628      	mov	r0, r5
 80037ae:	6a21      	ldr	r1, [r4, #32]
 80037b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80037b4:	47e0      	blx	ip
 80037b6:	2800      	cmp	r0, #0
 80037b8:	dc07      	bgt.n	80037ca <__sflush_r+0xf6>
 80037ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037c2:	f04f 30ff 	mov.w	r0, #4294967295
 80037c6:	81a3      	strh	r3, [r4, #12]
 80037c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ca:	4407      	add	r7, r0
 80037cc:	1a36      	subs	r6, r6, r0
 80037ce:	e7e9      	b.n	80037a4 <__sflush_r+0xd0>
 80037d0:	dfbffffe 	.word	0xdfbffffe

080037d4 <_fflush_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	690b      	ldr	r3, [r1, #16]
 80037d8:	4605      	mov	r5, r0
 80037da:	460c      	mov	r4, r1
 80037dc:	b913      	cbnz	r3, 80037e4 <_fflush_r+0x10>
 80037de:	2500      	movs	r5, #0
 80037e0:	4628      	mov	r0, r5
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	b118      	cbz	r0, 80037ee <_fflush_r+0x1a>
 80037e6:	6a03      	ldr	r3, [r0, #32]
 80037e8:	b90b      	cbnz	r3, 80037ee <_fflush_r+0x1a>
 80037ea:	f7ff f9b1 	bl	8002b50 <__sinit>
 80037ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f3      	beq.n	80037de <_fflush_r+0xa>
 80037f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80037f8:	07d0      	lsls	r0, r2, #31
 80037fa:	d404      	bmi.n	8003806 <_fflush_r+0x32>
 80037fc:	0599      	lsls	r1, r3, #22
 80037fe:	d402      	bmi.n	8003806 <_fflush_r+0x32>
 8003800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003802:	f7ff fb9c 	bl	8002f3e <__retarget_lock_acquire_recursive>
 8003806:	4628      	mov	r0, r5
 8003808:	4621      	mov	r1, r4
 800380a:	f7ff ff63 	bl	80036d4 <__sflush_r>
 800380e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003810:	4605      	mov	r5, r0
 8003812:	07da      	lsls	r2, r3, #31
 8003814:	d4e4      	bmi.n	80037e0 <_fflush_r+0xc>
 8003816:	89a3      	ldrh	r3, [r4, #12]
 8003818:	059b      	lsls	r3, r3, #22
 800381a:	d4e1      	bmi.n	80037e0 <_fflush_r+0xc>
 800381c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800381e:	f7ff fb8f 	bl	8002f40 <__retarget_lock_release_recursive>
 8003822:	e7dd      	b.n	80037e0 <_fflush_r+0xc>

08003824 <__swhatbuf_r>:
 8003824:	b570      	push	{r4, r5, r6, lr}
 8003826:	460c      	mov	r4, r1
 8003828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800382c:	4615      	mov	r5, r2
 800382e:	2900      	cmp	r1, #0
 8003830:	461e      	mov	r6, r3
 8003832:	b096      	sub	sp, #88	@ 0x58
 8003834:	da0c      	bge.n	8003850 <__swhatbuf_r+0x2c>
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	2100      	movs	r1, #0
 800383a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800383e:	bf14      	ite	ne
 8003840:	2340      	movne	r3, #64	@ 0x40
 8003842:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003846:	2000      	movs	r0, #0
 8003848:	6031      	str	r1, [r6, #0]
 800384a:	602b      	str	r3, [r5, #0]
 800384c:	b016      	add	sp, #88	@ 0x58
 800384e:	bd70      	pop	{r4, r5, r6, pc}
 8003850:	466a      	mov	r2, sp
 8003852:	f000 f849 	bl	80038e8 <_fstat_r>
 8003856:	2800      	cmp	r0, #0
 8003858:	dbed      	blt.n	8003836 <__swhatbuf_r+0x12>
 800385a:	9901      	ldr	r1, [sp, #4]
 800385c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003860:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003864:	4259      	negs	r1, r3
 8003866:	4159      	adcs	r1, r3
 8003868:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800386c:	e7eb      	b.n	8003846 <__swhatbuf_r+0x22>

0800386e <__smakebuf_r>:
 800386e:	898b      	ldrh	r3, [r1, #12]
 8003870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003872:	079d      	lsls	r5, r3, #30
 8003874:	4606      	mov	r6, r0
 8003876:	460c      	mov	r4, r1
 8003878:	d507      	bpl.n	800388a <__smakebuf_r+0x1c>
 800387a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800387e:	6023      	str	r3, [r4, #0]
 8003880:	6123      	str	r3, [r4, #16]
 8003882:	2301      	movs	r3, #1
 8003884:	6163      	str	r3, [r4, #20]
 8003886:	b003      	add	sp, #12
 8003888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388a:	466a      	mov	r2, sp
 800388c:	ab01      	add	r3, sp, #4
 800388e:	f7ff ffc9 	bl	8003824 <__swhatbuf_r>
 8003892:	9f00      	ldr	r7, [sp, #0]
 8003894:	4605      	mov	r5, r0
 8003896:	4639      	mov	r1, r7
 8003898:	4630      	mov	r0, r6
 800389a:	f7ff fbbd 	bl	8003018 <_malloc_r>
 800389e:	b948      	cbnz	r0, 80038b4 <__smakebuf_r+0x46>
 80038a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038a4:	059a      	lsls	r2, r3, #22
 80038a6:	d4ee      	bmi.n	8003886 <__smakebuf_r+0x18>
 80038a8:	f023 0303 	bic.w	r3, r3, #3
 80038ac:	f043 0302 	orr.w	r3, r3, #2
 80038b0:	81a3      	strh	r3, [r4, #12]
 80038b2:	e7e2      	b.n	800387a <__smakebuf_r+0xc>
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80038ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038be:	81a3      	strh	r3, [r4, #12]
 80038c0:	9b01      	ldr	r3, [sp, #4]
 80038c2:	6020      	str	r0, [r4, #0]
 80038c4:	b15b      	cbz	r3, 80038de <__smakebuf_r+0x70>
 80038c6:	4630      	mov	r0, r6
 80038c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038cc:	f000 f81e 	bl	800390c <_isatty_r>
 80038d0:	b128      	cbz	r0, 80038de <__smakebuf_r+0x70>
 80038d2:	89a3      	ldrh	r3, [r4, #12]
 80038d4:	f023 0303 	bic.w	r3, r3, #3
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	81a3      	strh	r3, [r4, #12]
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	431d      	orrs	r5, r3
 80038e2:	81a5      	strh	r5, [r4, #12]
 80038e4:	e7cf      	b.n	8003886 <__smakebuf_r+0x18>
	...

080038e8 <_fstat_r>:
 80038e8:	b538      	push	{r3, r4, r5, lr}
 80038ea:	2300      	movs	r3, #0
 80038ec:	4d06      	ldr	r5, [pc, #24]	@ (8003908 <_fstat_r+0x20>)
 80038ee:	4604      	mov	r4, r0
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	602b      	str	r3, [r5, #0]
 80038f6:	f7fc ffdf 	bl	80008b8 <_fstat>
 80038fa:	1c43      	adds	r3, r0, #1
 80038fc:	d102      	bne.n	8003904 <_fstat_r+0x1c>
 80038fe:	682b      	ldr	r3, [r5, #0]
 8003900:	b103      	cbz	r3, 8003904 <_fstat_r+0x1c>
 8003902:	6023      	str	r3, [r4, #0]
 8003904:	bd38      	pop	{r3, r4, r5, pc}
 8003906:	bf00      	nop
 8003908:	20000290 	.word	0x20000290

0800390c <_isatty_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	2300      	movs	r3, #0
 8003910:	4d05      	ldr	r5, [pc, #20]	@ (8003928 <_isatty_r+0x1c>)
 8003912:	4604      	mov	r4, r0
 8003914:	4608      	mov	r0, r1
 8003916:	602b      	str	r3, [r5, #0]
 8003918:	f7fc ffdd 	bl	80008d6 <_isatty>
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	d102      	bne.n	8003926 <_isatty_r+0x1a>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	b103      	cbz	r3, 8003926 <_isatty_r+0x1a>
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	bd38      	pop	{r3, r4, r5, pc}
 8003928:	20000290 	.word	0x20000290

0800392c <_sbrk_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	2300      	movs	r3, #0
 8003930:	4d05      	ldr	r5, [pc, #20]	@ (8003948 <_sbrk_r+0x1c>)
 8003932:	4604      	mov	r4, r0
 8003934:	4608      	mov	r0, r1
 8003936:	602b      	str	r3, [r5, #0]
 8003938:	f7fc ffe4 	bl	8000904 <_sbrk>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d102      	bne.n	8003946 <_sbrk_r+0x1a>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	b103      	cbz	r3, 8003946 <_sbrk_r+0x1a>
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	20000290 	.word	0x20000290

0800394c <memchr>:
 800394c:	4603      	mov	r3, r0
 800394e:	b510      	push	{r4, lr}
 8003950:	b2c9      	uxtb	r1, r1
 8003952:	4402      	add	r2, r0
 8003954:	4293      	cmp	r3, r2
 8003956:	4618      	mov	r0, r3
 8003958:	d101      	bne.n	800395e <memchr+0x12>
 800395a:	2000      	movs	r0, #0
 800395c:	e003      	b.n	8003966 <memchr+0x1a>
 800395e:	7804      	ldrb	r4, [r0, #0]
 8003960:	3301      	adds	r3, #1
 8003962:	428c      	cmp	r4, r1
 8003964:	d1f6      	bne.n	8003954 <memchr+0x8>
 8003966:	bd10      	pop	{r4, pc}

08003968 <_init>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	bf00      	nop
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr

08003974 <_fini>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr
